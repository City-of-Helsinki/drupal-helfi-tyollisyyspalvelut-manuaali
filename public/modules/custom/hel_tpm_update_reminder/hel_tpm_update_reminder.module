<?php

/**
 * @file
 * Module file for hel_tpm_update_reminder.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\hel_tpm_update_reminder\UpdateReminderUtility;
use Drupal\message\Entity\Message;
use Drupal\node\NodeInterface;

/**
 * Implements hook_cron().
 */
function hel_tpm_update_reminder_cron() {
  _hel_tpm_update_reminder_service_reminders();

  _hel_tpm_update_reminder_notification_message_expiry_reminder(7);
  _hel_tpm_update_reminder_notification_message_expiry_reminder(1);
}

/**
 * Sends service reminder messages and mark outdated services as such.
 *
 * @return void
 *   Void.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _hel_tpm_update_reminder_service_reminders(): void {
  // Fetch all node ids with published moderation state.
  $published_moderation_nids = \Drupal::database()->select('content_moderation_state_field_data', 'c')
    ->condition('c.moderation_state', 'published')
    ->fields('c', ['content_entity_id'])
    ->execute()
    ->fetchAll(\PDO::FETCH_COLUMN);

  // Fetch all ids for services that might need to be reminded using published
  // services' changed status.
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $reminder_service_ids = \Drupal::entityQuery('node')
    ->condition('type', 'service')
    ->condition('nid', $published_moderation_nids, 'IN')
    ->condition('status', NodeInterface::PUBLISHED)
    ->condition('changed', UpdateReminderUtility::getFirstServiceLimit(), '<')
    ->accessCheck(FALSE)
    ->execute();

  $queue = Drupal::queue('hel_tpm_update_reminder_service');
  foreach ($reminder_service_ids as $nid) {
    $checked = UpdateReminderUtility::getChecked($nid);
    if (!empty($checked) && $checked < UpdateReminderUtility::getFirstServiceLimit()) {
      $queue->createItem((int) $nid);
    }
  }
}

/**
 * Process the notification message expiry reminders.
 *
 * @param int $days
 *   Which reminder to process, 1 or 7 days. Usually you should run both.
 */
function _hel_tpm_update_reminder_notification_message_expiry_reminder($days) {
  $week_limit = new DrupalDateTime('+7 days');
  $day_limit = new DrupalDateTime('+1 days');
  $now_limit = new DrupalDateTime('now');
  $query = \Drupal::entityQuery('notification_message')
    ->condition('type', 'service_notification');
  if ($days == 7) {
    $query->condition('publish_end_date', $week_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '<')
      ->condition('publish_end_date', $day_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '>');
  }
  elseif ($days == 1) {
    $query->condition('publish_end_date', $day_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '<')
      ->condition('publish_end_date', $now_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '>');
  }
  $results = $query->execute();
  $storage = \Drupal::entityTypeManager()->getStorage('notification_message');
  \Drupal::logger('hel_tpm_update_reminder')->notice(
    'Found %count notifications expiring in %days days.', [
      '%days' => $days,
      '%count' => count($results),
    ]);
  $sent = 0;
  foreach ($results as $id) {
    $state_id = 'hel_tpm.update_reminder.notification_message.' . $days . 'd.' . $id;
    $last_reminded = \Drupal::state()->get($state_id);

    if ($last_reminded == NULL) {
      $entity = $storage->load($id);
      $account = $entity->getAuthorUser();

      $message = Message::create([
        'template' => $days . 'd_notification_expiry_reminder',
        'uid' => $account->id(),
      ]);
      $message->setOwner($account)
        ->addContext('notification_message', $entity)
        ->save();

      $notifier = Drupal::service('message_notify.sender');
      $notifier->send($message);

      \Drupal::state()->set($state_id, time());
      $sent++;
    }
  }
  \Drupal::logger('hel_tpm_update_reminder')->notice(
    'Sent update reminders for %count notifications expiring in %days days.', [
      '%count' => $sent,
      '%days' => $days,
    ]);
}
