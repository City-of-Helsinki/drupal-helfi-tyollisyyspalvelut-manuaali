<?php

/**
 * @file
 * Module file for hel_tpm_update_reminder.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\message\Entity\Message;

/**
 * Implements hook_cron().
 */
function hel_tpm_update_reminder_cron() {
  _hel_tpm_update_reminder_node_update_reminder();
  _hel_tpm_update_reminder_notification_message_expiry_reminder(7);
  _hel_tpm_update_reminder_notification_message_expiry_reminder(1);
}

/**
 * Process the service node update reminders.
 *
 * @return void
 *   -
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException */
function _hel_tpm_update_reminder_node_update_reminder() {
  $ago = strtotime('-6 months');
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'service')
    ->condition('changed', $ago, '<')
    ->accessCheck(FALSE);
  $results = $query->execute();

  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  \Drupal::logger('hel_tpm_update_reminder')->notice('Found %count expired nodes.', ['%count' => count($results)]);
  $sent = 0;
  foreach ($results as $nid) {
    $state_id = 'hel_tpm.update_reminder.node.' . $nid;
    $last_reminded = \Drupal::state()->get($state_id);

    // We haven't reminded about this yet or in two weeks.
    if ($last_reminded == NULL || $last_reminded < strtotime('-2 weeks')) {
      $node = $nodeStorage->load($nid);
      $account = $node->getOwner();

      $message = Message::create([
        'template' => 'hel_tpm_update_reminder',
        'uid' => $account->id(),
      ]);
      $message->setOwner($account)
        ->addContext('node', $node)
        ->save();

      $notifier = Drupal::service('message_notify.sender');
      $notifier->send($message);

      \Drupal::state()->set($state_id, time());
      $sent++;
    }
  }
  \Drupal::logger('hel_tpm_update_reminder')->notice('Sent update reminders for %count expired nodes.', ['%count' => $sent]);
}

/**
 * Process the notification message expiry reminders.
 *
 * @param int $days
 *   Which reminder to process, 1 or 7 days. Usually you should run both.
 */
function _hel_tpm_update_reminder_notification_message_expiry_reminder($days) {
  $week_limit = new DrupalDateTime('+7 days');
  $day_limit = new DrupalDateTime('+1 days');
  $now_limit = new DrupalDateTime('now');
  $query = \Drupal::entityQuery('notification_message')
    ->condition('type', 'service_notification');
  if ($days == 7) {
    $query->condition('publish_end_date', $week_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '<')
      ->condition('publish_end_date', $day_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '>');
  }
  elseif ($days == 1) {
    $query->condition('publish_end_date', $day_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '<')
      ->condition('publish_end_date', $now_limit->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '>');
  }
  $results = $query->execute();
  $storage = \Drupal::entityTypeManager()->getStorage('notification_message');
  \Drupal::logger('hel_tpm_update_reminder')->notice(
    'Found %count notifications expiring in %days days.', [
      '%days' => $days,
      '%count' => count($results),
    ]);
  $sent = 0;
  foreach ($results as $id) {
    $state_id = 'hel_tpm.update_reminder.notification_message.' . $days . 'd.' . $id;
    $last_reminded = \Drupal::state()->get($state_id);

    if ($last_reminded == NULL) {
      $entity = $storage->load($id);
      $account = $entity->getAuthorUser();

      $message = Message::create([
        'template' => $days . 'd_notification_expiry_reminder',
        'uid' => $account->id(),
      ]);
      $message->setOwner($account)
        ->addContext('notification_message', $entity)
        ->save();

      $notifier = Drupal::service('message_notify.sender');
      $notifier->send($message);

      \Drupal::state()->set($state_id, time());
      $sent++;
    }
  }
  \Drupal::logger('hel_tpm_update_reminder')->notice(
    'Sent update reminders for %count notifications expiring in %days days.', [
      '%count' => $sent,
      '%days' => $days,
    ]);
}
