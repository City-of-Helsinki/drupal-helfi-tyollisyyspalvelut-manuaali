<?php

/**
 * @file
 * Primary module hooks for hel_tpm_group module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupRelationshipInterface;
use Drupal\group\Entity\GroupRole;
use Drupal\hel_tpm_group\Event\GroupMembershipChanged;
use Drupal\hel_tpm_group\Event\GroupMembershipDeleted;
use Drupal\hel_tpm_group\Event\GroupSiteWideRoleChanged;
use Drupal\node\NodeInterface;

/**
 * Implements hook_cron().
 */
function hel_tpm_group_cron() {
  _hel_tpm_group_create_missing_updatees_queue_items();
}

/**
 * Cron callback for creating service missing updatee queue items.
 *
 * @return void
 *   -
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _hel_tpm_group_create_missing_updatees_queue_items() {
  $last_run = \Drupal::state()->get('hel_tpm_group.missing_updatees_last_run', 0);
  $run_time_limit = strtotime("24 hours", 0);
  if ((\Drupal::time()->getRequestTime() - $last_run) < $run_time_limit) {
    return;
  }
  $query = \Drupal::entityTypeManager()->getStorage('group')->getQuery();
  $query->accessCheck(FALSE);
  $groups = $query->execute();
  foreach ($groups as $gid => $group) {
    $queue = \Drupal::queue('hel_tpm_group_service_missing_updatees_queue');
    $queue->createItem(['gid' => $gid]);
  }
  \Drupal::state()->get('hel_tpm_group.missing_updatees_last_run', \Drupal::time()->getRequestTime());
}

/**
 * Implements hook_entity_type_alter().
 */
function hel_tpm_group_entity_type_alter(array &$entity_types): void {
  if (isset($entity_types['group_content'])) {
    $entity_types['group_content']->setFormClass('delete', 'Drupal\hel_tpm_group\Entity\Form\GroupCheckMemberDeleteForm');
  }

  if (isset($entity_types['group'])) {
    $entity_types['group']->addConstraint('GroupUniqueTitle', []);
  }
}

/**
 * Implements hook_entity_field_access().
 *
 * Allows group admins to see members' status field.
 */
function hel_tpm_group_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL): AccessResultInterface {
  // Don't interfere if not trying to view user's status field.
  if (empty($field_definition->getTargetEntityTypeId())
    || $field_definition->getTargetEntityTypeId() != 'user'
    || $operation != 'view'
    || $field_definition->getName() != 'status') {
    return AccessResult::neutral();
  }
  // Don't interfere if group is not specified with route parameter.
  $route_match = \Drupal::routeMatch();
  $parameters = $route_match->getParameters();
  if (!$parameters->has('group')) {
    return AccessResult::neutral();
  }
  // Don't interfere if parameter is not a group.
  $group = $parameters->get('group');
  if (!$group instanceof GroupInterface) {
    return AccessResult::neutral();
  }
  // Don't interfere if user is not a member of the group.
  if (!$membership = $group->getMember($account)) {
    return AccessResult::neutral();
  }
  // Allow group admins to view the user status field if the user also has
  // correct permission.
  $roles = $membership->getRoles();
  if (array_key_exists('organisation-administrator', $roles)
    || array_key_exists('service_provider-group_admin', $roles)) {
    return AccessResult::allowedIfHasPermission($account, 'access extra member info if group admin')->cachePerPermissions();
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_group_form_group_role_edit_form_alter(&$form, &$form_state) {
  $user = \Drupal::currentUser();
  $roles = _hel_tpm_group_get_valid_roles();
  $group_role = $form_state->getFormObject()->getEntity();
  $form['site_wide_role'] = [
    '#type' => 'checkboxes',
    '#title' => t('Sitewide Roles'),
    '#default_value' => $group_role->getThirdPartySetting('hel_tpm_group', 'site_wide_role'),
    '#options' => $roles,
    '#access' => $roles && $user->hasPermission('administer permissions'),
  ];

  $form['#entity_builders'][] = 'hel_tpm_group_form_group_role_edit_form_builder';
}

/**
 * Implements hook_node_access_records().
 */
function hel_tpm_group_node_access_records(NodeInterface $node) {
  $grants = [];
  // Other grants.
  if (!$node->isPublished()) {
    $grants[] = [
      'realm' => 'hel_tpm_group_unpublished_realm',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    ];
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function hel_tpm_group_node_grants(AccountInterface $account, $op) {
  if ($op !== 'view') {
    return [];
  }
  $grants = [];
  $grants['hel_tpm_group_unpublished_realm'][] = 1;
  return $grants;
}

/**
 * Entity builder for the migration config entity.
 */
function hel_tpm_group_form_group_role_edit_form_builder($entity_type, GroupRole $group_role, &$form, FormStateInterface $form_state) {
  $site_wide_role = $group_role->getThirdPartySetting('hel_tpm_group', 'site_wide_role');

  // If values has not been changed do nothing.
  if ($site_wide_role === $form_state->getValue('site_wide_role')) {
    return;
  }

  if ($form_state->getValue('site_wide_role')) {
    $group_role->setThirdPartySetting('hel_tpm_group', 'site_wide_role', $form_state->getValue('site_wide_role'));
  }
  else {
    $group_role->unsetThirdPartySetting('hel_tpm_group', 'site_wide_role');
  }

  // Dispatch site wide role changed event.
  $event = new GroupSiteWideRoleChanged($group_role);
  \Drupal::service('event_dispatcher')->dispatch($event, $event::EVENT_NAME);
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 */

/**
 * Implements hook_entity_postdelete().
 */
function hel_tpm_group_entity_postdelete(EntityInterface $entity) {
  if (!$entity instanceof GroupRelationshipInterface) {
    return;
  }

  $group_content_type = $entity->getRelationshipType();
  if ($group_content_type->getPluginId() != 'group_membership') {
    return;
  }

  $event = new GroupMembershipChanged($entity);
  \Drupal::service('event_dispatcher')->dispatch($event, $event::EVENT_NAME);

  $event = new GroupMembershipDeleted($entity);
  \Drupal::service('event_dispatcher')->dispatch($event, $event::EVENT_NAME);
}

/**
 * Implements hook_entity_postsave().
 */
function hel_tpm_group_entity_postsave(EntityInterface $entity, $op) {
  if (!$entity instanceof GroupRelationshipInterface) {
    return;
  }

  $group_content_type = $entity->getRelationshipType();
  if ($group_content_type->getPluginId() != 'group_membership') {
    return;
  }

  $event = new GroupMembershipChanged($entity);
  \Drupal::service('event_dispatcher')->dispatch($event, $event::EVENT_NAME);
}

/**
 * Implements hook_views_data_alter().
 */
function hel_tpm_group_views_data_alter(array &$data) {
  // Filters.
  $data['group_relationship_field_data']['group_label_filter'] = [
    'title' => t('Parent group with label'),
    'filter' => [
      'title' => t('Parent group with label'),
      'help' => 'Filters by parent group, using the group labels.',
      'field' => 'gid',
      'id' => 'group_label_filter',
    ],
  ];
  $data['groups']['group_without_admin_filter'] = [
    'title' => t('Groups without admin filter'),
    'filter' => [
      'id' => 'group_without_admin_filter',
      'title' => t('Groups without admin filter'),
      'help' => 'List only groups with without any admin users',
      'field' => 'id',
    ],
  ];
  $data['node_field_data']['node_missing_user_dependencies'] = [
    'title' => t('Missing user depdencies filter'),
    'filter' => [
      'title' => t('Missing user dependencies filter'),
      'field' => 'nid',
      'id' => 'user_reference_edit_permission',
    ],
    'argument' => [
      'title' => t('Missing service references'),
      'field' => 'nid',
      'id' => 'group_services_missing_references',
      'zero is null' => TRUE,
    ],
  ];
  $data['node_field_data']['moderation_state_filter_exclude_archived'] = [
    'title' => t('Moderation state excluding archived by default'),
    'filter' => [
      'id' => 'moderation_state_filter_exclude_archived',
      'field' => 'moderation_state',
      'allow empty' => TRUE
    ],
  ];
  $data['groups']['group_active_members_count_filter'] = [
    'title' => t('Active members count'),
    'filter' => [
      'id' => 'group_active_members_count_filter',
      'title' => t('Active members count'),
      'help' => 'List groups with or without active members.',
    ],
  ];
  $data['groups']['group_blocked_members_count_filter'] = [
    'title' => t('Blocked members count'),
    'filter' => [
      'id' => 'group_blocked_members_count_filter',
      'title' => t('Blocked members count'),
      'help' => 'List groups with or without blocked members.',
    ],
  ];
  $data['groups']['group_services_count_excl_archived_filter'] = [
    'title' => t('Services count excluding archived'),
    'filter' => [
      'id' => 'group_services_count_excl_archived_filter',
      'title' => t('Services count excluding archived'),
      'help' => 'List groups with or without services excluding archived.',
    ],
  ];
  $data['groups']['group_archived_services_count_filter'] = [
    'title' => t('Archived services count'),
    'filter' => [
      'id' => 'group_archived_services_count_filter',
      'title' => t('Archived services count'),
      'help' => 'List groups with or without archived services.',
    ],
  ];

  // Fields.
  $data['groups']['active_member_count'] = [
    'title' => t('Number of active members'),
    'field' => [
      'title' => t('Number of active members'),
      'id' => 'hel_tpm_group_active_member_count',
    ],
  ];
  $data['groups']['blocked_member_count'] = [
    'title' => t('Number of blocked members'),
    'field' => [
      'title' => t('Number of blocked members'),
      'id' => 'hel_tpm_group_blocked_member_count',
    ],
  ];
  $data['groups']['services_count_excl_archived'] = [
    'title' => t('Number of group services excluding archived'),
    'field' => [
      'title' => t('Number of group services excluding archived'),
      'id' => 'hel_tpm_group_service_count_excl_archived',
    ],
  ];
  $data['groups']['archived_service_count'] = [
    'title' => t('Number of archived group services'),
    'field' => [
      'title' => t('Number of archived group services'),
      'id' => 'hel_tpm_group_archived_service_count',
    ],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function hel_tpm_group_page_attachments_alter(array &$attachments): void {
  $route_match = \Drupal::routeMatch();
  if ($group = $route_match->getParameter('group')) {
    if ($group instanceof GroupInterface && !$group->isPublished()) {
      \Drupal::messenger()->addStatus(t('The group is not published.'));
    }
  }
}

/**
 * Helper function to get valid site roles for selection.
 *
 * @return array
 *   Array of valid user roles.
 */
function _hel_tpm_group_get_valid_roles() {
  // Unwanted roles.
  $role_bl = ['authenticated', 'root', 'admin'];
  $roles = array_map(['\Drupal\Component\Utility\Html', 'escape'], user_role_names(TRUE));
  // Filter out all roles we don't want to be inherited.
  foreach ($role_bl as $role) {
    unset($roles[$role]);
  }
  return $roles;
}
