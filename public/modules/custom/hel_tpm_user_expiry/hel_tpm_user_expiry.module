<?php

/**
 * @file
 * Module file for hel_tpm_user_expiry.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_cron().
 */
function hel_tpm_user_expiry_cron() {
  _hel_tpm_user_expiry_notification_cron();
}

/**
 * User expire notification cron job.
 */
function _hel_tpm_user_expiry_notification_cron() {
  $run_time_limit = strtotime('12 hours', 0);
  $last_run = Drupal::state()->get('hel_tpm_user_expiry.last_run');

  // Run this cron once every 24 hours.
  if ($last_run && (Drupal::time()->getRequestTime() - $last_run) < $run_time_limit) {
    return;
  }

  $limit = strtotime('-165 days');

  // Fetch all users have been inactive for 5 months and 2 weeks.
  $q = Drupal::database()->select('users_field_data', 'ufd')
    ->fields('ufd', ['uid', 'access', 'status'])
    ->condition('uid', 0, '<>')
    ->condition('uid', 1, '<>')
    ->condition('access', $limit, '<=')
    ->condition('created', $limit, '<=');

  // Exclude users that has been anonymized.
  if ($anonymized_users = \Drupal::state()->get('hel_tpm_user_expiry.anonymized_users')) {
    $q->condition('uid', $anonymized_users, 'NOT IN');
  }

  $result = $q->execute()->fetchAll();

  foreach ($result as $user) {
    $queue = Drupal::queue('hel_tpm_user_expiry_user_expiration_notification');
    $queue->createItem($user);
  }

  Drupal::state()->set('hel_tpm_user_expiry.last_run', Drupal::time()->getRequestTime());
}

/**
 * Implements hook_user_login().
 */
function hel_tpm_user_expiry_user_login(UserInterface $account): void {
  // Clear user expiry notification state after user has logged in.
  _hel_tpm_user_expiry_delete_notified_state($account->id());
}

/**
 * Implements hook_entity_update().
 */
function hel_tpm_user_expiry_user_update(EntityInterface $entity): void {
  if (!$entity instanceof User) {
    return;
  }
  if ($entity->original->isBlocked() && $entity->isActive()) {
    // Clear user expiry notification state when blocked user is set to active.
    _hel_tpm_user_expiry_delete_notified_state($entity->id());
    _hel_tpm_user_expiry_update_user_last_access($entity);
  }
}

/**
 * Force update user last access.
 *
 * @param \Drupal\user\UserInterface $user
 *   User entity.
 *
 * @return void
 *   void
 */
function _hel_tpm_user_expiry_update_user_last_access(UserInterface $user) {
  \Drupal::database()->update('users_field_data')
    ->fields(['access' => \Drupal::time()->getRequestTime()])
    ->condition('uid', $user->id())
    ->execute();
}

/**
 * Helper function to clear user expiry notification state.
 *
 * @param int $uid
 *   The user id.
 *
 * @return void
 *   -
 */
function _hel_tpm_user_expiry_delete_notified_state(int $uid): void {
  $state_manager = Drupal::state();
  $state_name = 'hel_tpm_user_expiry.notified.' . $uid;
  if (!empty($state_manager->get($state_name))) {
    $state_manager->delete($state_name);
  }
}
