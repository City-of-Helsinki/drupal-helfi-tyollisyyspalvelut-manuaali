<?php

/**
 * @file
 * This module creates various additional contents.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function hel_tpm_forms_theme($existing, $type, $theme, $path) {
  return [
    'hel_tpm_navigation' => [
      'template' => 'hel_tpm_navigation',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'hel_tpm_steps' => [
      'template' => 'hel_tpm_steps',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_forms_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  hel_tpm_forms_node_service_form_alter_helper($form, $form_state, $form_id);
  hel_tpm_forms_node_service_location_form_alter_helper($form, $form_state);
  hel_tpm_forms_disable_untranslatable_paragraph_fields($form, $form_state);
  hel_tpm_forms_time_and_location_form_helper($form, $form_state);
}

/**
 * Helper function to modify the service time and location form.
 *
 * @param array $form
 *   The form structure array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state interface.
 *
 * @return void
 *   -
 */
function hel_tpm_forms_time_and_location_form_helper(&$form, FormStateInterface &$form_state) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service') {
    return;
  }

  $field_key = 'field_service_time_and_location';

  if (empty($form[$field_key])) {
    return;
  }

  for ($i = 0; $i <= $form[$field_key]['widget']['#max_delta']; $i++) {
    if (empty($form[$field_key]['widget'][$i])) {
      continue;
    }

    $input = sprintf(':input[name="field_service_time_and_location[%s][subform][field_service_location][0][target_id]"]', $i);
    $form[$field_key]['widget'][$i]['subform']['field_location_additional_info']['#states'] = [
      'visible' => [
        $input => ['empty' => FALSE],
      ],
    ];
  }
}

/**
 * Disables untranslatable paragraph fields in the given form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state interface.
 *
 * @return void
 *   -
 */
function hel_tpm_forms_disable_untranslatable_paragraph_fields(&$form, FormStateInterface &$form_state) {
  $paragraph_fields = ['field_service_time_and_location'];
  $field_manager = \Drupal::service('entity_field.manager');

  $form_object = $form_state->getFormObject();
  if ($form_object->getEntity()->isDefaultTranslation()) {
    return;
  }

  foreach ($paragraph_fields as $field) {
    if (empty($form[$field])) {
      continue;
    }
    $widget = &$form[$field]['widget'];
    if (empty($widget)) {
      continue;
    }
    $max_delta = $widget['#max_delta'];

    $max_delta = $widget['#max_delta'];

    for ($i = 0; $i <= $max_delta; $i++) {
      $row = &$widget[$i];
      $field_definitions = $field_manager->getFieldDefinitions('paragraph', $row['#paragraph_type']);
      foreach ($field_definitions as $field_key => $field_definition) {
        if (!$field_definition instanceof FieldConfig) {
          continue;
        }
        if ($field_definition->isTranslatable()) {
          continue;
        }
        $row['subform'][$field_key]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function hel_tpm_forms_entity_presave(EntityInterface $entity) {
  hel_tpm_forms_service_location_generate_title_helper($entity);
}

/**
 * Generate service location title on save.
 */
function hel_tpm_forms_service_location_generate_title_helper(EntityInterface &$entity) {
  if ($entity->bundle() !== 'service_location') {
    return;
  }
  $address = $entity->field_address->getValue();
  if (empty($address)) {
    return;
  }
  $address = reset($address);

  $organization = trim($address['organization']);
  if (!empty($organization)) {
    $title = sprintf("%s, %s %s (%s)", $address['address_line1'], $address['postal_code'], $address['locality'], $organization);
  }
  else {
    $title = sprintf("%s, %s %s", $address['address_line1'], $address['postal_code'], $address['locality']);
  }

  $entity->setTitle($title);
}

/**
 * Helper function for altering service location title field access.
 */
function hel_tpm_forms_node_service_location_form_alter_helper(&$form, FormStateInterface &$form_state) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service_location') {
    return;
  }
  $form['title']['#access'] = FALSE;
}

/**
 * Service node form alter.
 */
function hel_tpm_forms_node_service_form_alter_helper(&$form, FormStateInterface &$form_state, $form_id) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service') {
    return;
  }

  $form['paging_header'] = [
    '#theme' => 'hel_tpm_navigation',
  ];

  // Hide consent description on the third page of service entity form.
  $form['field_field_client_consent_descr']['#states'] = [
    'visible' => [
      ':input[name="field_client_consent[value]"]' => ['checked' => TRUE],
    ],
  ];

  // Require age range to be set, unless the `no age restriction` checkbox is
  // checked.
  $form['field_age']['widget'][0]['from']['#states'] = [
    'required' => [
      [':input[name="field_target_group[0][subform][field_age_groups][no_age_restriction]"]' => ['checked' => FALSE]],
    ],
  ];
  $form['field_age']['widget'][0]['to']['#states'] = [
    'required' => [
      [':input[name="field_target_group[0][subform][field_age_groups][no_age_restriction]"]' => ['checked' => FALSE]],
    ],
  ];

  // Set field_target_group_municipality visible and required
  // only when field_municipality_irrelevant is not selected.
  $form['field_target_group_municipality']['widget']['#states'] = [
    'visible' => [
      [':input[name="field_municipality_irrelevant[value]"]' => ['checked' => FALSE]],
    ],
    'required' => [
      [':input[name="field_municipality_irrelevant[value]"]' => ['checked' => FALSE]],
    ],
  ];

  // Check if current service provider user is included in the options list. If
  // not, add a 'none' option so that when saving the form, a new user must be
  // chosen. This prevents accidentally saving with the first user in the list
  // when the current selection is no longer included in the list.
  if ($node = $form_state->getFormObject()?->getEntity()) {
    if ($current_provider_user = $node?->get('field_service_provider_updatee')?->first()?->getValue()['target_id'] &&
        $provider_user_options = $form['field_service_provider_updatee']['widget']['#options']) {
      if (!array_key_exists($current_provider_user, $provider_user_options)) {
        $form['field_service_provider_updatee']['widget']['#options'] = ['_none' => t("- Select a value -")] + $provider_user_options;
      }
    }
  }

  $form['paging_footer'] = [
    '#theme' => 'hel_tpm_steps',
  ];

  $form['#attached']['library'][] = 'hel_tpm_forms/hel_tpm_forms';

  $form['#validate'][] = 'hel_tpm_forms_validate_service_form_helper';

  hel_tpm_forms_publish_service_action($form, $form_state);
}

/**
 * Extra server-side validation for editing service nodes.
 */
function hel_tpm_forms_validate_service_form_helper(array &$form, FormStateInterface &$form_state): void {
  // Check extra required fields only when form is publishing ready.
  $require_fields = FALSE;
  if ($moderation_state = $form_state->getValue('moderation_state')[0]['value']) {
    if ($moderation_state === 'published' || $moderation_state === 'ready_to_publish') {
      $require_fields = TRUE;
    }
  }

  // Check that age range is given, unless age group is selected. Not trying to
  // validate, if the field `field_target_group` is missing.
  if (($target_group = $form_state->getValue('field_target_group')) && $require_fields) {
    _hel_tpm_forms_validate_age_groups($target_group, $form_state);
    _hel_tpm_forms_validate_municipality($target_group, $form_state);
    _hel_tpm_forms_validate_target_group_description($target_group, $form_state);
  }

  if ($require_fields) {
    if ($languages = $form_state->getValue('field_service_languages')) {
      _hel_tpm_forms_validate_paragraph_language_selection($form, $form_state, $languages, 'field_service_languages');
    }
    _hel_tpm_forms_validate_required_paragraph_long_texts_with_editor($form, $form_state);
  }
}

/**
 * Validate required paragraph content.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 *
 * @return void
 *   -
 */
function _hel_tpm_forms_validate_required_paragraph_long_texts_with_editor(array &$form, FormStateInterface &$form_state): void {
  $fields = ['field_service_execution', 'field_attendance'];
  $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
  $entity_fields = $entity->getFields();
  foreach ($fields as $field) {
    $field_config = $entity_fields[$field]->getFieldDefinition();
    $paragraph = $form_state->getValue($field);
    foreach ($paragraph as $row) {
      $val = reset($row);
      if (!empty($val['field_description'][0]['value'])) {
        continue;
      }
      $form_state->setErrorByName(
        $field,
        t("@field_label field is required when publishing.", ['@field_label' => sprintf("%s:", $field_config->getLabel())])
      );
    }
  }
}

/**
 * Language field validation.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 * @param array $languages
 *   Array of selected languages.
 * @param string $field
 *   Validated field key.
 *
 * @return void
 *   -
 */
function _hel_tpm_forms_validate_paragraph_language_selection(array $form, FormStateInterface &$form_state, array $languages, $field): void {
  $lang = [];
  $build_info = $form_state->getBuildInfo();
  $entity = $build_info['callback_object']->getEntity();
  if (!$entity->isDefaultTranslation()) {
    return;
  }

  $is_empty = TRUE;
  foreach ($languages as $language) {
    if (!empty($language['subform']['field_language'])) {
      $is_empty = FALSE;
    }
    break;
  }

  if ($is_empty) {
    $field_key = 'field_service_languages';
    $form_state->setErrorByName(
      $field_key,
      t("@field_label field is required when publishing..", ['@field_label' => sprintf("%s:", $form[$field]['widget']['#title'])])
    );
    return;
  }

  foreach ($languages as $delta => $paragraph) {
    if (empty($paragraph['subform'])) {
      continue;
    }
    foreach ($paragraph['subform']['field_language'] as $value) {
      if (!empty($lang[$value['target_id']])) {
        $field_key = sprintf('field_service_languages][%s][subform][field_language', $delta);
        $form_state->setErrorByName(
          $field_key,
          t("Select each language only once and set minimum language level.")
        );
      }
      $lang[$value['target_id']] = $value['target_id'];
    }
  }
}

/**
 * Helper validator for municipality selections.
 *
 * @param array $target_group
 *   Submitted target group values.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Submitted form state object.
 *
 * @return void
 *   -
 */
function _hel_tpm_forms_validate_municipality($target_group, FormStateInterface &$form_state) {
  $subform = $target_group[0]['subform'];
  $municipality_irrelevant = $subform['field_municipality_irrelevant'];
  $municipalities = $subform['field_target_group_municipality'];
  if ((empty($municipality_irrelevant) || $municipality_irrelevant['value'] == 0) && empty($municipalities)) {
    $form_state->setErrorByName(
      'field_target_group][0][subform][field_target_group_municipality',
      t("Selecting municipalities is required, unless municipality doesn't matter  is selected.")
    );
  }
}

/**
 * Helper validator for age groups.
 *
 * @param array $target_group
 *   Target group paragraph values.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state interface.
 *
 * @return void
 *   -
 */
function _hel_tpm_forms_validate_age_groups($target_group, &$form_state) {
  $age_groups = $target_group[0]['subform']['field_age_groups'][0]['value'] ?? NULL;
  $age_from = $target_group[0]['subform']['field_age'][0]['from'] ?? NULL;
  $age_to = $target_group[0]['subform']['field_age'][0]['to'] ?? NULL;

  if (empty($age_groups) && (empty($age_from) || empty($age_to))) {
    $form_state->setErrorByName(
      "field_target_group][0][subform][field_age_groups",
      t('Selecting an age group is mandatory, unless the age range is set.')
    );
    $form_state->setErrorByName(
      "field_target_group][0][subform][field_age][0",
      t('Setting the age range is mandatory, unless an age group is selected.')
    );
  }
}

/**
 * Helper validator for target group description.
 *
 * @param array $target_group
 *   Target group paragraph values.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 *
 * @return void
 *   -
 */
function _hel_tpm_forms_validate_target_group_description($target_group, &$form_state) {
  $subform = $target_group[0]['subform'];
  $value = $subform['field_description']['0']['value'];
  if ((empty($value))) {
    $form_state->setErrorByName(
      'field_target_group][0][subform][field_description',
      t("Target group description is required.")
    );
  }
}

/**
 * Callback for publish service button.
 */
function hel_tpm_forms_publish_service_action(&$form, $form_state) {
  $form_object = $form_state->getFormObject();
  $storage = $form_state->getStorage();
  if (empty($form_object)) {
    return;
  }

  $node = $form_object->getEntity();

  // If group isn't in form storage, try to get group from node.
  if (empty($storage['group'])) {
    if (empty($node->entitygroupfield)) {
      return;
    }
    $group_content = $node->entitygroupfield->entity;
    if (empty($group_content)) {
      return;
    }
    $group = $group_content->getGroup();
  }
  else {
    $group = $storage['group'];
  }

  // No group found.
  if (empty($group)) {
    return;
  }

  // Check user has permission to select publish transition.
  $transition_validator = \Drupal::service('gcontent_moderation.state_transition_validation');
  $transitions = $transition_validator->allowedTransitions(\Drupal::currentUser(), $node, [$group]);
  $action = [
    '#type' => 'button',
    '#attributes' => ['id' => 'hel-tpm-service-submit-button'],
    '#attached' => [
      'library' => [
        'service_manual_workflow/service-confirm-popup',
        'hel_tpm_forms/service_custom_submit',
      ],
    ],
  ];
  if (empty($transitions['publish'])) {
    $action['#value'] = t('Ready to publish');
    $action['#attributes']['data-state'] = 'ready_to_publish';
  }
  else {
    $action['#value'] = t('Publish');
    $action['#attributes']['data-state'] = 'published';
  }

  $form['actions']['publish_service'] = $action;
}

/**
 * Publish service function.
 */
function _hel_tpm_forms_service_publish_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'published']]);
}

/**
 * Submit callback for ready to publish button.
 */
function _hel_tpm_forms_service_ready_to_submit_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'ready_to_publish']]);
  \Drupal::messenger()->addStatus(t('Thank you! Service has been sent for review, after which it will be published and can be seen by all user using Palvelumanuaali.'));
}

/**
 * Implements hook_field_widget_multivalue_form_alter().
 */
function hel_tpm_forms_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (empty($element['#type'])) {
    return;
  }
  if (($element['#type'] === 'select2') || ($element['#type'] === 'select')) {
    $element['#placeholder'] = t('Choose from the following options');
    // Fix for wrong selection when changing
    // roles of an user and refreshing services form.
    $element['#attributes']['autocomplete'] = 'off';
  }

  _hel_tpm_forms_paragraph_remove_confirm_step($element, $form_state, $context);
}

/**
 * Disable removal confirmation from paragraph refrence widgets.
 *
 * @param array $element
 *   Element array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 * @param array $context
 *   Context.
 *
 * @return void
 *   void.
 */
function _hel_tpm_forms_paragraph_remove_confirm_step(array &$element, FormStateInterface $form_state, array $context) {
  if (empty($context['widget'])) {
    return;
  }
  $widget = $context['widget'];
  if ($widget->getPluginId() !== 'entity_reference_paragraphs') {
    return;
  }

  $element['top']['links']['remove_button']['#paragraphs_mode'] = 'removed';
}

/**
 * Implements hook_element_info_alter().
 */
function hel_tpm_forms_element_info_alter(&$type) {
  $type['radios']['#process'][] = 'hel_tpm_forms_remove_radio_na';
}

/**
 * Helper function to unset _none from radios.
 */
function hel_tpm_forms_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}
