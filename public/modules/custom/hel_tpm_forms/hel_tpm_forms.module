<?php

/**
 * @file
 * This module creates various additional contents.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Database\Query;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function hel_tpm_forms_theme($existing, $type, $theme, $path) {
  return [
    'hel_tpm_navigation' => [
      'template' => 'hel_tpm_navigation',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'hel_tpm_steps' => [
      'template' => 'hel_tpm_steps',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * @return void
 */
function hel_tpm_forms_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  _hel_tpm_forms_node_service_form_alter($form, $form_state, $form_id);
  _hel_tpm_form_node_service_location_form_alter($form, $form_state);
}

/**
 * Implements hook_entity_presave().
 */
function hel_tpm_forms_entity_presave(EntityInterface $entity) {
  _hel_tpm_node_service_location_generate_title($entity);
}

/**
 * Generate service location title on save.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 */
function _hel_tpm_node_service_location_generate_title(EntityInterface &$entity) {
  if ($entity->bundle() !== 'service_location') {
    return;
  }
  $address = $entity->field_address->getValue();
  if (empty($address)) {
    return;
  }
  $address = reset($address);

  $organization = trim($address['organization']);
  if (!empty($organization)) {
    $title = sprintf("%s, %s %s (%s)", $address['address_line1'], $address['postal_code'], $address['locality'], $organization);
  }
  else {
    $title = sprintf("%s, %s %s", $address['address_line1'], $address['postal_code'], $address['locality']);
  }

  $entity->setTitle($title);
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return void
 */
function _hel_tpm_form_node_service_location_form_alter(&$form, FormStateInterface &$form_state) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service_location') {
    return;
  }
  $form['title']['#access'] = FALSE;
}

/**
 * Service node form alter.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @return void
 */
function _hel_tpm_forms_node_service_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service') {
    return;
  }

  $form['paging_header'] = [
    '#theme' => 'hel_tpm_navigation',
  ];

  // Hide consent description on the third page of service entity form.
  $form['field_field_client_consent_descr']['#states'] = [
    'visible' => [
      ':input[name="field_client_consent[value]"]' => ['checked' => TRUE],
    ],
  ];

  $form['paging_footer'] = [
    '#theme' => 'hel_tpm_steps',
  ];

  $form['#attached']['library'][] = 'hel_tpm_forms/hel_tpm_forms';

  _hel_tpm_form_publish_service_action($form, $form_state);
}

/**
 * Callback for publish service button.
 *
 * @param $form
 * @param $form_state
 *
 * @return void
 */
function _hel_tpm_form_publish_service_action(&$form, $form_state) {
  $form_object = $form_state->getFormObject();
  $storage = $form_state->getStorage();
  if (empty($form_object)) {
    return;
  }

  $node = $form_object->getEntity();

  // If group isn't in form storage, try to get group from node.
  if (empty($storage['group'])) {
    if (empty($node->entitygroupfield)) {
      return;
    }
    $group_content = $node->entitygroupfield->entity;
    $group = $group_content->getGroup();
  }
  else {
    $group = $storage['group'];
  }

  // No group found.
  if (empty($group)) {
    return;
  }

  // Check user has permission to select publish transition.
  $transition_validator = \Drupal::service('gcontent_moderation.state_transition_validation');
  $transitions = $transition_validator->allowedTransitions(\Drupal::currentUser(), $node, [$group]);
  $action = $form['actions']['submit'];
  if (empty($transitions['publish'])) {
    $action['#value'] = t('Ready to publish');
    array_unshift($action['#submit'], '_hel_tpm_forms_service_ready_to_submit_submit');
  }
  else {
    $action['#value'] = t('Publish');
    array_unshift($action['#submit'], '_hel_tpm_forms_service_publish_submit');
  }


  $form['actions']['publish_service'] = $action;
}

/**
 * Publish service function.
 */
function _hel_tpm_forms_service_publish_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'published']]);
}

/**
 * @param $form
 * @param $form_state
 *
 * @return void
 */
function _hel_tpm_forms_service_ready_to_submit_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'ready_to_publish']]);
  \Drupal::messenger()->addStatus(t('Thank you! Service has been sent for review, after which it will be published and can be seen by all user using Palvelumanuaali.'));
}

/**
 * Implments hook_form_alter().
 *
 * @param $elements
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param array $context
 *
 * @return void
 */
function hel_tpm_forms_field_widget_form_alter(&$element, FormStateInterface $form_state, array $context) {
  if (empty($element['#type'])) {
    return;
  }
  if (($element['#type'] === 'select2') || ($element['#type'] === 'select')){
    $element['#placeholder'] = t('Choose from following options');
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @param $type
 *
 * @return void
 */
function hel_tpm_forms_element_info_alter(&$type) {
  $type['radios']['#process'][] = '_hel_tpm_forms_remove_radio_na';
}

/**
 * Helper function to unset _none from radios.
 *
 * @param $element
 *
 * @return mixed
 */
function _hel_tpm_forms_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}
