<?php

/**
 * @file
 * This module creates various additional contents.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function hel_tpm_forms_theme($existing, $type, $theme, $path) {
  return [
    'hel_tpm_navigation' => [
      'template' => 'hel_tpm_navigation',
      'variables' => [
        'content' => NULL,
      ],
    ],
    'hel_tpm_steps' => [
      'template' => 'hel_tpm_steps',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_forms_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  hel_tpm_forms_node_service_form_alter_helper($form, $form_state, $form_id);
  hel_tpm_forms_node_service_location_form_alter_helper($form, $form_state);
}

/**
 * Implements hook_entity_presave().
 */
function hel_tpm_forms_entity_presave(EntityInterface $entity) {
  hel_tpm_forms_service_location_generate_title_helper($entity);
}

/**
 * Generate service location title on save.
 */
function hel_tpm_forms_service_location_generate_title_helper(EntityInterface &$entity) {
  if ($entity->bundle() !== 'service_location') {
    return;
  }
  $address = $entity->field_address->getValue();
  if (empty($address)) {
    return;
  }
  $address = reset($address);

  $organization = trim($address['organization']);
  if (!empty($organization)) {
    $title = sprintf("%s, %s %s (%s)", $address['address_line1'], $address['postal_code'], $address['locality'], $organization);
  }
  else {
    $title = sprintf("%s, %s %s", $address['address_line1'], $address['postal_code'], $address['locality']);
  }

  $entity->setTitle($title);
}

/**
 * Helper function for altering service location title field access.
 */
function hel_tpm_forms_node_service_location_form_alter_helper(&$form, FormStateInterface &$form_state) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service_location') {
    return;
  }
  $form['title']['#access'] = FALSE;
}

/**
 * Service node form alter.
 */
function hel_tpm_forms_node_service_form_alter_helper(&$form, FormStateInterface &$form_state, $form_id) {
  $bundle = $form_state->getStorage()['form_display']->getTargetBundle();
  // Check that we alter only service bundle.
  if ($bundle != 'service') {
    return;
  }

  $form['paging_header'] = [
    '#theme' => 'hel_tpm_navigation',
  ];

  // Hide consent description on the third page of service entity form.
  $form['field_field_client_consent_descr']['#states'] = [
    'visible' => [
      ':input[name="field_client_consent[value]"]' => ['checked' => TRUE],
    ],
  ];

  // Require age range to be set, unless the `no age restriction` checkbox is
  // checked.
  $form['field_target_group']['widget'][0]['subform']['field_age']['widget'][0]['from']['#states'] = [
    'required' => [
      [':input[name="field_target_group[0][subform][field_age_groups][no_age_restriction]"]' => ['checked' => FALSE]],
    ],
  ];
  $form['field_target_group']['widget'][0]['subform']['field_age']['widget'][0]['to']['#states'] = [
    'required' => [
      [':input[name="field_target_group[0][subform][field_age_groups][no_age_restriction]"]' => ['checked' => FALSE]],
    ],
  ];

  // Set field_target_group_municipality visible and required
  // only when field_municipality_irrelevant is not selected.
  $form['field_target_group']['widget'][0]['subform']['field_target_group_municipality']['widget']['#states'] = [
    'visible' => [
      [':input[name="field_target_group[0][subform][field_municipality_irrelevant][value]"]' => ['checked' => FALSE]],
    ],
    'required' => [
      [':input[name="field_target_group[0][subform][field_municipality_irrelevant][value]"]' => ['checked' => FALSE]],
    ],
  ];

  $form['paging_footer'] = [
    '#theme' => 'hel_tpm_steps',
  ];

  $form['#attached']['library'][] = 'hel_tpm_forms/hel_tpm_forms';

  $form['#validate'][] = 'hel_tpm_forms_validate_service_form_helper';

  hel_tpm_forms_publish_service_action($form, $form_state);
}

/**
 * Extra server-side validation for editing service nodes.
 */
function hel_tpm_forms_validate_service_form_helper(array &$form, FormStateInterface &$form_state): void {
  // Check extra required fields only when form is publishing ready.
  $require_fields = FALSE;
  if ($moderation_state = $form_state->getValue('moderation_state')[0]['value']) {
    if ($moderation_state === 'published' || $moderation_state === 'ready_to_publish') {
      $require_fields = TRUE;
    }
  }

  // Check that age range is given, unless age group is selected. Not trying to
  // validate, if the field `field_target_group` is missing.
  if (($target_group = $form_state->getValue('field_target_group')) && $require_fields) {
    _hel_tpm_forms_validate_age_groups($target_group, $form_state);
    _hel_tpm_forms_validate_municipality($target_group, $form_state);
  }
}

/**
 * @param array $target_group
 * @param FormStateInterface $form_state
 *
 * @return void
 */
function _hel_tpm_forms_validate_municipality($target_group, FormStateInterface &$form_state) {
  $subform = $target_group[0]['subform'];
  $municipality_irrelevant = $subform['field_municipality_irrelevant'];
  $municipalities = $subform['field_target_group_municipality'];
  if ((empty($municipality_irrelevant) || $municipality_irrelevant['value'] == 0) && empty($municipalities)) {
    $form_state->setErrorByName(
      'field_target_group][0][subform][field_target_group_municipality',
      t('Selecting municipalities is required, unless municipality doesn\'t matter  is selected.')
    );
  }
}

/**
 * Helper validator for age groups.
 *
 * @param array $target_group
 *   Target group paragraph values.
 * @param FormStateInterface $form_state
 *   Form state interface.
 *
 * @return void
 *  -
 */
function _hel_tpm_forms_validate_age_groups($target_group, &$form_state) {
  $age_groups = $target_group[0]['subform']['field_age_groups'][0]['value'] ?? NULL;
  $age_from = $target_group[0]['subform']['field_age'][0]['from'] ?? NULL;
  $age_to = $target_group[0]['subform']['field_age'][0]['to'] ?? NULL;

  if (empty($age_groups) && (empty($age_from) || empty($age_to))) {
    $form_state->setErrorByName(
      "field_target_group][0][subform][field_age_groups",
      t('Selecting an age group is mandatory, unless the age range is set.')
    );
    $form_state->setErrorByName(
      "field_target_group][0][subform][field_age][0",
      t('Setting the age range is mandatory, unless an age group is selected.')
    );
  }
}

/**
 * Callback for publish service button.
 */
function hel_tpm_forms_publish_service_action(&$form, $form_state) {
  $form_object = $form_state->getFormObject();
  $storage = $form_state->getStorage();
  if (empty($form_object)) {
    return;
  }

  $node = $form_object->getEntity();

  // If group isn't in form storage, try to get group from node.
  if (empty($storage['group'])) {
    if (empty($node->entitygroupfield)) {
      return;
    }
    $group_content = $node->entitygroupfield->entity;
    if (empty($group_content)) {
      return;
    }
    $group = $group_content->getGroup();
  }
  else {
    $group = $storage['group'];
  }

  // No group found.
  if (empty($group)) {
    return;
  }

  // Check user has permission to select publish transition.
  $transition_validator = \Drupal::service('gcontent_moderation.state_transition_validation');
  $transitions = $transition_validator->allowedTransitions(\Drupal::currentUser(), $node, [$group]);
  $action = [
    '#type' => 'button',
    '#attributes' => ['id' => 'hel-tpm-service-submit-button'],
    '#attached' => [
      'library' => [
        'service_manual_workflow/service-confirm-popup',
        'hel_tpm_forms/service_custom_submit',
      ],
    ],
  ];
  if (empty($transitions['publish'])) {
    $action['#value'] = t('Ready to publish');
    $action['#attributes']['data-state'] = 'ready_to_publish';
  }
  else {
    $action['#value'] = t('Publish');
    $action['#attributes']['data-state'] = 'published';
  }

  $form['actions']['publish_service'] = $action;
}

/**
 * Publish service function.
 */
function _hel_tpm_forms_service_publish_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'published']]);
}

/**
 * Submit callback for ready to publish button.
 */
function _hel_tpm_forms_service_ready_to_submit_submit($form, &$form_state) {
  $form_state->setValue('moderation_state', [['value' => 'ready_to_publish']]);
  \Drupal::messenger()->addStatus(t('Thank you! Service has been sent for review, after which it will be published and can be seen by all user using Palvelumanuaali.'));
}

/**
 * Implements hook_form_alter().
 */
function hel_tpm_forms_field_widget_form_alter(&$element, FormStateInterface $form_state, array $context) {
  if (empty($element['#type'])) {
    return;
  }
  if (($element['#type'] === 'select2') || ($element['#type'] === 'select')) {
    $element['#placeholder'] = t('Choose from following options');
    // Fix for wrong selection when changing
    // roles of an user and refreshing services form.
    $element['#attributes']['autocomplete'] = 'off';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function hel_tpm_forms_element_info_alter(&$type) {
  $type['radios']['#process'][] = 'hel_tpm_forms_remove_radio_na';
}

/**
 * Helper function to unset _none from radios.
 */
function hel_tpm_forms_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}
