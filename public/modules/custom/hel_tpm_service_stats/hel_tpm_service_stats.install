<?php

/**
 * @file
 * Install, update and uninstall functions for the Service statistics module.
 */

/**
 * Implements hook_install().
 */
function hel_tpm_service_stats_install() {
  module_set_weight('hel_tpm_service_stats', [1000]);
  $service_revision_history = \Drupal::service('hel_tpm_service_stats.revision_history');
  $published_revisions = $service_revision_history->getPublishedRevisions();
  foreach ($published_revisions as $revision) {
    $previous_revision = $service_revision_history->getPreviousRevision($revision);
    if (!$previous_revision) {
      continue;
    }
    $service_revision_history->createServicePublishedRow($revision, $previous_revision);
  }

  hel_tpm_service_stats_update_10002();
  hel_tpm_service_stats_update_10003();
}

/**
 * Re-index service published rows.
 */
function hel_tpm_service_stats_update_10001(&$sandbox) {
  $service_revision_history = \Drupal::service('hel_tpm_service_stats.revision_history');
  $database = \Drupal::service('database');
  $database->truncate('service_published_row')->execute();
  $published_revisions = $service_revision_history->getPublishedRevisions();
  foreach ($published_revisions as $revision) {
    $previous_revision = $service_revision_history->getPreviousRevision($revision);
    if (!$previous_revision) {
      continue;
    }
    $service_revision_history->createServicePublishedRow($revision, $previous_revision);
  }
}

/**
 * Create field_days_since_last_state_chan and set default values.
 */
function hel_tpm_service_stats_update_10002() {
  _hel_tpm_general_ensure_entity_fields('node', 'service', ['field_days_since_last_state_chan']);
}

/**
 * Populate default value for field_days_since_last_chan.
 */
function hel_tpm_service_stats_update_10003() {
  // Temporarily block sending mails.
  $storage = Drupal::service('entity_type.manager')->getStorage('node');
  $nodes = $storage->loadByProperties(['type' => 'service']);

  foreach ($nodes as $node) {
    $languages = $node->getTranslationLanguages();
    $revision_ids = $storage->revisionIds($node);
    $revision_ids = array_reverse($revision_ids);

    foreach ($revision_ids as $revision_id) {
      $revision = $storage->loadRevision($revision_id);

      foreach ($languages as $langcode => $language) {

        if ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected()) {
          $revision = $revision->getTranslation($langcode);
          _hel_tpm_service_stats_create_field_revision($revision);
          if ($revision->wasDefaultRevision()) {
            break;
          }
        }
      }
    }
  }
}

/**
 * Helper to create field revisions.
 */
function _hel_tpm_service_stats_create_field_revision($revision) {
  $database = Drupal::database();
  $field_table = 'node__field_days_since_last_state_chan';
  $field_revision_table = 'node_revision__field_days_since_last_state_chan';
  $table = [
    'bundle' => $revision->bundle(),
    'deleted' => 0,
    'entity_id' => $revision->id(),
    'revision_id' => $revision->getRevisionId(),
    'langcode' => $revision->language()->getId(),
    'delta' => 0,
    'field_days_since_last_state_chan_value' => 0,
  ];

  if ($revision->isDefaultRevision()) {
    $database->insert($field_table)
      ->fields(array_keys($table))
      ->values(array_values($table))
      ->execute();
  }
  $database->insert($field_revision_table)
    ->fields(array_keys($table))
    ->values(array_values($table))
    ->execute();
}
