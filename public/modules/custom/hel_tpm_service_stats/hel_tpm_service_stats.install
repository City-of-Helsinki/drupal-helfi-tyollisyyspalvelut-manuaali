<?php

/**
 * @file
 * Install, update and uninstall functions for the Service statistics module.
 */

/**
 * Implements hook_install().
 */
function hel_tpm_service_stats_install() {
  module_set_weight('hel_tpm_service_stats', [1000]);
  $service_revision_history = \Drupal::service('hel_tpm_service_stats.revision_history');
  $published_revisions = $service_revision_history->getPublishedRevisions();
  foreach ($published_revisions as $revision) {
    $previous_revision = $service_revision_history->getPreviousRevision($revision);
    if (!$previous_revision) {
      continue;
    }
    $service_revision_history->createServicePublishedRow($revision, $previous_revision);
  }

  hel_tpm_service_stats_update_10002();
  hel_tpm_service_stats_update_10003();
}

/**
 * Re-index service published rows.
 */
function hel_tpm_service_stats_update_10001(&$sandbox) {
  $service_revision_history = \Drupal::service('hel_tpm_service_stats.revision_history');
  $database = \Drupal::service('database');
  $database->truncate('service_published_row')->execute();
  $published_revisions = $service_revision_history->getPublishedRevisions();
  foreach ($published_revisions as $revision) {
    $previous_revision = $service_revision_history->getPreviousRevision($revision);
    if (!$previous_revision) {
      continue;
    }
    $service_revision_history->createServicePublishedRow($revision, $previous_revision);
  }
}

/**
 * Create field_days_since_last_state_chan and set default values.
 */
function hel_tpm_service_stats_update_10002() {
  _hel_tpm_general_ensure_entity_fields('node', 'service', ['field_days_since_last_state_chan']);
}

/**
 * Populate default value for field_days_since_last_chan.
 */
function hel_tpm_service_stats_update_10003() {
  // Temporarily block sending mails.
  $storage = Drupal::service('entity_type.manager')->getStorage('node');
  $nodes = $storage->loadByProperties(['type' => 'service']);

  foreach ($nodes as $node) {
    $languages = $node->getTranslationLanguages();
    $revision_ids = $storage->revisionIds($node);
    $revision_ids = array_reverse($revision_ids);

    foreach ($revision_ids as $revision_id) {
      $revision = $storage->loadRevision($revision_id);

      foreach ($languages as $langcode => $language) {

        if ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected()) {
          $revision = $revision->getTranslation($langcode);
          _hel_tpm_service_stats_create_field_revision($revision);
          if ($revision->wasDefaultRevision()) {
            break;
          }
        }
      }
    }
  }
}

/**
 * Re-generate default values for service fields.
 */
function hel_tpm_service_stats_update_10004() {
  $storage = Drupal::service('entity_type.manager')->getStorage('node');
  $nodes = $storage->loadByProperties(['type' => 'service']);

  foreach ($nodes as $node) {
    $languages = $node->getTranslationLanguages();
    $revision_ids = $storage->revisionIds($node);
    $revision_ids = array_reverse($revision_ids);

    foreach ($revision_ids as $revision_id) {
      $revision = $storage->loadRevision($revision_id);

      foreach ($languages as $langcode => $language) {

        if ($revision->isDefaultRevision()) {
          _hel_tpm_service_stats_create_default_field_revision($revision, $langcode);
        }

        if ($revision->hasTranslation($langcode)) {
          _hel_tpm_service_stats_create_field_revision($revision, $langcode);
        }
      }
    }
  }
}

/**
 * Creates a default field revision for the specified entity and language.
 *
 * @param object $revision
 *   The revision object of the entity.
 * @param string $langcode
 *   The language code for which the default field revision is created.
 *
 * @return void
 *   This function does not return a value.
 */
function _hel_tpm_service_stats_create_default_field_revision($revision, $langcode) {
  $field_table = 'node__field_days_since_last_state_chan';
  _hel_tpm_service_stats_insert_default_value($revision, $langcode, $field_table);
}

/**
 * Creates a field revision entry for the specified revision and language code.
 *
 * @param object $revision
 *   The revision object for which the field revision entry is created.
 * @param string $langcode
 *   The language code for the entry.
 *
 * @return void
 *   This method does not return a value.
 */
function _hel_tpm_service_stats_create_field_revision($revision, $langcode) {
  $field_revision_table = 'node_revision__field_days_since_last_state_chan';
  _hel_tpm_service_stats_insert_default_value($revision, $langcode, $field_revision_table);
}

/**
 * Inserts a default value into a specified field table for a given revision.
 *
 * @param object $revision
 *   The revision object containing entity information
 *   for which the operation is performed.
 * @param string $langcode
 *   The language code to associate with the default value entry.
 * @param string $field_table
 *   The name of the database table where the default value should be inserted.
 *
 * @return void
 *   No return value.
 */
function _hel_tpm_service_stats_insert_default_value($revision, string $langcode, $field_table) {
  $database = Drupal::database();
  $table = [
    'bundle' => $revision->bundle(),
    'deleted' => 0,
    'entity_id' => $revision->id(),
    'revision_id' => $revision->getRevisionId(),
    'langcode' => $langcode,
    'delta' => 0,
    'field_days_since_last_state_chan_value' => 0,
  ];

  $existing_entry = $database->select($field_table, 't')
    ->fields('t', ['entity_id', 'revision_id'])
    ->condition('entity_id', $revision->id())
    ->condition('revision_id', $revision->getRevisionId())
    ->condition('langcode', $langcode)
    ->execute()
    ->fetchField();

  if (!$existing_entry) {
    $database->insert($field_table)
      ->fields(array_keys($table))
      ->values(array_values($table))
      ->execute();
  }

}
