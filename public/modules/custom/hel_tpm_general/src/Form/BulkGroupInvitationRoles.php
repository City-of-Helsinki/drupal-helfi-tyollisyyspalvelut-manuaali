<?php

namespace Drupal\hel_tpm_general\Form;

use Drupal\Core\Form\FormStateInterface;
use Drupal\ginvite\Form\BulkGroupInvitation;
use Drupal\group\Entity\GroupInterface;

class BulkGroupInvitationRoles extends BulkGroupInvitation {

  /**
   * @param array $form
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *
   * @return array
   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
   */
  function buildForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub

    $group = \Drupal::service('current_route_match')->getParameter('group');

    $form['roles'] = [
      '#type' => 'select',
      '#title' => t('Roles'),
      '#options' => self::getGroupRoleOptions($group),
      '#weight' => 0
    ];

    return $form;
  }

  /**
   * Fetch group roles for select options.
   *
   * @param \Drupal\group\Entity\GroupInterface $group
   *
   * @return array
   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
   */
  protected function getGroupRoleOptions(GroupInterface $group) {
    $roles = [];
    $group_roles = $this->entityTypeManager->getStorage('group_role')->loadByProperties([
      'group_type' => $group->getGroupType(),
      'internal' => FALSE,
    ]);
    if (empty($group_roles)) {
      return $roles;
    }
    foreach ($group_roles as $id => $role) {
      $roles[$role->id()] = $role->label();
    }
    return $roles;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

    // Prepare params to store them in tempstore.
    $params['gid'] = $this->group->id();
    $params['plugin'] = $this->group->getGroupType()->getContentPlugin('group_invitation')->getContentTypeConfigId();
    $params['emails'] = $this->getSubmittedEmails($form_state);
    $params['roles'] = $this->getRoles($form_state);

    $tempstore = $this->tempStoreFactory->get('ginvite_bulk_invitation');

    try {
      $tempstore->set('params', $params);
      // Redirect to confirm form.
      $form_state->setRedirect('ginvite.invitation.bulk.confirm', ['group' => $this->group->id()]);
    }
    catch (\Exception $error) {
      $this->loggerFactory->get('ginvite')->alert($this->t('@err', ['@err' => $error]));
      $this->messenger->addWarning($this->t('Unable to proceed, please try again.'));
    }
  }

  /**
   * Get selected role(s).
   *
   * @param $form_state
   *
   * @return void
   */
  protected function getRoles(FormStateInterface $form_state) {
    return $form_state->getValue('roles');
  }

  /**
   * Get array of submited emails.
   *
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   List of emails to invite .
   */
  private function getSubmittedEmails(FormStateInterface $form_state) {
    return array_map('trim', array_unique(explode("\r\n", trim($form_state->getValue('email_address')))));
  }
}