<?php

/**
 * @file
 * Hel tpm general install file.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * Remove the taxonomy contents.
 */
function hel_tpm_general_update_8101() {
  $entities = $controller->loadMultiple($tids);
  $controller->delete($entities);
}

/**
 * Remove the field_age_groups field.
 */
function hel_tpm_general_update_8102() {
  $field_config = FieldConfig::loadByName('paragraph', 'target_group', 'field_age_groups');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_age_groups');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field attendance and service excecutions fields.
 */
function hel_tpm_general_update_8103() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_attendance');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config2 = FieldConfig::loadByName('node', 'service', 'field_service_execution');
  if ($field_config2) {
    $field_config2->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_attendance');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage2 = FieldStorageConfig::loadByName('node', 'field_service_execution');
  if ($field_storage2) {
    $field_storage2->delete();
  }
}

/**
 * Remove the field statements unemployement and service requirement fields.
 */
function hel_tpm_general_update_8104() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_requirements');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config = FieldConfig::loadByName('node', 'service', 'field_statements_unemployment');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_requirements');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_statements_unemployment');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field service_implement.
 */
function hel_tpm_general_update_8105() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_implement');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_implement ');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8107() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'content_list_lift_header_icon']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8108() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'quick_link']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove the field related_archive.
 */
function hel_tpm_general_update_8109() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_related_archive');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_related_archive');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field field_description.
 */
function hel_tpm_general_update_8110() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_description');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_description');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Adjust the field_obligatoryness.
 */
function hel_tpm_general_update_8111() {
  $field_storage = FieldStorageConfig::loadByName('node', 'field_obligatoryness');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Migrate target group municipality fields.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function hel_tpm_general_update_8112() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->field_target_group_municipality = $paragraph->field_municipality;
    $paragraph->save();
  }
}

/**
 * Migrate age groups.
 */
function hel_tpm_general_update_8113(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  $age_group_mapping = [
    'under_30' => ['from' => 16, 'to' => 30],
    'over_30' => ['from' => 31, 'to' => 54],
    'over_57' => ['from' => 55, 'to' => 70],
  ];

  foreach ($paragraphs as $paragraph) {
    $translation_languages = $paragraph->getTranslationLanguages();
    foreach ($translation_languages as $langcode => $language) {
      $translation = $paragraph->getTranslation($langcode);
      $age_groups = $translation->field_age_groups->value;
      if (empty($age_groups) || $age_groups == 'no_age_restriction') {
        continue;
      }
      $translation->set('field_age_groups', NULL);
      $age = $translation->field_age->getValue();
      if (empty($age)) {
        $translation->set('field_age', $age_group_mapping[$age_groups]);
      }
      $translation->save();
    }
  }
}

/**
 * Import selected configurations.
 */
function hel_tpm_general_update_10100(&$sandbox) {
  $config_storage = \Drupal::service('config.storage');
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);

  // Import pathauto configurations.
  $configs = [
    'pathauto.pattern.palvelut',
    'pathauto.pattern.palvelut_en_swe',
  ];
  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }

  // Import field storages.
  $field_storage_conf = [
    'field.storage.node.field_internal_files',
    'field.storage.node.field_internal_links',
  ];
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_conf as $config) {
    $field_storage_config->create($source->read($config))->save();
  }

  // Import node field configs.
  $field_configs = [
    'field.field.node.service.field_internal_files',
    'field.field.node.service.field_internal_links',
  ];
  $field_config_storage = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_configs as $config) {
    $field_config_storage->create($source->read($config))->save();
  }

}

/**
 * Migrate internal urls and files from paragraphs to fields.
 */
function hel_tpm_general_update_10101(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $paragraphs_field = 'field_links_and_attachments';
  $internal_file_field = 'field_internal_files';
  $internal_links_field = 'field_internal_links';

  if (!isset($sandbox['progress'])) {
    $efq = $storage->getQuery();
    $max = $efq->condition('type', 'service')
      ->condition($paragraphs_field, '', '<>')
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $efq = $storage->getQuery();
  $result = $efq->condition('type', 'service')
    ->condition($paragraphs_field, '', '<>')
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  foreach ($result as $nid) {
    $node = $storage->load($nid);
    // Load latest revision.
    if (!$node->isLatestRevision()) {
      $vid = $storage->getLatestRevisionId($node->id());
      $node = $storage->loadRevision($vid);
    }
    $paragraph = $node->{$paragraphs_field}->entity;
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_file', $node, $internal_file_field);
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_link', $node, $internal_links_field);
    // Preserve changed time.
    $changed = $node->getChangedTime();
    // Add one second to prevent drupal from updating changed time.
    $changed++;
    $node->setChangedTime($changed);
    $node->save();
    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Migrate language selections from paragraph to field_service_language.
 */
function hel_tpm_general_update_10102(&$sandbox) {
  $node_field = 'field_service_language';
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  if (!isset($sandbox['progress'])) {
    $max = $node_storage->getQuery()
      ->condition('type', 'service')
      ->accessCheck(FALSE)
      ->condition('field_service_time_and_location', '', '<>')
      ->sort('nid')
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $nodes = $node_storage->getQuery()
    ->condition('type', 'service')
    ->condition('field_service_time_and_location', '', '<>')
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  $references = [];
  foreach ($nodes as $result) {
    $node = $node_storage->load($result);
    if (!$node->isLatestRevision()) {
      $vid = $node_storage->getLatestRevisionId($node->id());
      $node = $node_storage->loadRevision($vid);
    }
    foreach ($node->field_service_time_and_location->referencedEntities() as $paragraph) {
      $languages_paragraphs = $paragraph->field_service_languages->referencedEntities();
      foreach ($languages_paragraphs as $languages_paragraph) {
        $lang = $languages_paragraph->field_language->getValue();
        if (empty($lang[0])) {
          continue;
        }
        $references[$result][$lang[0]['target_id']] = $lang[0];
      }
    }
    $sandbox['current'] = $result;
    $sandbox['progress']++;
  }

  // Add references to proper node field.
  foreach ($references as $nid => $reference) {
    $node = $node_storage->load($nid);
    if (!$node->isLatestRevision()) {
      $vid = $node_storage->getLatestRevisionId($node->id());
      $node = $node_storage->loadRevision($vid);
    }
    // Preserve changed time.
    $changed = $node->getChangedTime();
    // Add one second to prevent drupal from updating changed time.
    $changed++;
    $node->setChangedTime($changed);
    $node->set($node_field, $reference);
    $node->save();

  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Install field_municipality_irrelevant to paragraph target_group.
 */
function hel_tpm_general_update_10103(&$sandbox) {
  $fields = ['field_municipality_irrelevant'];
  $entity_type = 'paragraph';
  $bundle = 'target_group';
  _hel_tpm_general_ensure_entity_fields($entity_type, $bundle, $fields);
}

/**
 * Migrate municipality not required fields.
 */
function hel_tpm_general_update_10104(&$sandbox) {
  $municipality_tid = 39;
  $storage = \Drupal::service('entity_type.manager')->getStorage('paragraph');

  if (!isset($sandbox['progress'])) {
    $max = $storage->getQuery()
      ->condition('type', 'target_group')
      ->condition('field_target_group_municipality', $municipality_tid, 'IN')
      ->accessCheck(FALSE)
      ->latestRevision()
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $paragraphs = $storage->getQuery()
    ->condition('type', 'target_group')
    ->accessCheck(FALSE)
    ->condition('field_target_group_municipality', $municipality_tid, 'IN')
    ->latestRevision()
    ->condition('revision_id', $sandbox['current'], '>')
    ->range(0, 50)
    ->sort('revision_id')
    ->execute();

  foreach ($paragraphs as $rev_id => $paragraph_id) {
    $rev = $storage->loadRevision($rev_id);
    $rev->set('field_municipality_irrelevant', 1);
    $rev->save();

    $sandbox['current'] = $rev_id;
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Import field_service_coordination and field_career_markings.
 */
function hel_tpm_general_update_10105(&$sandbox) {
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);

  // Import field storages.
  $field_storage_configs = [
    'field.storage.node.field_service_coordination',
    'field.storage.node.field_career_markings',
  ];
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_configs as $config) {
    $field_storage_config->create($source->read($config))->save();
  }

  // Import node field configs.
  $field_configs = [
    'field.field.node.service.field_service_coordination',
    'field.field.node.service.field_career_markings',
  ];
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_configs as $config) {
    $field_config->create($source->read($config))->save();
  }
}

/**
 * Migrate coordination career and career marking paragraphs to fields.
 */
function hel_tpm_general_update_10106(&$sandbox): void {
  $paragraphs_to_fields = [
    'field_guidance_to_service' => 'field_service_coordination',
    'field_career_marking' => 'field_career_markings',
  ];

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  // Initialize update process and set the max value.
  if (!isset($sandbox['progress'])) {
    $efq = $node_storage->getQuery();
    $max = $efq->condition('type', 'service')
      ->condition($efq->orConditionGroup()
        ->condition(array_keys($paragraphs_to_fields)[0], '', '<>')
        ->condition(array_keys($paragraphs_to_fields)[1], '', '<>'))
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  // Fetch nodes in the given language.
  $efq = $node_storage->getQuery();
  $result = $efq->condition('type', 'service')
    ->condition($efq->orConditionGroup()
      ->condition(array_keys($paragraphs_to_fields)[0], '', '<>')
      ->condition(array_keys($paragraphs_to_fields)[1], '', '<>'))
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  foreach ($result as $nid) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $node_storage->load($nid);
    _hel_tpm_general_convert_paragraphs_inner_field($node, $paragraphs_to_fields, 'field_description');

    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Helper function to migrate paragraph fields to node fields.
 *
 * @param \Drupal\Core\Entity\EntityInterface $paragraph
 *   Paragraph entityinterface.
 * @param string $paragraph_field
 *   Name of field in paragraph.
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   Node interface.
 * @param string $internal_file_field
 *   Name of the internal file field.
 *
 * @return void
 *   -
 */
function _hel_tpm_general_migrate_paragraph_field($paragraph, $paragraph_field, &$node, $internal_file_field) {
  $files = $paragraph->{$paragraph_field}->getValue();
  $node->set($internal_file_field, $files);
}

/**
 * Helper function to ensure entity type bundle fields.
 *
 * @param string $entity_type
 *   Entity type id.
 * @param string $bundle
 *   Entity bundle id.
 * @param array $fields
 *   Fields you want to ensure.
 *
 * @return void
 *   -
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _hel_tpm_general_ensure_entity_fields(string $entity_type, string $bundle, array $fields) : void {
  $config_dir = Settings::get('config_sync_directory');
  $config_directory = new FileStorage($config_dir);
  foreach ($fields as $field) {
    $field_storage_name = 'field.storage.' . $entity_type . '.' . $field;
    $config_record = $config_directory->read($field_storage_name);
    if (!FieldStorageConfig::loadByName($config_record['entity_type'], $config_record['field_name'])) {
      FieldStorageConfig::create($config_record)->save();
    }
    $field_config_name = 'field.field.' . $entity_type . '.' . $bundle . '.' . $field;
    $config_record = $config_directory->read($field_config_name);
    if (!FieldConfig::loadByName($config_record['entity_type'], $config_record['bundle'], $config_record['field_name'])) {
      FieldConfig::create($config_record)->save();
    }
  }
}

/**
 * Helper function to convert paragraphs with one inner field to normal fields.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param array $paragraphs_to_fields
 *   Array keys are paragraph field names and values new field names.
 * @param string $paragraph_inner_field
 *   The name of the original field inside the paragraph.
 *
 * @return void
 *   Void.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _hel_tpm_general_convert_paragraphs_inner_field(Node $node, array $paragraphs_to_fields, string $paragraph_inner_field): void {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $languages = $node->getTranslationLanguages();
  $revisionIds = $node_storage->revisionIds($node);
  $revisionIds = array_reverse($revisionIds);
  foreach ($languages as $langcode => $language) {
    foreach ($revisionIds as $vid) {
      /** @var \Drupal\node\Entity\Node $revision */
      $revision = $node_storage->loadRevision($vid);
      if ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected()) {
        $revision = $revision->getTranslation($langcode);
        foreach ($paragraphs_to_fields as $paragraph_name => $field_name) {
          $revision = _hel_tpm_general_move_paragraph_inner_to_field($revision, $langcode, $paragraph_name, $paragraph_inner_field, $field_name);
        }
        $revision->setNewRevision(FALSE);
        // Without setSyncing(TRUE) new revisions would be created despite using
        // setNewRevision(FALSE). However, this requires using the fix from
        // https://www.drupal.org/i/3338260 for skipping recalculating the
        // revision translations.
        $revision->setSyncing(TRUE);
        $revision->save();
        // Only go through most recent revisions until the default revision is
        // processed.
        if ($revision->wasDefaultRevision()) {
          break;
        }
      }
    }
  }
}

/**
 * Helper function to set old paragraph with one inner field to normal field.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param string $paragraphs_field
 *   The name of the original paragraph.
 * @param string $paragraph_inner_field
 *   The name of the original field inside the paragraph.
 * @param string $new_field
 *   The name of the field.
 *
 * @return \Drupal\node\Entity\Node
 *   The node object.
 */
function _hel_tpm_general_move_paragraph_inner_to_field(Node $node, string $langcode, string $paragraphs_field, string $paragraph_inner_field, string $new_field): Node {
  if (!empty($node->{$paragraphs_field}->entity)) {
    if ($node->{$paragraphs_field}->entity->hasTranslation($langcode)) {
      $paragraph = $node->{$paragraphs_field}->entity->getTranslation($langcode);
      $inner_value = $paragraph->{$paragraph_inner_field}->getValue();
      $node->set($new_field, $inner_value);
    }
  }
  return $node;
}
