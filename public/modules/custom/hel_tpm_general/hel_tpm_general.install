<?php

/**
 * @file
 * Hel tpm general install file.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Remove the taxonomy contents.
 */
function hel_tpm_general_update_8101() {
  $entities = $controller->loadMultiple($tids);
  $controller->delete($entities);
}

/**
 * Remove the field_age_groups field.
 */
function hel_tpm_general_update_8102() {
  $field_config = FieldConfig::loadByName('paragraph', 'target_group', 'field_age_groups');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_age_groups');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field attendance and service excecutions fields.
 */
function hel_tpm_general_update_8103() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_attendance');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config2 = FieldConfig::loadByName('node', 'service', 'field_service_execution');
  if ($field_config2) {
    $field_config2->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_attendance');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage2 = FieldStorageConfig::loadByName('node', 'field_service_execution');
  if ($field_storage2) {
    $field_storage2->delete();
  }
}

/**
 * Remove the field statements unemployement and service requirement fields.
 */
function hel_tpm_general_update_8104() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_requirements');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config = FieldConfig::loadByName('node', 'service', 'field_statements_unemployment');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_requirements');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_statements_unemployment');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field service_implement.
 */
function hel_tpm_general_update_8105() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_implement');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_implement ');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8107() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'content_list_lift_header_icon']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8108() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'quick_link']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove the field related_archive.
 */
function hel_tpm_general_update_8109() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_related_archive');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_related_archive');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field field_description.
 */
function hel_tpm_general_update_8110() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_description');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_description');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Adjust the field_obligatoryness.
 */
function hel_tpm_general_update_8111() {
  $field_storage = FieldStorageConfig::loadByName('node', 'field_obligatoryness');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Migrate target group municipality fields.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function hel_tpm_general_update_8112() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->field_target_group_municipality = $paragraph->field_municipality;
    $paragraph->save();
  }
}

/**
 * Migrate age groups.
 */
function hel_tpm_general_update_8113(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  $age_group_mapping = [
    'under_30' => ['from' => 16, 'to' => 30],
    'over_30' => ['from' => 31, 'to' => 54],
    'over_57' => ['from' => 55, 'to' => 70],
  ];

  foreach ($paragraphs as $paragraph) {
    $translation_languages = $paragraph->getTranslationLanguages();
    foreach ($translation_languages as $langcode => $language) {
      $translation = $paragraph->getTranslation($langcode);
      $age_groups = $translation->field_age_groups->value;
      if (empty($age_groups) || $age_groups == 'no_age_restriction') {
        continue;
      }
      $translation->set('field_age_groups', NULL);
      $age = $translation->field_age->getValue();
      if (empty($age)) {
        $translation->set('field_age', $age_group_mapping[$age_groups]);
      }
      $translation->save();
    }
  }
}

/**
 * Import selected configurations.
 */
function hel_tpm_general_update_10100(&$sandbox) {
  $config_storage = \Drupal::service('config.storage');
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);

  // Import pathauto configurations.
  $configs = [
    'pathauto.pattern.palvelut',
    'pathauto.pattern.palvelut_en_swe',
  ];
  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }

  // Import field storages.
  $field_storage_conf = [
    'field.storage.node.field_internal_files',
    'field.storage.node.field_internal_links',
  ];
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_conf as $config) {
    $field_storage_config->create($source->read($config))->save();
  }

  // Import node field configs.
  $field_configs = [
    'field.field.node.service.field_internal_files',
    'field.field.node.service.field_internal_links',
  ];
  $field_config_storage = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_configs as $config) {
    $field_config_storage->create($source->read($config))->save();
  }

}

/**
 * Migrate internal urls and files from paragraphs to fields.
 */
function hel_tpm_general_update_10101(&$sandbox) {
  $paragraphs_field = 'field_links_and_attachments';
  $internal_file_field = 'field_internal_files';
  $internal_links_field = 'field_internal_links';

  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $efq = $storage->getQuery();
  $result = $efq->condition('type', 'service')
    ->condition($paragraphs_field, '', '<>')
    ->accessCheck(FALSE)
    ->execute();
  $nodes = $storage->loadMultiple($result);

  foreach ($nodes as $node) {
    // Load latest revision.
    if (!$node->isLatestRevision()) {
      $vid = $storage->getLatestRevisionId($node->id());
      $node = $storage->loadRevision($vid);
    }
    $paragraph = $node->{$paragraphs_field}->entity;
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_file', $node, $internal_file_field);
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_link', $node, $internal_links_field);
    // Preserve changed time.
    $changed = $node->getChangedTime();
    // Add one second to prevent drupal from updating changed time.
    $changed++;
    $node->setChangedTime($changed);
    $node->save();
  }
}

/**
 * Helper function to migrate paragraph fields to node fields.
 *
 * @param \Drupal\Core\Entity\EntityInterface $paragraph
 *   Paragraph entityinterface.
 * @param string $paragraph_field
 *   Name of field in paragraph.
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   Node interface.
 * @param string $internal_file_field
 *   Name of the internal file field.
 *
 * @return void
 *   -
 */
function _hel_tpm_general_migrate_paragraph_field($paragraph, $paragraph_field, &$node, $internal_file_field) {
  $files = $paragraph->{$paragraph_field}->getValue();
  $node->set($internal_file_field, $files);
}
