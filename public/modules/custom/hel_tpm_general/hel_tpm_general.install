<?php

/**
 * @file
 * Hel tpm general install file.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\hel_tpm_general\PreventMailUtility;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Remove the taxonomy contents.
 */
function hel_tpm_general_update_8101() {
  $entities = $controller->loadMultiple($tids);
  $controller->delete($entities);
}

/**
 * Remove the field_age_groups field.
 */
function hel_tpm_general_update_8102() {
  $field_config = FieldConfig::loadByName('paragraph', 'target_group', 'field_age_groups');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_age_groups');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field attendance and service excecutions fields.
 */
function hel_tpm_general_update_8103() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_attendance');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config2 = FieldConfig::loadByName('node', 'service', 'field_service_execution');
  if ($field_config2) {
    $field_config2->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_attendance');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage2 = FieldStorageConfig::loadByName('node', 'field_service_execution');
  if ($field_storage2) {
    $field_storage2->delete();
  }
}

/**
 * Remove the field statements unemployement and service requirement fields.
 */
function hel_tpm_general_update_8104() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_requirements');
  if ($field_config) {
    $field_config->delete();
  }

  $field_config = FieldConfig::loadByName('node', 'service', 'field_statements_unemployment');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_requirements');
  if ($field_storage) {
    $field_storage->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_statements_unemployment');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field service_implement.
 */
function hel_tpm_general_update_8105() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_service_implement');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_service_implement ');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8107() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'content_list_lift_header_icon']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove content list with header icon paragraph entities.
 */
function hel_tpm_general_update_8108() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'quick_link']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Remove the field related_archive.
 */
function hel_tpm_general_update_8109() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_related_archive');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_related_archive');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Remove the field field_description.
 */
function hel_tpm_general_update_8110() {
  $field_config = FieldConfig::loadByName('node', 'service', 'field_description');
  if ($field_config) {
    $field_config->delete();
  }

  $field_storage = FieldStorageConfig::loadByName('node', 'field_description');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Adjust the field_obligatoryness.
 */
function hel_tpm_general_update_8111() {
  $field_storage = FieldStorageConfig::loadByName('node', 'field_obligatoryness');
  if ($field_storage) {
    $field_storage->delete();
  }
}

/**
 * Migrate target group municipality fields.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function hel_tpm_general_update_8112() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->field_target_group_municipality = $paragraph->field_municipality;
    $paragraph->save();
  }
}

/**
 * Migrate age groups.
 */
function hel_tpm_general_update_8113(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  $paragraphs = $storage->loadByProperties(['type' => 'target_group']);
  $age_group_mapping = [
    'under_30' => ['from' => 16, 'to' => 30],
    'over_30' => ['from' => 31, 'to' => 54],
    'over_57' => ['from' => 55, 'to' => 70],
  ];

  foreach ($paragraphs as $paragraph) {
    $translation_languages = $paragraph->getTranslationLanguages();
    foreach ($translation_languages as $langcode => $language) {
      $translation = $paragraph->getTranslation($langcode);
      $age_groups = $translation->field_age_groups->value;
      if (empty($age_groups) || $age_groups == 'no_age_restriction') {
        continue;
      }
      $translation->set('field_age_groups', NULL);
      $age = $translation->field_age->getValue();
      if (empty($age)) {
        $translation->set('field_age', $age_group_mapping[$age_groups]);
      }
      $translation->save();
    }
  }
}

/**
 * Import selected configurations.
 */
function hel_tpm_general_update_10100(&$sandbox) {
  $config_storage = \Drupal::service('config.storage');
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);

  // Import pathauto configurations.
  $configs = [
    'pathauto.pattern.palvelut',
    'pathauto.pattern.palvelut_en_swe',
  ];
  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }

  // Import field storages.
  $field_storage_conf = [
    'field.storage.node.field_internal_files',
    'field.storage.node.field_internal_links',
  ];
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_conf as $config) {
    $field_storage_config->create($source->read($config))->save();
  }

  // Import node field configs.
  $field_configs = [
    'field.field.node.service.field_internal_files',
    'field.field.node.service.field_internal_links',
  ];
  $field_config_storage = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_configs as $config) {
    $field_config_storage->create($source->read($config))->save();
  }

}

/**
 * Migrate internal urls and files from paragraphs to fields.
 */
function hel_tpm_general_update_10101(&$sandbox) {
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $paragraphs_field = 'field_links_and_attachments';
  $internal_file_field = 'field_internal_files';
  $internal_links_field = 'field_internal_links';

  if (!isset($sandbox['progress'])) {
    $efq = $storage->getQuery();
    $max = $efq->condition('type', 'service')
      ->condition($paragraphs_field, '', '<>')
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $efq = $storage->getQuery();
  $result = $efq->condition('type', 'service')
    ->condition($paragraphs_field, '', '<>')
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  foreach ($result as $nid) {
    $node = $storage->load($nid);
    // Load latest revision.
    if (!$node->isLatestRevision()) {
      $vid = $storage->getLatestRevisionId($node->id());
      $node = $storage->loadRevision($vid);
    }
    $paragraph = $node->{$paragraphs_field}->entity;
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_file', $node, $internal_file_field);
    _hel_tpm_general_migrate_paragraph_field($paragraph, 'field_link', $node, $internal_links_field);
    // Preserve changed time.
    $changed = $node->getChangedTime();
    // Add one second to prevent drupal from updating changed time.
    $changed++;
    $node->setChangedTime($changed);
    $node->save();
    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Migrate language selections from paragraph to field_service_language.
 */
function hel_tpm_general_update_10102(&$sandbox) {
  $node_field = 'field_service_language';
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  if (!isset($sandbox['progress'])) {
    $max = $node_storage->getQuery()
      ->condition('type', 'service')
      ->accessCheck(FALSE)
      ->condition('field_service_time_and_location', '', '<>')
      ->sort('nid')
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $nodes = $node_storage->getQuery()
    ->condition('type', 'service')
    ->condition('field_service_time_and_location', '', '<>')
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  $references = [];
  foreach ($nodes as $result) {
    $node = $node_storage->load($result);
    if (!$node->isLatestRevision()) {
      $vid = $node_storage->getLatestRevisionId($node->id());
      $node = $node_storage->loadRevision($vid);
    }
    foreach ($node->field_service_time_and_location->referencedEntities() as $paragraph) {
      $languages_paragraphs = $paragraph->field_service_languages->referencedEntities();
      foreach ($languages_paragraphs as $languages_paragraph) {
        $lang = $languages_paragraph->field_language->getValue();
        if (empty($lang[0])) {
          continue;
        }
        $references[$result][$lang[0]['target_id']] = $lang[0];
      }
    }
    $sandbox['current'] = $result;
    $sandbox['progress']++;
  }

  // Add references to proper node field.
  foreach ($references as $nid => $reference) {
    $node = $node_storage->load($nid);
    if (!$node->isLatestRevision()) {
      $vid = $node_storage->getLatestRevisionId($node->id());
      $node = $node_storage->loadRevision($vid);
    }
    // Preserve changed time.
    $changed = $node->getChangedTime();
    // Add one second to prevent drupal from updating changed time.
    $changed++;
    $node->setChangedTime($changed);
    $node->set($node_field, $reference);
    $node->save();

  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Install field_municipality_irrelevant to paragraph target_group.
 */
function hel_tpm_general_update_10103(&$sandbox) {
  $fields = ['field_municipality_irrelevant'];
  $entity_type = 'paragraph';
  $bundle = 'target_group';
  _hel_tpm_general_ensure_entity_fields($entity_type, $bundle, $fields);
}

/**
 * Migrate municipality not required fields.
 */
function hel_tpm_general_update_10104(&$sandbox) {
  $municipality_tid = 39;
  $storage = \Drupal::service('entity_type.manager')->getStorage('paragraph');

  if (!isset($sandbox['progress'])) {
    $max = $storage->getQuery()
      ->condition('type', 'target_group')
      ->condition('field_target_group_municipality', $municipality_tid, 'IN')
      ->accessCheck(FALSE)
      ->latestRevision()
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $paragraphs = $storage->getQuery()
    ->condition('type', 'target_group')
    ->accessCheck(FALSE)
    ->condition('field_target_group_municipality', $municipality_tid, 'IN')
    ->latestRevision()
    ->condition('revision_id', $sandbox['current'], '>')
    ->range(0, 50)
    ->sort('revision_id')
    ->execute();

  foreach ($paragraphs as $rev_id => $paragraph_id) {
    $rev = $storage->loadRevision($rev_id);
    $rev->set('field_municipality_irrelevant', 1);
    $rev->save();

    $sandbox['current'] = $rev_id;
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Import field_service_coordination and field_career_markings.
 */
function hel_tpm_general_update_10105(&$sandbox) {
  $config_path = Settings::get('config_sync_directory');
  $source = new FileStorage($config_path);

  // Import field storages.
  $field_storage_configs = [
    'field.storage.node.field_service_coordination',
    'field.storage.node.field_career_markings',
  ];
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  foreach ($field_storage_configs as $config) {
    $field_storage_config->create($source->read($config))->save();
  }

  // Import node field configs.
  $field_configs = [
    'field.field.node.service.field_service_coordination',
    'field.field.node.service.field_career_markings',
  ];
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');
  foreach ($field_configs as $config) {
    $field_config->create($source->read($config))->save();
  }
}

/**
 * Migrate coordination career and career marking paragraphs to fields.
 */
function hel_tpm_general_update_10106(&$sandbox): void {
  $paragraphs_to_fields = [
    'field_guidance_to_service' => 'field_service_coordination',
    'field_career_marking' => 'field_career_markings',
  ];

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  // Temporarily block sending mails.
  PreventMailUtility::set();

  // Initialize update process and set the max value.
  if (!isset($sandbox['progress'])) {
    $efq = $node_storage->getQuery();
    $max = $efq->condition('type', 'service')
      ->condition($efq->orConditionGroup()
        ->condition(array_keys($paragraphs_to_fields)[0], '', '<>')
        ->condition(array_keys($paragraphs_to_fields)[1], '', '<>'))
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  // Fetch nodes in the given language.
  $efq = $node_storage->getQuery();
  $result = $efq->condition('type', 'service')
    ->condition($efq->orConditionGroup()
      ->condition(array_keys($paragraphs_to_fields)[0], '', '<>')
      ->condition(array_keys($paragraphs_to_fields)[1], '', '<>'))
    ->condition('nid', $sandbox['current'], '>')
    ->accessCheck(FALSE)
    ->sort('nid')
    ->range(0, 5)
    ->execute();

  foreach ($result as $nid) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $node_storage->load($nid);
    _hel_tpm_general_convert_paragraphs_inner_field($node, $paragraphs_to_fields, 'field_description');

    $sandbox['progress']++;
    $sandbox['current'] = $nid;
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  PreventMailUtility::set(FALSE);
}

/**
 * Create new service language field and migrate data.
 */
function hel_tpm_general_update_10107(&$sandbox) {
  $fields = ['field_service_language'];
  $entity_type = 'paragraph';
  $bundle = 'service_time_and_place';
  _hel_tpm_general_ensure_entity_fields($entity_type, $bundle, $fields);

  $database = \Drupal::database();
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');

  // Init paragraph query.
  // This is done to mitigate resource usage due to
  // unlimited amount of revisions per paragraphs.
  $paragraphs = $database->select('paragraph_revision__field_service_languages', 'p')
    ->fields('p', ['entity_id'])
    ->groupBy('entity_id')
    ->orderBy('p.entity_id');

  // Initialize progression with paragraph count.
  if (!isset($sandbox['progress'])) {
    $progress_query = $paragraphs;
    $max = $progress_query
      ->countQuery()
      ->execute()->fetchField();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = $max;
  }

  $paragraphs->condition('p.entity_id', $sandbox['current'], ">");
  // Fetch only 5 paragraphs.
  $paragraphs->range(0, 5);
  $paragraphs = $paragraphs->execute()->fetchAllAssoc('entity_id');

  // Fetch revisions values.
  $query = $database->select('paragraph_revision__field_service_languages', 'p');
  $query->fields('p');
  $query->orderBy('p.revision_id');
  $query->condition('p.entity_id', array_keys($paragraphs), 'IN');
  $reference_items = $query->execute()->fetchAll();

  // Create language collection.
  $language_collection = _hel_tpm_general_build_language_collection($reference_items);

  foreach ($language_collection as $paragraph_id => $revisions) {
    foreach ($revisions as $stp_rev => $languages) {
      $rev = $storage->loadRevision($stp_rev);
      $rev->field_service_language = $languages;
      $rev->save();
    }
    $sandbox['current'] = $paragraph_id;
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Migrate service languages paragraphs.
 */
function hel_tpm_general_update_10108(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $fields = ['field_service_languages'];
  $field_tables = 'node_revision__field_service_time_and_location';
  $entity_type = 'node';
  $bundle = 'service';

  _hel_tpm_general_ensure_entity_fields($entity_type, $bundle, $fields);

  $database = \Drupal::database();

  $node_revision_query = $database->select($field_tables, 'nr')
    ->fields('nr', ['revision_id'])
    ->orderBy('nr.revision_id')
    ->distinct();

  // Initialize progression with paragraph count.
  if (!isset($sandbox['progress'])) {
    $progress_query = $node_revision_query;
    $max = $progress_query
      ->countQuery()
      ->execute()->fetchField();
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = (int) $max;
  }

  $node_revision_query->condition('nr.revision_id', $sandbox['current'], ">");
  $node_revision_query->range(0, 20);
  $node_revision_ids = $node_revision_query->distinct()->execute()->fetchAllAssoc('revision_id');

  $field_revisions = $database->select($field_tables, 'nrf')
    ->fields('nrf')
    ->condition('nrf.revision_id', array_keys($node_revision_ids), 'IN')
    ->execute()->fetchAll();

  $field_revision_assoc = [];
  foreach ($field_revisions as $field_revision) {
    $field_revision_assoc[$field_revision->revision_id][] = $field_revision;
  }

  $entity_ids = [];
  foreach ($field_revision_assoc as $revision_id => $revisions) {
    _hel_tpm_general_migrate_service_languages($revisions);

    // Add entity id to nid array for later cache reset.
    $entity_ids[$revisions[0]->entity_id] = $revisions[0]->entity_id;

    $sandbox['current'] = (int) $revision_id;
    $sandbox['progress']++;
  }

  $node_storage->resetCache($entity_ids);

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Create My account menu link and translations.
 */
function hel_tpm_general_update_10109(&$sandbox) {
  $menu_link = MenuLinkContent::create([
    'title' => 'Oma käyttäjätilini',
    'link' => ['uri' => 'internal:/user/edit'],
    'menu_name' => 'account',
    'expanded' => TRUE,
    'weight' => -10,
  ]);
  $menu_link->save();
  $translation = $menu_link->addTranslation('en');
  $translation->set('title', 'My account');
  $translation->save();

  $translation = $menu_link->addTranslation('sv');
  $translation->set('title', 'Mitt konto');
  $translation->save();
}

/**
 * Fix paragraph parents and parent types to proper values.
 */
function hel_tpm_general_update_10110(&$sandbox) {
  $database = \Drupal::database();
  $node_field_refs = $database->select('node_revision__field_service_languages', 'nrf')
    ->fields('nrf', [
      'entity_id',
      'field_service_languages_target_id',
    ])
    ->execute()
    ->fetchAllAssoc('field_service_languages_target_id');
  $paragraph_tables = [
    'paragraphs_item_field_data',
    'paragraphs_item_revision_field_data',
  ];
  foreach ($node_field_refs as $row) {
    foreach ($paragraph_tables as $table) {
      $database->update($table)
        ->condition('id', $row->field_service_languages_target_id)
        ->condition('parent_type', 'paragraph')
        ->condition('parent_field_name', 'field_service_languages')
        ->fields([
          'parent_type' => 'node',
          'parent_id' => $row->entity_id,
        ])
        ->execute();
    }
  }
}

/**
 * Remove orphaned paragraphs with files.
 */
function hel_tpm_general_update_10111(&$sandbox) {
  $database = \Drupal::service('database');
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $storage = $entity_type_manager->getStorage('paragraph');

  $file_usage = $database->select('file_usage', 'f')
    ->fields('f')
    ->condition('f.type', 'paragraph')
    ->execute()
    ->fetchAll();

  if (empty($file_usage)) {
    return;
  }

  foreach ($file_usage as $item) {
    $paragraph = $storage->load($item->id);
    if (empty($paragraph)) {
      continue;
    }
    if (!_hel_tpm_general_paragraph_is_orphaned($paragraph)) {
      continue;
    }
    $paragraph->delete();
  }
}

/**
 * Checks if a paragraph entity is orphaned.
 *
 * A paragraph is considered orphaned if it does not have a valid parent entity
 * or if the parent entity does not contain the
 * field referenced by the paragraph.
 *
 * @param \Drupal\paragraphs\ParagraphInterface $paragraph
 *   The paragraph entity to check.
 *
 * @return bool
 *   TRUE if the paragraph is orphaned, FALSE otherwise.
 */
function _hel_tpm_general_paragraph_is_orphaned(ParagraphInterface $paragraph) {
  if (($parent = $paragraph->getParentEntity()) && $parent->hasField($paragraph->get('parent_field_name')->value)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Helper function to migrate service language paragraphs to node field.
 *
 * @param array $field_revisions
 *   Array of field reviesion.
 *
 * @return void
 *   Void
 *
 * @throws \Exception
 */
function _hel_tpm_general_migrate_service_languages($field_revisions) {
  $database = \Drupal::database();
  $tables = ['node_revision__field_service_languages'];

  $field_service_languages_rows = [];
  foreach ($field_revisions as $field_revision) {
    $paragraphs_service_languages = $database->select('paragraph_revision__field_service_languages', 'p')
      ->fields('p')
      ->condition('p.revision_id', $field_revision->field_service_time_and_location_target_revision_id)
      ->orderBy('p.revision_id')
      ->execute()->fetchAll();

    if (empty($paragraphs_service_languages)) {
      continue;
    }

    foreach ($paragraphs_service_languages as $i => $r) {
      $r->bundle = $field_revision->bundle;
      $r->entity_id = $field_revision->entity_id;
      $r->revision_id = $field_revision->revision_id;
      $field_service_languages_rows[$r->field_service_languages_target_id] = (array) $r;
    }

  }

  if (_hel_tpm_general_is_default($field_revisions[0]->revision_id)) {
    $tables[] = 'node__field_service_languages';
  }

  if (empty($field_service_languages_rows)) {
    return;
  }

  $field_service_languages_rows = array_values($field_service_languages_rows);
  // Re-delta rows.
  foreach ($field_service_languages_rows as $i => &$r) {
    $r['delta'] = $i;
  }

  foreach ($tables as $table) {
    $query = $database->insert($table)
      ->fields(array_keys($field_service_languages_rows[0]));
    foreach ($field_service_languages_rows as $row) {
      $query->values($row);
    }
    $query->execute();
  }

}

/**
 * Helper function to migrate paragraph fields to node fields.
 *
 * @param \Drupal\Core\Entity\EntityInterface $paragraph
 *   Paragraph entityinterface.
 * @param string $paragraph_field
 *   Name of field in paragraph.
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   Node interface.
 * @param string $internal_file_field
 *   Name of the internal file field.
 *
 * @return void
 *   -
 */
function _hel_tpm_general_migrate_paragraph_field($paragraph, $paragraph_field, &$node, $internal_file_field) {
  $files = $paragraph->{$paragraph_field}->getValue();
  $node->set($internal_file_field, $files);
}

/**
 * Helper function to convert paragraphs with one inner field to normal fields.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param array $paragraphs_to_fields
 *   Array keys are paragraph field names and values new field names.
 * @param string $paragraph_inner_field
 *   The name of the original field inside the paragraph.
 *
 * @return void
 *   Void.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _hel_tpm_general_convert_paragraphs_inner_field(Node $node, array $paragraphs_to_fields, string $paragraph_inner_field): void {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $node_changed = $node->getChangedTime();
  $languages = $node->getTranslationLanguages();
  $revisionIds = $node_storage->revisionIds($node);
  $revisionIds = array_reverse($revisionIds);
  foreach ($languages as $langcode => $language) {
    foreach ($revisionIds as $vid) {
      /** @var \Drupal\node\Entity\Node $revision */
      $revision = $node_storage->loadRevision($vid);
      if ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected()) {
        $revision = $revision->getTranslation($langcode);
        foreach ($paragraphs_to_fields as $paragraph_name => $field_name) {
          $revision = _hel_tpm_general_move_paragraph_inner_to_field($revision, $langcode, $paragraph_name, $paragraph_inner_field, $field_name);
        }
        $revision->setNewRevision(FALSE);
        // Without setSyncing(TRUE) new revisions would be created despite using
        // setNewRevision(FALSE). However, this requires using the fix from
        // https://www.drupal.org/i/3338260 for skipping recalculating the
        // revision translations.
        $revision->setSyncing(TRUE);
        // Preserve revision changed time. This requires some change, e.g.
        // adding one second to the original value.
        $revision->setChangedTime($revision->getChangedTime() + 1);
        $revision->save();
        // Only go through most recent revisions until the default revision is
        // processed.
        if ($revision->wasDefaultRevision()) {
          break;
        }
      }
    }
  }

  // Also separately preserve default revision's changed time.
  /** @var \Drupal\node\Entity\Node $update_node */
  $update_node = $node_storage->load($node->id());
  if ($node_changed !== $update_node->getChangedTime()) {
    $update_node->setNewRevision(FALSE);
    $update_node->setSyncing(TRUE);
    $update_node->setChangedTime($node_changed + 1);
    $update_node->save();
  }
}

/**
 * Helper function to set old paragraph with one inner field to normal field.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param string $paragraphs_field
 *   The name of the original paragraph.
 * @param string $paragraph_inner_field
 *   The name of the original field inside the paragraph.
 * @param string $new_field
 *   The name of the field.
 *
 * @return \Drupal\node\Entity\Node
 *   The node object.
 */
function _hel_tpm_general_move_paragraph_inner_to_field(Node $node, string $langcode, string $paragraphs_field, string $paragraph_inner_field, string $new_field): Node {
  if (!empty($node->{$paragraphs_field}->entity)) {
    if ($node->{$paragraphs_field}->entity->hasTranslation($langcode)) {
      $paragraph = $node->{$paragraphs_field}->entity->getTranslation($langcode);
      if (!empty($paragraph->{$paragraph_inner_field})) {
        $inner_value = $paragraph->{$paragraph_inner_field}->getValue();
        $node->set($new_field, $inner_value);
      }
    }
  }
  return $node;
}

/**
 * Helper function to build language array for revisions.
 *
 * @param array $stp_revisions
 *   Array of revision.
 *
 * @return array
 *   Array of languages.
 */
function _hel_tpm_general_build_language_collection($stp_revisions) {
  $languages = [];
  $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  foreach ($stp_revisions as $stp_rev) {
    $rev = $storage->loadRevision($stp_rev->field_service_languages_target_revision_id);
    // Initialize empty key for language paragraph.
    if (empty($languages[$stp_rev->entity_id])) {
      $languages[$stp_rev->entity_id] = [];
    }
    $tid = $rev->get('field_language')->target_id;
    if (!empty($tid)) {
      $languages[$stp_rev->entity_id][$stp_rev->revision_id][]['target_id'] = $tid;
    }

  }
  return $languages;
}

/**
 * Helper function to check if revision id is default revision.
 *
 * @param int $revision_id
 *   Revision id.
 *
 * @return bool
 *   Return true if given revision id is default revision.
 */
function _hel_tpm_general_is_default($revision_id) {
  $default = \Drupal::database()->select('node_field_data', 'n')
    ->fields('n')
    ->condition('n.vid', $revision_id)
    ->countQuery()
    ->execute()
    ->fetchField();
  return !((int) $default === 0);
}
