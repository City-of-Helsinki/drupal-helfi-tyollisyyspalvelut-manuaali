<?php

/**
 * @file
 * Module file for hel_tpm_general.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\RevisionableStorageInterface;

/**
 * Implements hook_theme().
 */
function hel_tpm_general_theme($existing, $type, $theme, $path) {
  return [
    'hel_tpm_general_icon_field' => [
      'template' => 'icon-field',
      'variables' => [
        'icon' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function hel_tpm_general_entity_extra_field_info() {
  $extra = [];

  $extra['node']['service']['display']['view_mode_switcher'] = [
    'label' => t('View mode switcher'),
    'description' => t('Provides element to switch internal view mode'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function hel_tpm_general_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('view_mode_switcher')) {
    $link = _hel_tpm_general_create_switcher_links($entity, $view_mode);
    if (empty($link)) {
      return;
    }
    $build['view_mode_switcher'] = [
      '#type' => 'markup',
      '#markup' => $link->toString(),
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function hel_tpm_general_file_access($file_entity, $operation, $account) {
  $ops = ['download', 'view'];
  $access_result = AccessResult::neutral();
  $revision_access_checker = \Drupal::service('access_check.entity');
  $route_matcher = \Drupal::routeMatch();

  $file_usage = file_get_file_references($file_entity);
  // We are interested only in download operation.
  if (!in_array($operation, $ops) ) {
    return $access_result->addCacheableDependency($file_entity);
  }

  // If file has no usage data return neutral.
  if (empty($file_usage)) {
    return $access_result->addCacheableDependency($file_entity);
  }

  foreach ($file_usage as $field => $referencing_entities) {
    foreach ($referencing_entities as $entity_type => $entities) {
      foreach ($entities as $entity) {
        $url = $entity->toUrl();
        $entity_access = $revision_access_checker->access($entity, $account);
        $access = $entity->{$field}->access();
        if ($entity_access === TRUE && $access === TRUE) {
          $access_result = AccessResult::allowed();
          break 3;
        }
      }
    }
  }

  return $access_result->addCacheableDependency($file_entity);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_general_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#value'] = \Drupal::service('password_generator')->generate();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_general_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#type'] = 'hidden';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hel_tpm_general_form_user_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['name']['#disabled'] = TRUE;
  $form['#validate'][] = 'hel_tpm_general_form_user_post_validate';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hel_tpm_general_user_presave($entity) {
  // Don't autogenerate admin user name.
  if ($entity->id() == 1) {
    return;
  }
  $username = _hel_tpm_general_generate_username($entity);
  // No point updating anything if the generated name was just the same.
  if ($entity->label() == $username) {
    return;
  }
  $entity->setUsername($username);
}

/**
 * Remove the errors related to 'name' field.
 *
 * @param array $form
 *   Form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function hel_tpm_general_form_user_post_validate(array &$form, FormStateInterface $form_state) {
  $errors = $form_state->getErrors();
  unset($errors['name']);
  $form_state->clearErrors();
  foreach ($errors as $field => $value) {
    $form_state->setErrorByName($field, $value);
  }
}

/**
 * Helper function to generate username.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   User entity.
 *
 * @return false|string
 *   Formatted username.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _hel_tpm_general_generate_username(EntityInterface $entity) {
  $original_username = strstr($entity->getEmail(), '@', TRUE);
  $username = $original_username;
  $i = 0;
  while (_hel_tpm_general_username_exists($username, $entity->id())) {
    $username = $original_username . '-' . $i;
    $i++;
  }
  return $username;
}

/**
 * Helper function to check if username exists.
 *
 * @param string $username
 *   Username to check against.
 * @param int $entity_id
 *   Current user id.
 *
 * @return bool
 *   Returns true if user exists.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _hel_tpm_general_username_exists(string $username, int $entity_id = NULL) {
  $storage = \Drupal::entityTypeManager()->getStorage('user');
  $query = $storage->getQuery()
    ->accessCheck(FALSE)
    ->condition('name', $username);
  if ($entity_id) {
    $query->condition('uid', $entity_id, '<>');
  }
  $count = $query->count()
    ->execute();

  return $count > 0;
}

/**
 * Helper function to create switcher link.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Service node.
 * @param string $view_mode
 *   Requested view mode for current service.
 *
 * @return \Drupal\Core\Link|null
 *   Returns either link to view mode or null.
 */
function _hel_tpm_general_create_switcher_links(EntityInterface $entity, string $view_mode) {
  $user = \Drupal::currentUser();
  $routes = [
    'internal' => [
      'route' => 'entity.node.canonical',
      'label' => 'Customer guide',
    ],
    'full' => [
      'route' => 'entity.node.canonical.internal',
      'label' => 'Internal guide',
    ],
  ];

  if (!$user->hasPermission('access internal service fields')) {
    return NULL;
  }

  if (empty($routes[$view_mode])) {
    return NULL;
  }

  $route = $routes[$view_mode];

  return Link::createFromRoute(t($route['label']), $route['route'], ['node' => $entity->id()]);

}
