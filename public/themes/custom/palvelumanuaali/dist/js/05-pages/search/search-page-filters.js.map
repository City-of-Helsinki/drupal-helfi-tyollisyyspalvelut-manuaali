{"version":3,"file":"js/05-pages/search/search-page-filters.js","mappings":"kBAAA,IAAWA,EAAGC,EAAQC,EAAXF,EA6KRG,OA7KWF,EA6KHA,OA7KWC,EA6KHE,KA3KjBH,EAAOI,UAAUC,kBAAoB,CACnCC,OAAM,SAACC,GASL,SAASC,EAA0BC,EAAeC,GAAc,IAC1DC,EAuBN,SAA6BF,GAAgB,IACvCG,EAoCN,SAAyBH,GACvB,IAAII,EAAe,GAQnB,OAPAd,EAAE,aAAcU,GAAeK,MAAK,WAClC,IAAIC,EAAS,CACXC,OAAUb,KACVc,MAASlB,EAAEI,MAAMe,cAEnBL,EAAaM,KAAKJ,EACpB,IACOF,CACT,CA9CgBO,CAAgBX,GAC1BY,EAAetB,EAAEU,GAAea,aAEhCC,EAAiBF,EACjBG,EAAO,GACPC,EAAa,EAsBjB,OArBAD,EAAKC,GAAc,GAEnB1B,EAAEa,GAASE,MAAK,SAASY,EAAOC,GAC9BJ,GAAkCI,EAAKV,MACvCU,EAAKC,UAAYL,EACK,GAAlBA,IAMFA,EAAiBF,EAAeM,EAAKV,MACrCU,EAAKC,UAAYL,EAGjBE,IACAD,EAAKC,GAAc,IATnBD,EAAKC,GAAYN,KAAKQ,EAa1B,IACOH,CACT,CApDmBK,CAAoBpB,GAGrCV,EAAEY,GAAYG,MAAK,SAASgB,EAAGC,GAC7BhC,EAAEgC,GAAWjB,MAAK,SAASkB,EAAGL,GAAO,OAC/BG,EAHK,OAIP/B,EAAE4B,EAAKX,QAAQiB,YAGG,SAAhBvB,EACFX,EAAE4B,EAAKX,QAAQkB,OAEfnC,EAAE4B,EAAKX,QAAQiB,OACnB,GACF,GACF,CAmFA,SAASE,EAAgBzB,GACvB,IAAI0B,EAAW,OACK,SAAhB1B,IACF0B,EAAW,SACbrC,EAAE,qBAAqBsC,KAAK,gBAAiBD,EAC/C,CAQA,SAASE,EAAiB7B,GACxB,IAAIC,EAAc6B,aAAaC,QAAQ,4BAClC9B,IACHA,EAAc,QAEhBX,EAAEU,GAAe4B,KAAK,oBAAqB3B,GAC3CF,EAA0BC,EAAeC,GACzCyB,EAAgBzB,EAClB,CAKAX,EAAE0C,UAAUC,OAAM,YA/ClB,SAAuBjC,GACrBV,EAAE,qBAAqB4C,OAAM,WAC3B,IAAIjC,EAAcX,EAAEU,GAAe4B,KAAK,qBAEtC3B,EADkB,SAAhBA,EACY,QAEA,OAEhBX,EAAEU,GAAe4B,KAAK,oBAAqB3B,GAC3C6B,aAAaK,QAAQ,2BAA4BlC,GACjDF,EAA0BC,EAAeC,GACzCyB,EAAgBzB,EAClB,GACF,CAmCEmC,CAAc,iDAChB,IAKA9C,EAAEE,GAAQ6C,GAAG,QAAQ,WAGnBC,YAAW,WACTT,EAAiB,iDACnB,GAAG,GACL,IAKAvC,EAAEE,GAAQ6C,GAAG,UAAU,WACrBR,EAAiB,iDACnB,IAKAvC,EAAE0C,UAAUO,cAAa,WACvB,IAAIC,EAAQC,KAAK,qBAAqB,iDAAiB3C,GAClC,IAAjB0C,EAAME,QAGVJ,YAAW,WACTT,EAAiBW,EACnB,GAAG,KACL,GACF,E,ICvKgB","sources":["webpack://palvelumanuaali/./components/05-pages/search/search-page-filters.js","webpack://palvelumanuaali/webpack/startup"],"sourcesContent":["(function ($, Drupal, window) {\n\n  Drupal.behaviors.searchPageFilters = {\n    attach(context, settings) {\n\n      const FILTER_WRAPPER = '.service-search .exposed-filters .main-filters';\n      /**\n       * Provides logic for showing and hiding additional filters.\n       *\n       * @param filterWrapper\n       * @param isCollapsed\n       */\n      function showHideAdditionalFilters(filterWrapper, isCollapsed) {\n        let filterRows = calculateFilterRows(filterWrapper);\n        // Maximum number of rows when filters are collapsed\n        let minRows= 1;\n        $(filterRows).each(function(i, filterRow) {\n          $(filterRow).each(function(j, item) {\n            if (i < minRows) {\n              $(item.object).show();\n              return;\n            }\n            if (isCollapsed === \"true\")\n              $(item.object).hide();\n            else\n              $(item.object).show();\n          })\n        })\n      }\n\n      /**\n       * Calculate filter rows from element widths.\n       *\n       * @param filterWrapper\n       * @returns {*[]}\n       */\n      function calculateFilterRows(filterWrapper) {\n        let filters = getFilterWidths(filterWrapper);\n        let wrapperWidth = $(filterWrapper).innerWidth();\n        // We want 2 rows so we want 2x wrapper width.\n        let containerWidth = wrapperWidth;\n        let rows = [];\n        let currentRow = 0;\n        rows[currentRow] = [];\n\n        $(filters).each(function(index, item) {\n          containerWidth = containerWidth - item.width;\n          item.row_width = containerWidth;\n          if (containerWidth >= 0) {\n            // Add item to current row.\n            rows[currentRow].push(item);\n          }\n          else {\n            // Reset container width and substract item width.\n            containerWidth = wrapperWidth - item.width;\n            item.row_width = containerWidth;\n\n            // Add new row.\n            currentRow++;\n            rows[currentRow] = [];\n            // Add current item to new row.\n            rows[currentRow].push(item);\n          }\n        });\n        return rows;\n      }\n\n      /**\n       * Returns array of filters and their element widths.\n       *\n       * @param filterWrapper\n       * @returns {*[]}\n       */\n      function getFilterWidths(filterWrapper) {\n        let filterWidths = [];\n        $('.form-item', filterWrapper).each(function(index, width) {\n          let filter = {\n            \"object\": this,\n            \"width\": $(this).outerWidth()\n          }\n          filterWidths.push(filter);\n        });\n        return filterWidths;\n      }\n\n      /**\n       * Filter toggler.\n       *\n       * @param filterWrapper\n       */\n      function toggleFilters(filterWrapper) {\n        $('.collapse-toggler').click(function() {\n          let isCollapsed = $(filterWrapper).attr('data-is-collapsed');\n          if (isCollapsed === \"true\")\n            isCollapsed = \"false\";\n          else\n            isCollapsed = \"true\";\n\n          $(filterWrapper).attr('data-is-collapsed', isCollapsed);\n          localStorage.setItem('searchFiltersIsCollapsed', isCollapsed);\n          showHideAdditionalFilters(filterWrapper, isCollapsed);\n          setAriaExpanded(isCollapsed);\n        });\n      }\n\n      /**\n       * Set aria-expanded value for collapse-toggler.\n       *\n       * @param elem\n       * @param isCollapsed\n       */\n      function setAriaExpanded(isCollapsed) {\n        let expanded = \"true\";\n        if (isCollapsed === \"true\")\n          expanded = \"false\"\n        $(\".collapse-toggler\").attr('aria-expanded', expanded);\n      }\n\n      /**\n       * Initialize filter toggling.\n       *\n       * @param filterWrapper\n       * @returns {boolean}\n       */\n      function initFilterToggle(filterWrapper) {\n        let isCollapsed = localStorage.getItem('searchFiltersIsCollapsed');\n        if (!isCollapsed) {\n          isCollapsed = \"true\";\n        }\n        $(filterWrapper).attr('data-is-collapsed', isCollapsed);\n        showHideAdditionalFilters(filterWrapper, isCollapsed);\n        setAriaExpanded(isCollapsed)\n      }\n\n      /**\n       * Set filter toggler on document ready.\n       */\n      $(document).ready(function() {\n        toggleFilters(FILTER_WRAPPER);\n      })\n\n      /**\n       * Initialize filter toggle on page load.\n       */\n      $(window).on('load', function() {\n        // Without this bubblegum fix elements get wrong widths\n        // due to flex items.\n        setTimeout(function() {\n          initFilterToggle(FILTER_WRAPPER);\n        }, 0.2);\n      });\n\n      /**\n       * Toggle filters on window resize event.\n       */\n      $(window).on('resize', function() {\n        initFilterToggle(FILTER_WRAPPER);\n      });\n\n      /**\n       * Set filters on ajax complete.\n       */\n      $(document).ajaxComplete(function (event, xhr, settings) {\n        let elems = once('bef-filter-wrapper', FILTER_WRAPPER, context);\n        if (elems.length === 0) {\n          return;\n        }\n        setTimeout(function() {\n          initFilterToggle(elems);\n        }, 0.001)\n      });\n    }\n  }\n})(jQuery, Drupal, this);\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[6155]();\n"],"names":["$","Drupal","window","jQuery","this","behaviors","searchPageFilters","attach","context","showHideAdditionalFilters","filterWrapper","isCollapsed","filterRows","filters","filterWidths","each","filter","object","width","outerWidth","push","getFilterWidths","wrapperWidth","innerWidth","containerWidth","rows","currentRow","index","item","row_width","calculateFilterRows","i","filterRow","j","show","hide","setAriaExpanded","expanded","attr","initFilterToggle","localStorage","getItem","document","ready","click","setItem","toggleFilters","on","setTimeout","ajaxComplete","elems","once","length"],"sourceRoot":""}