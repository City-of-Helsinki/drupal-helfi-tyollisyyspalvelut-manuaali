From 621a92db22a50e8c0122ce0e3c7a618f5d20fd98 Mon Sep 17 00:00:00 2001
From: Scott Euser <scotteuser@gmail.com>
Date: Fri, 2 Aug 2024 08:01:18 +0100
Subject: [PATCH 1/3] Backport of current state of 11.x branch to 10.3

---
 .../DefaultSelection.php                      | 26 +++++++++++++------
 .../config/schema/views.filter.schema.yml     | 20 ++++++++++++++
 .../Plugin/views/filter/EntityReference.php   |  1 +
 ...iews.view.test_filter_entity_reference.yml |  1 +
 .../views.view.test_entity_reference.yml      |  1 +
 .../views_test_entity_reference.info.yml      |  1 +
 .../views_test_entity_reference.module        |  1 +
 .../Handler/FilterEntityReferenceTest.php     |  1 +
 .../FilterEntityReferenceWebTest.php          |  1 +
 .../FilterEntityReferenceTest.php             |  1 +
 .../src/Traits/FilterEntityReferenceTrait.php |  1 +
 11 files changed, 47 insertions(+), 8 deletions(-)
 create mode 100644 core/modules/views/src/Plugin/views/filter/EntityReference.php
 create mode 100644 core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
 create mode 100644 core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
 create mode 100644 core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
 create mode 100644 core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
 create mode 100644 core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
 create mode 100644 core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
 create mode 100644 core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
 create mode 100644 core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php

diff --git a/core/lib/Drupal/Core/Entity/Plugin/EntityReferenceSelection/DefaultSelection.php b/core/lib/Drupal/Core/Entity/Plugin/EntityReferenceSelection/DefaultSelection.php
index 17dcac0a90e9..afe418450ae4 100644
--- a/core/lib/Drupal/Core/Entity/Plugin/EntityReferenceSelection/DefaultSelection.php
+++ b/core/lib/Drupal/Core/Entity/Plugin/EntityReferenceSelection/DefaultSelection.php
@@ -164,6 +164,7 @@ public function buildConfigurationForm(array $form, FormStateInterface $form_sta
     $entity_type_id = $configuration['target_type'];
     $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
     $bundles = $this->entityTypeBundleInfo->getBundleInfo($entity_type_id);
+    $selected_bundles = [];
 
     if ($entity_type->hasKey('bundle')) {
       $bundle_options = [];
@@ -200,6 +201,7 @@ public function buildConfigurationForm(array $form, FormStateInterface $form_sta
           'class' => ['js-hide'],
         ],
         '#submit' => [[EntityReferenceItem::class, 'settingsAjaxSubmit']],
+        '#element_validate' => [[static::class, 'validateTargetBundlesUpdate']],
       ];
     }
     else {
@@ -208,6 +210,7 @@ public function buildConfigurationForm(array $form, FormStateInterface $form_sta
         '#value' => [],
       ];
     }
+    $form['target_bundles']['#element_validate'][] = [static::class, 'validateTargetBundles'];
 
     if ($entity_type->entityClassImplements(FieldableEntityInterface::class)) {
       $options = $entity_type->hasKey('bundle') ? $selected_bundles : $bundles;
@@ -224,7 +227,11 @@ public function buildConfigurationForm(array $form, FormStateInterface $form_sta
           // @todo Use property labels instead of the column name.
           if (count($columns) > 1) {
             foreach ($columns as $column_name => $column_info) {
-              $fields[$field_name . '.' . $column_name] = $this->t('@label (@column)', ['@label' => $field_definition->getLabel(), '@column' => $column_name]);
+              $fields[$field_name . '.' . $column_name] = $this->t('@label (@column)',
+               [
+                 '@label' => $field_definition->getLabel(),
+                 '@column' => $column_name,
+               ]);
             }
           }
           else {
@@ -314,22 +321,25 @@ public function buildConfigurationForm(array $form, FormStateInterface $form_sta
   }
 
   /**
-   * {@inheritdoc}
+   * Validates a target_bundles element.
    */
-  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
-    parent::validateConfigurationForm($form, $form_state);
-
+  public static function validateTargetBundles($element, FormStateInterface $form_state, $form) {
     // If no checkboxes were checked for 'target_bundles', store NULL ("all
     // bundles are referenceable") rather than empty array ("no bundle is
     // referenceable" - typically happens when all referenceable bundles have
     // been deleted).
-    if ($form_state->getValue(['settings', 'handler_settings', 'target_bundles']) === []) {
-      $form_state->setValue(['settings', 'handler_settings', 'target_bundles'], NULL);
+    if ($form_state->getValue($element['#parents']) === []) {
+      $form_state->setValueForElement($element, NULL);
     }
+  }
 
+  /**
+   * Validates a target_bundles_update element.
+   */
+  public static function validateTargetBundlesUpdate($element, FormStateInterface $form_state, $form) {
     // Don't store the 'target_bundles_update' button value into the field
     // config settings.
-    $form_state->unsetValue(['settings', 'handler_settings', 'target_bundles_update']);
+    $form_state->unsetValue($element['#parents']);
   }
 
   /**
diff --git a/core/modules/views/config/schema/views.filter.schema.yml b/core/modules/views/config/schema/views.filter.schema.yml
index 1eb09007aef9..6eb22b82f996 100644
--- a/core/modules/views/config/schema/views.filter.schema.yml
+++ b/core/modules/views/config/schema/views.filter.schema.yml
@@ -128,6 +128,26 @@ views.filter.many_to_one:
       type: boolean
       label: 'Reduce duplicate'
 
+views.filter.entity_reference:
+  type: views.filter.many_to_one
+  label: 'Entity reference'
+  constraints:
+    FullyValidatable: ~
+  mapping:
+    sub_handler:
+      type: string
+      label: 'Selection handler'
+      constraints:
+        PluginExists:
+          manager: plugin.manager.entity_reference_selection
+          interface: 'Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface'
+    widget:
+      type: string
+      label: 'Selection type'
+    sub_handler_settings:
+      type: entity_reference_selection.[%parent.sub_handler]
+      label: 'Selection handler settings'
+
 views.filter.standard:
   type: views_filter
   label: 'Standard'
diff --git a/core/modules/views/src/Plugin/views/filter/EntityReference.php b/core/modules/views/src/Plugin/views/filter/EntityReference.php
new file mode 100644
index 000000000000..01e66f0bb70c
--- /dev/null
+++ b/core/modules/views/src/Plugin/views/filter/EntityReference.php
@@ -0,0 +1 @@
+<?php&#10&#10namespace Drupal\views\Plugin\views\filter;&#10&#10use Drupal\Component\Plugin\DependentPluginInterface;&#10use Drupal\Component\Utility\NestedArray;&#10use Drupal\Core\Entity\Element\EntityAutocomplete;&#10use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;&#10use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;&#10use Drupal\Core\Entity\EntityTypeInterface;&#10use Drupal\Core\Entity\EntityTypeManagerInterface;&#10use Drupal\Core\Form\FormStateInterface;&#10use Drupal\Core\Form\SubformState;&#10use Drupal\Core\Messenger\MessengerInterface;&#10use Drupal\Core\Render\Element;&#10use Drupal\views\FieldAPIHandlerTrait;&#10use Drupal\views\Plugin\EntityReferenceSelection\ViewsSelection;&#10use Drupal\views\Plugin\views\display\DisplayPluginBase;&#10use Drupal\views\ViewExecutable;&#10use Symfony\Component\DependencyInjection\ContainerInterface;&#10&#10/**&#10 * Filters a view by entity references.&#10 *&#10 * @ingroup views_filter_handlers&#10 *&#10 * @ViewsFilter("entity_reference")&#10 */&#10class EntityReference extends ManyToOne {&#10&#10  use FieldAPIHandlerTrait;&#10&#10  /**&#10   * Type for the autocomplete filter format.&#10   */&#10  const WIDGET_AUTOCOMPLETE = 'autocomplete';&#10&#10  /**&#10   * Type for the select list filter format.&#10   */&#10  const WIDGET_SELECT = 'select';&#10&#10  /**&#10   * Max number of entities in the select widget.&#10   */&#10  const WIDGET_SELECT_LIMIT = 100;&#10&#10  /**&#10   * The subform prefix.&#10   */&#10  const SUBFORM_PREFIX = 'reference_';&#10&#10  /**&#10   * The all value.&#10   */&#10  const ALL_VALUE = 'All';&#10&#10  /**&#10   * The selection handlers available for the target entity ID of the filter.&#10   *&#10   * @var array|null&#10   */&#10  protected ?array $handlerOptions = NULL;&#10&#10  /**&#10   * Validated exposed input that will be set as the input value.&#10   *&#10   * If the select list widget is chosen.&#10   *&#10   * @var array&#10   */&#10  protected array $validatedExposedInput;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function init(ViewExecutable $view, DisplayPluginBase $display, ?array &$options = NULL): void {&#10    parent::init($view, $display, $options);&#10    if (empty($this->definition['field_name'])) {&#10      $this->definition['field_name'] = $options['field'];&#10    }&#10&#10    $this->definition['options callback'] = [$this, 'getValueOptionsCallback'];&#10    $this->definition['options arguments'] = [$this->getSelectionHandler($this->options['sub_handler'])];&#10  }&#10&#10  /**&#10   * Constructs an EntityReference object.&#10   */&#10  public function __construct(&#10    array $configuration,&#10    $plugin_id,&#10    $plugin_definition,&#10    protected SelectionPluginManagerInterface $selectionPluginManager,&#10    protected EntityTypeManagerInterface $entityTypeManager,&#10    MessengerInterface $messenger,&#10  ) {&#10    parent::__construct($configuration, $plugin_id, $plugin_definition);&#10    $this->setMessenger($messenger);&#10&#10    // @todo Unify 'entity field'/'field_name' instead of converting back and&#10    // forth. https://www.drupal.org/node/2410779&#10    if (isset($this->definition['entity field'])) {&#10      $this->definition['field_name'] = $this->definition['entity field'];&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): EntityReference {&#10    return new static(&#10      $configuration,&#10      $plugin_id,&#10      $plugin_definition,&#10      $container->get('plugin.manager.entity_reference_selection'),&#10      $container->get('entity_type.manager'),&#10      $container->get('messenger'),&#10    );&#10  }&#10&#10  /**&#10   * Gets the entity reference selection handler.&#10   *&#10   * @param string|null $sub_handler&#10   *   The sub handler to get an instance of or NULL for the current selection.&#10   *&#10   * @return \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface&#10   *   The selection handler plugin instance.&#10   */&#10  protected function getSelectionHandler(?string $sub_handler = NULL): SelectionInterface {&#10    // Default values for the handler.&#10    $handler_settings = $this->options['sub_handler_settings'] ?? [];&#10    $handler_settings['handler'] = $sub_handler;&#10    $handler_settings['target_type'] = $this->getReferencedEntityType()->id();&#10    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface */&#10    return $this->selectionPluginManager->getInstance($handler_settings);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function defineOptions(): array {&#10    $options = parent::defineOptions();&#10    $options['sub_handler'] = [&#10      'default' => 'default:' . $this->getReferencedEntityType()->id(),&#10    ];&#10    $options['sub_handler_settings'] = ['default' => []];&#10    $options['widget'] = ['default' => static::WIDGET_AUTOCOMPLETE];&#10    return $options;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function hasExtraOptions(): bool {&#10    return TRUE;&#10  }&#10&#10  /**&#10   * Get all selection plugins for this entity type.&#10   *&#10   * @return string[]&#10   *   The selection handlers available for the target entity ID of the filter.&#10   */&#10  protected function getSubHandlerOptions(): array {&#10    if ($this->handlerOptions) {&#10      return $this->handlerOptions;&#10    }&#10    $entity_type = $this->getReferencedEntityType();&#10    $selection_plugins = $this->selectionPluginManager->getSelectionGroups($entity_type->id());&#10    $this->handlerOptions = [];&#10    foreach (array_keys($selection_plugins) as $selection_group_id) {&#10      // We only display base plugins (e.g. 'default', 'views', ...).&#10      if (array_key_exists($selection_group_id, $selection_plugins[$selection_group_id])) {&#10        $this->handlerOptions[$selection_group_id] = (string) $selection_plugins[$selection_group_id][$selection_group_id]['label'];&#10      }&#10      elseif (array_key_exists($selection_group_id . ':' . $entity_type->id(), $selection_plugins[$selection_group_id])) {&#10        $selection_group_plugin = $selection_group_id . ':' . $entity_type->id();&#10        $this->handlerOptions[$selection_group_plugin] = (string) $selection_plugins[$selection_group_id][$selection_group_plugin]['base_plugin_label'];&#10      }&#10    }&#10    return $this->handlerOptions;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function buildExtraOptionsForm(&$form, FormStateInterface $form_state): void {&#10    $form['sub_handler'] = [&#10      '#type' => 'select',&#10      '#title' => $this->t('Reference method'),&#10      '#options' => $this->getSubHandlerOptions(),&#10      '#default_value' => $this->options['sub_handler'],&#10      '#required' => TRUE,&#10    ];&#10&#10    // We store the settings from any sub handler in sub_handler_settings, but&#10    // in this form, we have multiple sub handlers conditionally displayed.&#10    // Copy the active sub_handler_settings into the handler specific settings&#10    // to set the defaults to match the saved options on build.&#10    if (!empty($this->options['sub_handler']) && !empty($this->options['sub_handler_settings'])) {&#10      $this->options[static::SUBFORM_PREFIX . $this->options['sub_handler']] = $this->options['sub_handler_settings'];&#10    }&#10&#10    foreach ($this->getSubHandlerOptions() as $sub_handler => $sub_handler_label) {&#10      $subform_key = static::SUBFORM_PREFIX . $sub_handler;&#10      $subform = [&#10        '#type' => 'fieldset',&#10        '#title' => $this->t('Reference type "@type"', [&#10          '@type' => $sub_handler_label,&#10        ]),&#10        '#tree' => TRUE,&#10        '#parents' => [&#10          'options',&#10          $subform_key,&#10        ],&#10        // Make the sub handler settings conditional on the selected selection&#10        // handler.&#10        '#states' => [&#10          'visible' => [&#10            'select[name="options[sub_handler]"]' => ['value' => $sub_handler],&#10          ],&#10        ],&#10      ];&#10&#10      // Build the sub form and sub for state.&#10      $selection_handler = $this->getSelectionHandler($sub_handler);&#10      if (!empty($this->options[$subform_key])) {&#10        $selection_config = $selection_handler->getConfiguration();&#10        $selection_config = NestedArray::mergeDeepArray([&#10          $selection_config,&#10          $this->options[$subform_key],&#10        ], TRUE);&#10        $selection_handler->setConfiguration($selection_config);&#10      }&#10      $subform_state = SubformState::createForSubform($subform, $form, $form_state);&#10      $sub_handler_settings = $selection_handler->buildConfigurationForm($subform, $subform_state);&#10&#10      if ($selection_handler instanceof ViewsSelection) {&#10        if (isset($sub_handler_settings['view']['no_view_help'])) {&#10          // If there are no views with entity reference displays,&#10          // ViewsSelection still validates the view.&#10          // This will prevent form config extra form submission,&#10          // so we remove it here.&#10          unset($sub_handler_settings['view']['#element_validate']);&#10        }&#10      }&#10      else {&#10        // Remove unnecessary and inappropriate handler settings from the&#10        // filter config form.&#10        $sub_handler_settings['target_bundles_update']['#access'] = FALSE;&#10        $sub_handler_settings['auto_create']['#access'] = FALSE;&#10        $sub_handler_settings['auto_create_bundle']['#access'] = FALSE;&#10      }&#10&#10      $subform = NestedArray::mergeDeepArray([&#10        $subform,&#10        $sub_handler_settings,&#10      ], TRUE);&#10&#10      $form[$subform_key] = $subform;&#10      $this->cleanUpSubformChildren($form[$subform_key]);&#10    }&#10&#10    $form['widget'] = [&#10      '#type' => 'radios',&#10      '#title' => $this->t('Selection type'),&#10      '#default_value' => $this->options['widget'],&#10      '#options' => [&#10        static::WIDGET_SELECT => $this->t('Select list'),&#10        static::WIDGET_AUTOCOMPLETE => $this->t('Autocomplete'),&#10      ],&#10      '#description' => $this->t('For performance and UX reasons, the maximum count of selectable entities for the "Select list" selection type is limited to @count. If more is expected, select "Autocomplete" instead.', [&#10        '@count' => static::WIDGET_SELECT_LIMIT,&#10      ]),&#10    ];&#10  }&#10&#10  /**&#10   * Clean up subform children for properties that could cause problems.&#10   *&#10   * Views modal forms do not work with required or ajax elements.&#10   *&#10   * @param array $element&#10   *   The form element.&#10   */&#10  protected function cleanUpSubformChildren(array &$element): void {&#10    // Remove the required property to prevent focus errors.&#10    if (isset($element['#required']) && $element['#required']) {&#10      $element['#required'] = FALSE;&#10      $element['#element_validate'][] = [static::class, 'validateRequired'];&#10    }&#10&#10    // Remove the ajax property as it does not work.&#10    if (!empty($element['#ajax'])) {&#10      unset($element['#ajax']);&#10    }&#10&#10    // Recursively apply to nested fields within the handler sub form.&#10    foreach (Element::children($element) as $delta) {&#10      $this->cleanUpSubformChildren($element[$delta]);&#10    }&#10  }&#10&#10  /**&#10   * Validates that a required field for a sub handler has a value.&#10   *&#10   * @param array $element&#10   *   The cardinality form render array.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The form state.&#10   */&#10  public static function validateRequired(array &$element, FormStateInterface $form_state): void {&#10    if (!empty($element['value'])) {&#10      return;&#10    }&#10&#10    // Config extra handler does not output validation messages and&#10    // closes the modal with no feedback to the user.&#10    // @todo https://www.drupal.org/project/drupal/issues/3163740.&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validateExtraOptionsForm($form, FormStateInterface $form_state): void {&#10    $options = $form_state->getValue('options');&#10    $sub_handler = $options['sub_handler'];&#10    $subform = $form[static::SUBFORM_PREFIX . $sub_handler];&#10    $subform_state = SubformState::createForSubform($subform, $form, $form_state);&#10&#10    // Copy handler_settings from options to settings to be compatible with&#10    // selection plugins.&#10    $subform_options = $form_state->getValue([&#10      'options',&#10      static::SUBFORM_PREFIX . $sub_handler,&#10    ]);&#10    $subform_state->setValue([&#10      'settings',&#10    ], $subform_options);&#10    $this->getSelectionHandler($sub_handler)&#10      ->validateConfigurationForm($subform, $subform_state);&#10&#10    // Store the sub handler options in sub_handler_settings.&#10    $form_state->setValue(['options', 'sub_handler_settings'], $subform_options);&#10&#10    // Remove options that are not from the selected sub_handler.&#10    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {&#10      if (isset($options[static::SUBFORM_PREFIX . $sub_handler_option])) {&#10        $form_state->unsetValue(['options', static::SUBFORM_PREFIX . $sub_handler_option]);&#10      }&#10    }&#10&#10    parent::validateExtraOptionsForm($form, $form_state);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function submitExtraOptionsForm($form, FormStateInterface $form_state): void {&#10    $sub_handler = $form_state->getValue('options')['sub_handler'];&#10&#10    // Ensure that only the select sub handler option is saved.&#10    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {&#10      if ($sub_handler_option == $sub_handler) {&#10        $this->options['sub_handler_settings'] = $this->options[static::SUBFORM_PREFIX . $sub_handler_option];&#10      }&#10      if (isset($this->options[static::SUBFORM_PREFIX . $sub_handler_option])) {&#10        unset($this->options[static::SUBFORM_PREFIX . $sub_handler_option]);&#10      }&#10    }&#10  }&#10&#10  /**&#10   * Fixes the issue with switching between the widgets in the view editor.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function alternateWidgetsDefaultNormalize(array &$form, FormStateInterface $form_state): void {&#10    $field_id = '_' . $this->getFieldDefinition()->getName() . '-widget';&#10    $form[$field_id] = [&#10      '#type' => 'hidden',&#10      '#value' => $this->options['widget'],&#10    ];&#10&#10    $previous_widget = $form_state->getUserInput()[$field_id] ?? NULL;&#10    if ($previous_widget && $previous_widget !== $this->options['widget']) {&#10      $form['value']['#value_callback'] = function ($element) {&#10        return $element['#default_value'] ?? '';&#10      };&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function valueForm(&$form, FormStateInterface $form_state) {&#10    if (!isset($this->options['sub_handler'])) {&#10      return;&#10    }&#10    switch ($this->options['widget']) {&#10      case static::WIDGET_SELECT:&#10        $this->valueFormAddSelect($form, $form_state);&#10        break;&#10&#10      case static::WIDGET_AUTOCOMPLETE:&#10        $this->valueFormAddAutocomplete($form, $form_state);&#10        break;&#10    }&#10&#10    if (!empty($this->view->live_preview)) {&#10      $this->alternateWidgetsDefaultNormalize($form, $form_state);&#10    }&#10&#10    // Show or hide the value field depending on the operator field.&#10    $is_exposed = $this->options['exposed'];&#10&#10    $visible = [];&#10    if ($is_exposed) {&#10      $operator_field = ($this->options['expose']['use_operator'] && $this->options['expose']['operator_id']) ? $this->options['expose']['operator_id'] : NULL;&#10    }&#10    else {&#10      $operator_field = 'options[operator]';&#10      $visible[] = [&#10        ':input[name="options[expose_button][checkbox][checkbox]"]' => ['checked' => TRUE],&#10        ':input[name="options[expose][use_operator]"]' => ['checked' => TRUE],&#10        ':input[name="options[expose][operator_id]"]' => ['empty' => FALSE],&#10      ];&#10    }&#10    if ($operator_field) {&#10      foreach ($this->operatorValues(1) as $operator) {&#10        $visible[] = [&#10          ':input[name="' . $operator_field . '"]' => ['value' => $operator],&#10        ];&#10      }&#10      $form['value']['#states'] = ['visible' => $visible];&#10    }&#10&#10    if (!$is_exposed) {&#10      // Retain the helper option.&#10      $this->helper->buildOptionsForm($form, $form_state);&#10&#10      // Show help text if not exposed to end users.&#10      $form['value']['#description'] = $this->t('Leave blank for all. Otherwise, the first selected item will be the default instead of "Any".');&#10    }&#10  }&#10&#10  /**&#10   * Adds an autocomplete element to the form.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function valueFormAddAutocomplete(array &$form, FormStateInterface $form_state): void {&#10    $referenced_type = $this->getReferencedEntityType();&#10    $form['value'] = [&#10      '#title' => $this->t('Select %entity_types', ['%entity_types' => $referenced_type->getPluralLabel()]),&#10      '#type' => 'entity_autocomplete',&#10      '#default_value' => EntityAutocomplete::getEntityLabels($this->getDefaultSelectedEntities()),&#10      '#tags' => TRUE,&#10      '#process_default_value' => FALSE,&#10      '#target_type' => $referenced_type->id(),&#10      '#selection_handler' => $this->options['sub_handler'],&#10      '#selection_settings' => $this->options['sub_handler_settings'],&#10      // Validation is done by validateExposed().&#10      '#validate_reference' => FALSE,&#10    ];&#10  }&#10&#10  /**&#10   * Adds a select element to the form.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function valueFormAddSelect(array &$form, FormStateInterface $form_state): void {&#10    $is_exposed = $form_state->get('exposed');&#10&#10    $options = $this->getValueOptions();&#10    $default_value = (array) $this->value;&#10&#10    if ($is_exposed) {&#10      $identifier = $this->options['expose']['identifier'];&#10&#10      if (!empty($this->options['expose']['reduce'])) {&#10        $options = $this->reduceValueOptions($options);&#10&#10        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {&#10          $default_value = [];&#10        }&#10      }&#10&#10      if (empty($this->options['expose']['multiple'])) {&#10        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {&#10          $default_value = static::ALL_VALUE;&#10        }&#10        elseif (empty($default_value)) {&#10          $keys = array_keys($options);&#10          $default_value = array_shift($keys);&#10        }&#10        else {&#10          // Set the default value to be the first element of the array.&#10          $default_value = reset($default_value);&#10        }&#10      }&#10    }&#10&#10    $referenced_type = $this->getReferencedEntityType();&#10    $form['value'] = [&#10      '#type' => 'select',&#10      '#title' => $this->t('Select @entity_types', ['@entity_types' => $referenced_type->getPluralLabel()]),&#10      '#multiple' => TRUE,&#10      '#options' => $options,&#10      // Set a minimum size to facilitate easier selection of entities.&#10      '#size' => min(8, count($options)),&#10      '#default_value' => $default_value,&#10    ];&#10&#10    $user_input = $form_state->getUserInput();&#10    if ($is_exposed && isset($identifier) && !isset($user_input[$identifier])) {&#10      $user_input[$identifier] = $default_value;&#10      $form_state->setUserInput($user_input);&#10    }&#10  }&#10&#10  /**&#10   * Gets all entities selected by default.&#10   *&#10   * @return \Drupal\Core\Entity\EntityInterface[]&#10   *   All entities selected by default, or an empty array, if none.&#10   */&#10  protected function getDefaultSelectedEntities(): array {&#10    $referenced_type_id = $this->getReferencedEntityType()->id();&#10    $entity_storage = $this->entityTypeManager->getStorage($referenced_type_id);&#10&#10    return !empty($this->value) && !isset($this->value[static::ALL_VALUE]) ? $entity_storage->loadMultiple($this->value) : [];&#10  }&#10&#10  /**&#10   * Returns the value options for a select widget.&#10   *&#10   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $selection_handler&#10   *   The selection handler.&#10   *&#10   * @return string[]&#10   *   The options.&#10   *&#10   * @see \Drupal\views\Plugin\views\filter\InOperator::getValueOptions()&#10   */&#10  protected function getValueOptionsCallback(SelectionInterface $selection_handler): array {&#10    $entity_data = [];&#10    if ($this->options['widget'] === static::WIDGET_SELECT) {&#10      $entity_data = $selection_handler->getReferenceableEntities(NULL, 'CONTAINS', static::WIDGET_SELECT_LIMIT);&#10    }&#10&#10    $options = [];&#10    foreach ($entity_data as $bundle) {&#10      foreach ($bundle as $id => $entity_label) {&#10        $options[$id] = $entity_label;&#10      }&#10    }&#10&#10    return $options;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validate(): array {&#10    // InOperator validation logic is not appropriate for entity reference&#10    // autocomplete or select, so prevent parent class validation from&#10    // occurring.&#10    return [];&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function acceptExposedInput($input): bool {&#10    if (empty($this->options['exposed'])) {&#10      return TRUE;&#10    }&#10&#10    // We need to know the operator, which is normally set in&#10    // \Drupal\views\Plugin\views\filter\FilterPluginBase::acceptExposedInput(),&#10    // before we actually call the parent version of ourselves.&#10    if (!empty($this->options['expose']['use_operator']) && !empty($this->options['expose']['operator_id']) && isset($input[$this->options['expose']['operator_id']])) {&#10      $this->operator = $input[$this->options['expose']['operator_id']];&#10    }&#10&#10    // If view is an attachment and is inheriting exposed filters, then assume&#10    // exposed input has already been validated.&#10    if (!empty($this->view->is_attachment) && $this->view->display_handler->usesExposed()) {&#10      $this->validatedExposedInput = (array) $this->view->exposed_raw_input[$this->options['expose']['identifier']];&#10    }&#10&#10    // If we're checking for EMPTY or NOT, we don't need any input, and we can&#10    // say that our input conditions are met by just having the right operator.&#10    if ($this->operator == 'empty' || $this->operator == 'not empty') {&#10      return TRUE;&#10    }&#10&#10    // If it's non-required and there's no value don't bother filtering.&#10    if (!$this->options['expose']['required'] && empty($this->validatedExposedInput)) {&#10      return FALSE;&#10    }&#10&#10    $accept_exposed_input = parent::acceptExposedInput($input);&#10    if ($accept_exposed_input) {&#10      // If we have previously validated input, override.&#10      if (isset($this->validatedExposedInput)) {&#10        $this->value = $this->validatedExposedInput;&#10      }&#10    }&#10&#10    return $accept_exposed_input;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validateExposed(&$form, FormStateInterface $form_state): void {&#10    if (empty($this->options['exposed'])) {&#10      return;&#10    }&#10&#10    $identifier = $this->options['expose']['identifier'];&#10&#10    // Set the validated exposed input from the select list when not the all&#10    // value option.&#10    if ($this->options['widget'] == static::WIDGET_SELECT) {&#10      if ($form_state->getValue($identifier) != static::ALL_VALUE) {&#10        $this->validatedExposedInput = (array) $form_state->getValue($identifier);&#10      }&#10      return;&#10    }&#10&#10    if (empty($identifier)) {&#10      return;&#10    }&#10&#10    $values = $form_state->getValue($identifier);&#10    if (!is_array($values)) {&#10      return;&#10    }&#10&#10    foreach ($values as $value) {&#10      $this->validatedExposedInput[] = $value['target_id'];&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function valueSubmit($form, FormStateInterface $form_state): void {&#10    // Prevent the parent class InOperator from altering the array.&#10    // @see \Drupal\views\Plugin\views\filter\InOperator::valueSubmit().&#10  }&#10&#10  /**&#10   * Gets the target entity type referenced by this field.&#10   *&#10   * @return \Drupal\Core\Entity\EntityTypeInterface&#10   *   The entity type definition.&#10   */&#10  protected function getReferencedEntityType(): EntityTypeInterface {&#10    $field_def = $this->getFieldDefinition();&#10    $entity_type_id = $field_def->getItemDefinition()&#10      ->getSetting('target_type');&#10    return $this->entityTypeManager->getDefinition($entity_type_id);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function calculateDependencies(): array {&#10    $dependencies = parent::calculateDependencies();&#10&#10    $sub_handler = $this->options['sub_handler'];&#10    $selection_handler = $this->getSelectionHandler($sub_handler);&#10    if ($selection_handler instanceof DependentPluginInterface) {&#10      $dependencies += $selection_handler->calculateDependencies();&#10    }&#10&#10    foreach ($this->getDefaultSelectedEntities() as $entity) {&#10      $dependencies[$entity->getConfigDependencyKey()][] = $entity->getConfigDependencyName();&#10    }&#10&#10    return $dependencies;&#10  }&#10&#10}&#10
\ No newline at end of file
diff --git a/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
new file mode 100644
index 000000000000..29a2cc928c08
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
@@ -0,0 +1 @@
+langcode: en&#10status: true&#10dependencies:&#10  config:&#10    - node.type.page&#10  module:&#10    - node&#10    - user&#10id: test_filter_entity_reference&#10label: test_filter_entity_reference&#10module: views&#10description: ''&#10tag: ''&#10base_table: node_field_data&#10base_field: nid&#10display:&#10  default:&#10    display_plugin: default&#10    id: default&#10    display_title: Master&#10    position: 0&#10    display_options:&#10      access:&#10        type: perm&#10        options:&#10          perm: 'access content'&#10      cache:&#10        type: none&#10        options: {  }&#10      query:&#10        type: views_query&#10        options:&#10          disable_sql_rewrite: false&#10          distinct: false&#10          replica: false&#10          query_comment: ''&#10          query_tags: {  }&#10      exposed_form:&#10        type: basic&#10        options:&#10          submit_button: Apply&#10          reset_button: false&#10          reset_button_label: Reset&#10          exposed_sorts_label: 'Sort by'&#10          expose_sort_order: true&#10          sort_asc_label: Asc&#10          sort_desc_label: Desc&#10      pager:&#10        type: mini&#10        options:&#10          items_per_page: 10&#10          offset: 0&#10          id: 0&#10          total_pages: null&#10          expose:&#10            items_per_page: false&#10            items_per_page_label: 'Items per page'&#10            items_per_page_options: '5, 10, 25, 50'&#10            items_per_page_options_all: false&#10            items_per_page_options_all_label: '- All -'&#10            offset: false&#10            offset_label: Offset&#10          tags:&#10            previous: â€¹â€¹&#10            next: â€ºâ€º&#10      style:&#10        type: default&#10        options:&#10          grouping: {  }&#10          row_class: ''&#10          default_row_class: true&#10          uses_fields: false&#10      row:&#10        type: fields&#10        options:&#10          inline: {  }&#10          separator: ''&#10          hide_empty: false&#10          default_field_elements: true&#10      fields:&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          entity_type: node&#10          entity_field: title&#10          label: ''&#10          alter:&#10            alter_text: false&#10            make_link: false&#10            absolute: false&#10            trim: false&#10            word_boundary: false&#10            ellipsis: false&#10            strip_tags: false&#10            html: false&#10          hide_empty: false&#10          empty_zero: false&#10          settings:&#10            link_to_entity: true&#10          plugin_id: field&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          exclude: false&#10          element_type: ''&#10          element_class: ''&#10          element_label_type: ''&#10          element_label_class: ''&#10          element_label_colon: true&#10          element_wrapper_type: ''&#10          element_wrapper_class: ''&#10          element_default_classes: true&#10          empty: ''&#10          hide_alter_empty: true&#10          click_sort_column: value&#10          type: string&#10          group_column: value&#10          group_columns: {  }&#10          group_rows: true&#10          delta_limit: 0&#10          delta_offset: 0&#10          delta_reversed: false&#10          delta_first_last: false&#10          multi_type: separator&#10          separator: ', '&#10          field_api_classes: false&#10      filters:&#10        status:&#10          value: '1'&#10          table: node_field_data&#10          field: status&#10          plugin_id: boolean&#10          entity_type: node&#10          entity_field: status&#10          id: status&#10          expose:&#10            operator: ''&#10          group: 1&#10        type:&#10          id: type&#10          table: node_field_data&#10          field: type&#10          value:&#10            page: page&#10          entity_type: node&#10          entity_field: type&#10          plugin_id: bundle&#10        field_test_target_id:&#10          id: field_test_target_id&#10          table: node__field_test&#10          field: field_test_target_id&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          operator: or&#10          value: {  }&#10          group: 1&#10          exposed: true&#10          expose:&#10            operator_id: field_test_target_id_op&#10            label: 'Test (field_test)'&#10            description: ''&#10            use_operator: false&#10            operator: field_test_target_id_op&#10            identifier: field_test_target_id&#10            required: false&#10            remember: false&#10            multiple: true&#10            remember_roles:&#10              authenticated: authenticated&#10              anonymous: '0'&#10              administrator: '0'&#10            reduce: false&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: {  }&#10            group_items: {  }&#10          reduce_duplicates: false&#10          sub_handler: 'default:node'&#10          sub_handler_settings:&#10            target_bundles:&#10              article: article&#10            sort:&#10              field: title&#10              direction: ASC&#10            auto_create: false&#10            auto_create_bundle: ''&#10          widget: select&#10          plugin_id: entity_reference&#10        field_test_config_target_id:&#10          id: field_test_config_target_id&#10          table: node__field_test_config&#10          field: field_test_config_target_id&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          plugin_id: entity_reference&#10          operator: or&#10          value: { }&#10          group: 1&#10          exposed: true&#10          expose:&#10            operator_id: field_test_config_target_id_op&#10            label: 'Test config (field_test_config)'&#10            description: ''&#10            use_operator: false&#10            operator: field_test_config_target_id_op&#10            operator_limit_selection: false&#10            operator_list: { }&#10            identifier: field_test_config_target_id&#10            required: false&#10            remember: false&#10            multiple: false&#10            remember_roles:&#10              authenticated: authenticated&#10              anonymous: '0'&#10              content_editor: '0'&#10              administrator: '0'&#10            reduce: false&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: { }&#10            group_items: { }&#10          reduce_duplicates: false&#10          sub_handler: 'default:node_type'&#10          widget: select&#10          sub_handler_settings:&#10            target_bundles: null&#10            auto_create: false&#10      sorts:&#10        created:&#10          id: created&#10          table: node_field_data&#10          field: created&#10          order: DESC&#10          entity_type: node&#10          entity_field: created&#10          plugin_id: date&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          exposed: false&#10          expose:&#10            label: ''&#10          granularity: second&#10      header: {  }&#10      footer: {  }&#10      empty: {  }&#10      relationships: {  }&#10      arguments: {  }&#10      display_extenders: {  }&#10
\ No newline at end of file
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml b/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
new file mode 100644
index 000000000000..c9ca489f23c2
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
@@ -0,0 +1 @@
+langcode: en&#10status: true&#10dependencies:&#10  module:&#10    - node&#10    - user&#10id: test_entity_reference&#10label: 'Test Entity Reference'&#10module: views&#10description: ''&#10tag: ''&#10base_table: node_field_data&#10base_field: nid&#10display:&#10  default:&#10    id: default&#10    display_title: Default&#10    display_plugin: default&#10    position: 0&#10    display_options:&#10      fields:&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: title&#10          plugin_id: field&#10          label: ''&#10          exclude: false&#10          alter:&#10            alter_text: false&#10            text: ''&#10            make_link: false&#10            path: ''&#10            absolute: false&#10            external: false&#10            replace_spaces: false&#10            path_case: none&#10            trim_whitespace: false&#10            alt: ''&#10            rel: ''&#10            link_class: ''&#10            prefix: ''&#10            suffix: ''&#10            target: ''&#10            nl2br: false&#10            max_length: 0&#10            word_boundary: false&#10            ellipsis: false&#10            more_link: false&#10            more_link_text: ''&#10            more_link_path: ''&#10            strip_tags: false&#10            trim: false&#10            preserve_tags: ''&#10            html: false&#10          element_type: ''&#10          element_class: ''&#10          element_label_type: ''&#10          element_label_class: ''&#10          element_label_colon: false&#10          element_wrapper_type: ''&#10          element_wrapper_class: ''&#10          element_default_classes: true&#10          empty: ''&#10          hide_empty: false&#10          empty_zero: false&#10          hide_alter_empty: true&#10          click_sort_column: value&#10          type: string&#10          settings:&#10            link_to_entity: true&#10          group_column: value&#10          group_columns: {  }&#10          group_rows: true&#10          delta_limit: 0&#10          delta_offset: 0&#10          delta_reversed: false&#10          delta_first_last: false&#10          multi_type: separator&#10          separator: ', '&#10          field_api_classes: false&#10      pager:&#10        type: mini&#10        options:&#10          offset: 0&#10          items_per_page: 10&#10          total_pages: null&#10          id: 0&#10          tags:&#10            next: â€ºâ€º&#10            previous: â€¹â€¹&#10          expose:&#10            items_per_page: false&#10            items_per_page_label: 'Items per page'&#10            items_per_page_options: '5, 10, 25, 50'&#10            items_per_page_options_all: false&#10            items_per_page_options_all_label: '- All -'&#10            offset: false&#10            offset_label: Offset&#10      exposed_form:&#10        type: basic&#10        options:&#10          submit_button: Apply&#10          reset_button: false&#10          reset_button_label: Reset&#10          exposed_sorts_label: 'Sort by'&#10          expose_sort_order: true&#10          sort_asc_label: Asc&#10          sort_desc_label: Desc&#10      access:&#10        type: perm&#10        options:&#10          perm: 'access content'&#10      cache:&#10        type: tag&#10        options: {  }&#10      empty: {  }&#10      sorts:&#10        created:&#10          id: created&#10          table: node_field_data&#10          field: created&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: created&#10          plugin_id: date&#10          order: DESC&#10          expose:&#10            label: ''&#10            field_identifier: ''&#10          exposed: false&#10          granularity: second&#10      arguments: {  }&#10      filters:&#10        status:&#10          id: status&#10          table: node_field_data&#10          field: status&#10          entity_type: node&#10          entity_field: status&#10          plugin_id: boolean&#10          value: '1'&#10          group: 1&#10          expose:&#10            operator: ''&#10            operator_limit_selection: false&#10            operator_list: {  }&#10        type:&#10          id: type&#10          table: node_field_data&#10          field: type&#10          entity_type: node&#10          entity_field: type&#10          plugin_id: bundle&#10          value:&#10            article: article&#10          expose:&#10            operator_limit_selection: false&#10            operator_list: {  }&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: title&#10          plugin_id: string&#10          operator: '='&#10          value: 'Article 0'&#10          group: 1&#10          exposed: false&#10          expose:&#10            operator_id: ''&#10            label: ''&#10            description: ''&#10            use_operator: false&#10            operator: ''&#10            operator_limit_selection: false&#10            operator_list: {  }&#10            identifier: ''&#10            required: false&#10            remember: false&#10            multiple: false&#10            remember_roles:&#10              authenticated: authenticated&#10            placeholder: ''&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: {  }&#10            group_items: {  }&#10      style:&#10        type: default&#10        options:&#10          grouping: {  }&#10          row_class: ''&#10          default_row_class: true&#10          uses_fields: false&#10      row:&#10        type: fields&#10        options:&#10          default_field_elements: true&#10          inline: {  }&#10          separator: ''&#10          hide_empty: false&#10      query:&#10        type: views_query&#10        options:&#10          query_comment: ''&#10          disable_sql_rewrite: false&#10          distinct: false&#10          replica: false&#10          query_tags: {  }&#10      relationships: {  }&#10      header: {  }&#10      footer: {  }&#10      display_extenders: {  }&#10    cache_metadata:&#10      max-age: -1&#10      contexts:&#10        - 'languages:language_content'&#10        - 'languages:language_interface'&#10        - url.query_args&#10        - 'user.node_grants:view'&#10        - user.permissions&#10      tags: {  }&#10  entity_reference:&#10    id: entity_reference&#10    display_title: 'Entity Reference'&#10    display_plugin: entity_reference&#10    position: 1&#10    display_options:&#10      style:&#10        type: entity_reference&#10        options:&#10          search_fields:&#10            title: title&#10      row:&#10        type: entity_reference&#10        options:&#10          default_field_elements: true&#10          inline: {  }&#10          separator: '-'&#10          hide_empty: false&#10      display_extenders: {  }&#10    cache_metadata:&#10      max-age: -1&#10      contexts:&#10        - 'languages:language_content'&#10        - 'languages:language_interface'&#10        - 'user.node_grants:view'&#10        - user.permissions&#10      tags: {  }&#10
\ No newline at end of file
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
new file mode 100644
index 000000000000..f7549b05c2ce
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
@@ -0,0 +1 @@
+name: 'Views Test Entity Reference'&#10type: module&#10description: 'Provides an entity reference view for use in a selection handler.'&#10package: Testing&#10version: VERSION&#10dependencies:&#10  - drupal:views&#10  - drupal:field&#10
\ No newline at end of file
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
new file mode 100644
index 000000000000..f44e9385dd4e
--- /dev/null
+++ b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
@@ -0,0 +1 @@
+<?php&#10&#10/**&#10 * @file&#10 * Views data altering to test use of the entity reference plugin.&#10 */&#10&#10/**&#10 * Implements hook_views_data_alter().&#10 */&#10function views_test_entity_reference_views_data_alter(&$data) {&#10  $manager = \Drupal::entityTypeManager();&#10  $field_config_storage = $manager->getStorage('field_config');&#10  /** @var \Drupal\field\FieldConfigInterface[] $field_configs */&#10  $field_configs = $field_config_storage->loadByProperties([&#10    'field_type' => 'entity_reference',&#10  ]);&#10  foreach ($field_configs as $field_config) {&#10    $table_name = $field_config->getTargetEntityTypeId() . '__' . $field_config->getName();&#10    $column_name = $field_config->getName() . '_target_id';&#10    if (&#10      isset($data[$table_name][$column_name]['filter']['id'])&#10      && in_array($data[$table_name][$column_name]['filter']['id'], ['numeric', 'string'])&#10    ) {&#10      $data[$table_name][$column_name]['filter']['id'] = 'entity_reference';&#10    }&#10  }&#10}&#10
\ No newline at end of file
diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
new file mode 100644
index 000000000000..45b9ea5585fb
--- /dev/null
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
@@ -0,0 +1 @@
+<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views\Kernel\Handler;&#10&#10use Drupal\Core\Field\FieldStorageDefinitionInterface;&#10use Drupal\Tests\field\Traits\EntityReferenceFieldCreationTrait;&#10use Drupal\Tests\node\Traits\ContentTypeCreationTrait;&#10use Drupal\Tests\node\Traits\NodeCreationTrait;&#10use Drupal\Tests\user\Traits\UserCreationTrait;&#10use Drupal\Tests\views\Kernel\ViewsKernelTestBase;&#10use Drupal\user\UserInterface;&#10use Drupal\views\Plugin\views\filter\EntityReference;&#10use Drupal\views\Tests\ViewTestData;&#10use Drupal\views\Views;&#10&#10/**&#10 * Tests the core Drupal\views\Plugin\views\filter\EntityReference handler.&#10 *&#10 * @group views&#10 */&#10class FilterEntityReferenceTest extends ViewsKernelTestBase {&#10&#10  use ContentTypeCreationTrait;&#10  use EntityReferenceFieldCreationTrait;&#10  use NodeCreationTrait;&#10  use UserCreationTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static $testViews = ['test_filter_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'system',&#10    'node',&#10    'user',&#10    'field',&#10    'text',&#10    'filter',&#10    'views',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * Test host nodes containing the entity reference.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $hostNodes;&#10&#10  /**&#10   * Test target nodes referenced by the entity reference.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $targetNodes;&#10&#10  /**&#10   * First test user as node author.&#10   *&#10   * @var \Drupal\user\UserInterface&#10   */&#10  protected UserInterface $user1;&#10&#10  /**&#10   * Second test user as node author.&#10   *&#10   * @var \Drupal\user\UserInterface&#10   */&#10  protected UserInterface $user2;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function setUp($import_test_views = TRUE): void {&#10    parent::setUp(FALSE);&#10    $this->installEntitySchema('node');&#10    $this->installEntitySchema('user');&#10    $this->installConfig(['node', 'user', 'filter']);&#10&#10    ViewTestData::createTestViews(static::class, ['views_test_config']);&#10    // Create two node types.&#10    $this->createContentType(['type' => 'page']);&#10    $this->createContentType(['type' => 'article']);&#10&#10    // Add an entity reference field to the page type referencing the article&#10    // type.&#10    $selection_handler_settings = [&#10      'target_bundles' => [&#10        'article' => 'article',&#10      ],&#10    ];&#10    $this->createEntityReferenceField('node', 'page', 'field_test', 'Test reference', 'node', $selection_handler = 'default', $selection_handler_settings, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);&#10&#10    // Create user 1.&#10    $this->user1 = $this->createUser();&#10    $this->user2 = $this->createUser();&#10&#10    // Create target nodes to be referenced.&#10    foreach (range(0, 5) as $count) {&#10      $this->targetNodes[$count] = $this->createNode([&#10        'type' => 'article',&#10        'title' => 'Article ' . $count,&#10        'status' => 1,&#10        'uid' => $this->user1,&#10      ]);&#10    }&#10&#10    // Create a page referencing Article 0 and Article 1.&#10    $this->hostNodes[0] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 0',&#10      'status' => 1,&#10      'created' => time(),&#10      'field_test' => [&#10        $this->targetNodes[0]->id(),&#10        $this->targetNodes[1]->id(),&#10      ],&#10      'uid' => $this->user2,&#10    ]);&#10&#10    // Create a page referencing Article 1, Article 2, and Article 3.&#10    $this->hostNodes[1] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 1',&#10      'status' => 1,&#10      'created' => time() - 100,&#10      'field_test' => [&#10        $this->targetNodes[1]->id(),&#10        $this->targetNodes[2]->id(),&#10        $this->targetNodes[3]->id(),&#10      ],&#10      'uid' => $this->user2,&#10    ]);&#10&#10    // Create a page referencing nothing.&#10    $this->hostNodes[2] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 2',&#10      'status' => 1,&#10      'created' => time() - 200,&#10      'uid' => $this->user2,&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that results are successfully filtered by the select list widget.&#10   */&#10  public function testViewEntityReferenceAsSelectList(): void {&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $view->preExecute([]);&#10    $view->setExposedInput([&#10      'field_test_target_id' => [$this->targetNodes[0]->id()],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have only Page 0, with Article 0 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10&#10    // Change to both Article 0 and Article 3.&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $view->setExposedInput([&#10      'field_test_target_id' => [&#10        $this->targetNodes[0]->id(),&#10        $this->targetNodes[3]->id(),&#10      ],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10      ['title' => 'Page 1'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that results are successfully filtered by the autocomplete widget.&#10   */&#10  public function testViewEntityReferenceAsAutocomplete(): void {&#10    // Change the widget to autocomplete.&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $filters = $view->displayHandlers->get('default')->getOption('filters');&#10    $filters['field_test_target_id']['widget'] = EntityReference::WIDGET_AUTOCOMPLETE;&#10    $view->displayHandlers->get('default')->overrideOption('filters', $filters);&#10    $view->setExposedInput([&#10      'field_test_target_id' => [&#10        ['target_id' => $this->targetNodes[0]->id()],&#10        ['target_id' => $this->targetNodes[3]->id()],&#10      ],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10      ['title' => 'Page 1'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that content dependencies are added to the view.&#10   */&#10  public function testViewContentDependencies(): void {&#10    $view = Views::getView('test_filter_entity_reference');&#10    $value = [&#10      $this->targetNodes[0]->id(),&#10      $this->targetNodes[3]->id(),&#10    ];&#10    $view->setHandlerOption(&#10      'default',&#10      'filter',&#10      'field_test_target_id',&#10      'value',&#10      $value&#10    );&#10&#10    // Dependencies are sorted.&#10    $content_dependencies = [&#10      $this->targetNodes[0]->getConfigDependencyName(),&#10      $this->targetNodes[3]->getConfigDependencyName(),&#10    ];&#10    sort($content_dependencies);&#10&#10    $this->assertEquals([&#10      'config' => [&#10        'node.type.page',&#10      ],&#10      'content' => $content_dependencies,&#10      'module' => [&#10        'node',&#10        'user',&#10      ],&#10    ], $view->getDependencies());&#10  }&#10&#10}&#10
\ No newline at end of file
diff --git a/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php b/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
new file mode 100644
index 000000000000..43e744d8e007
--- /dev/null
+++ b/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
@@ -0,0 +1 @@
+<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\Functional;&#10&#10use Drupal\Component\Render\FormattableMarkup;&#10use Drupal\Core\Entity\EntityInterface;&#10use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;&#10&#10/**&#10 * Tests the entity reference filter UI.&#10 *&#10 * @group views_ui&#10 * @see \Drupal\views\Plugin\views\filter\EntityReference&#10 */&#10class FilterEntityReferenceWebTest extends UITestBase {&#10&#10  use FilterEntityReferenceTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected $defaultTheme = 'stark';&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static $testViews = ['test_filter_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'node',&#10    'views_ui',&#10    'block',&#10    'taxonomy',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function setUp($import_test_views = TRUE, $modules = []): void {&#10    parent::setUp($import_test_views);&#10    $this->setUpEntityTypes();&#10  }&#10&#10  /**&#10   * Tests the filter UI.&#10   */&#10  public function testFilterUi(): void {&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10&#10    $options = $this->getUiOptions();&#10    // Should be sorted by title ASC.&#10    uasort($this->targetEntities, function (EntityInterface $a, EntityInterface $b) {&#10      return strnatcasecmp($a->getTitle(), $b->getTitle());&#10    });&#10    $i = 0;&#10    foreach ($this->targetEntities as $id => $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10&#10    // Change the sort field and direction.&#10    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $edit = [&#10      'options[reference_default:node][sort][field]' => 'nid',&#10      'options[reference_default:node][sort][direction]' => 'DESC',&#10    ];&#10    $this->submitForm($edit, 'Apply');&#10&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10    // Items should now be in reverse id order.&#10    krsort($this->targetEntities);&#10    $options = $this->getUiOptions();&#10    $i = 0;&#10    foreach ($this->targetEntities as $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10&#10    // Change bundle types.&#10    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $edit = [&#10      "options[reference_default:node][target_bundles][{$this->hostBundle->id()}]" => TRUE,&#10      "options[reference_default:node][target_bundles][{$this->targetBundle->id()}]" => TRUE,&#10    ];&#10    $this->submitForm($edit, 'Apply');&#10&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $options = $this->getUiOptions();&#10    $i = 0;&#10    foreach ($this->hostEntities + $this->targetEntities as $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10  }&#10&#10  /**&#10   * Tests the filter UI for config reference.&#10   */&#10  public function testFilterConfigUi(): void {&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_config_target_id');&#10&#10    $options = $this->getUiOptions();&#10    // We should expect the content types defined as options.&#10    $this->assertEquals(['article', 'page'], array_column($options, 'label'));&#10  }&#10&#10  /**&#10   * Helper method to parse options from the UI.&#10   *&#10   * @return array&#10   *   Array of keyed arrays containing the id and label of each option.&#10   */&#10  protected function getUiOptions(): array {&#10    /** @var \Behat\Mink\Element\TraversableElement[] $result */&#10    $result = $this->xpath('//select[@name="options[value][]"]/option');&#10    $this->assertNotEmpty($result, 'Options found');&#10&#10    $options = [];&#10    foreach ($result as $option) {&#10      $options[] = [&#10        'id' => (int) $option->getValue(),&#10        'label' => $option->getText(),&#10      ];&#10    }&#10&#10    return $options;&#10  }&#10&#10}&#10
\ No newline at end of file
diff --git a/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php b/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
new file mode 100644
index 000000000000..055ce90e2187
--- /dev/null
+++ b/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
@@ -0,0 +1 @@
+<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\FunctionalJavascript;&#10&#10use Drupal\Core\Url;&#10use Drupal\FunctionalJavascriptTests\WebDriverTestBase;&#10use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;&#10&#10/**&#10 * Tests views creation wizard.&#10 *&#10 * @group views_ui&#10 * @see \Drupal\views\Plugin\views\filter\EntityReference&#10 */&#10class FilterEntityReferenceTest extends WebDriverTestBase {&#10&#10  use FilterEntityReferenceTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'node',&#10    'views',&#10    'views_ui',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected $defaultTheme = 'stark';&#10&#10  /**&#10   * Views used by this test.&#10   *&#10   * @var array&#10   */&#10  public static $testViews = ['test_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function setUp(): void {&#10    parent::setUp();&#10&#10    $admin_user = $this->drupalCreateUser([&#10      'administer views',&#10    ]);&#10    $this->drupalLogin($admin_user);&#10&#10    $this->setUpEntityTypes();&#10  }&#10&#10  /**&#10   * Tests end to end creation of a Content Entity Reference filter.&#10   */&#10  public function testAddEntityReferenceFieldWithDefaultSelectionHandler(): void {&#10    $this->drupalGet('admin/structure/views/view/content');&#10    $assert = $this->assertSession();&#10    $page = $this->getSession()->getPage();&#10&#10    // Open the dialog.&#10    $page->clickLink('views-add-filter');&#10&#10    // Wait for the popup to open and the search field to be available.&#10    $assert->waitForField('override[controls][options_search]');&#10&#10    // Test that the both entity_reference and numeric options are visible.&#10    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')&#10      ->isVisible());&#10    $page->findField('name[node__field_test.field_test_target_id]')&#10      ->click();&#10    $this->assertTrue($page->find('css', 'button.button.button--primary.form-submit.ui-button')&#10      ->isVisible());&#10    $page->find('css', 'button.button.button--primary.form-submit.ui-button')&#10      ->click();&#10&#10    // Wait for the selection handler to show up.&#10    $assert->waitForField('options[sub_handler]');&#10    $page->selectFieldOption('options[sub_handler]', 'default:node');&#10&#10    // Check that that default handler target bundles are available.&#10    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][article]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][page]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('options[widget]')->isVisible());&#10&#10    // Ensure that disabled form elements from selection handler do not show up&#10    // @see \Drupal\views\Plugin\views\filter\EntityReference method&#10    // buildExtraOptionsForm.&#10    $this->assertFalse($page->hasField('options[reference_default:node][target_bundles_update]'));&#10    $this->assertFalse($page->hasField('options[reference_default:node][auto_create]'));&#10    $this->assertFalse($page->hasField('options[reference_default:node][auto_create_bundle]'));&#10&#10    // Choose the default handler using the select widget with article type&#10    // checked.&#10    $page->checkField('options[reference_default:node][target_bundles][article]');&#10    $page->selectFieldOption('options[widget]', 'select');&#10    $this->assertSame($page->findField('options[widget]')&#10      ->getValue(), 'select');&#10    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")&#10      ->press();&#10&#10    // Test the exposed filter options show up correctly.&#10    // Test the exposed filter options show up correctly.&#10    $assert->waitForField('options[expose_button][checkbox][checkbox]');&#10    $page->findField('options[expose_button][checkbox][checkbox]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));&#10&#10    // Check the exposed filters multiple option.&#10    $assert->waitForField('options[expose][multiple]');&#10    $page->findField('options[expose][multiple]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    // Wait for the Views Preview to show up with the new reference field.&#10    $assert->waitForField('field_test_config_target_id[]');&#10    $this->assertTrue($page->findField('field_test_target_id[]')&#10      ->isVisible());&#10    $this->assertTrue($page->find('css', 'select[name="field_test_target_id[]"]')&#10      ->hasAttribute('multiple'));&#10&#10    // Opening the settings form and change the handler to use an Entity&#10    // Reference view.&#10    // @see views.view.test_entity_reference.yml&#10    $base_url = Url::fromRoute('entity.view.collection')->toString();&#10    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_target_id';&#10    $extra_settings_selector = 'a[href="' . $url . '"]';&#10    $element = $this->assertSession()->waitForElementVisible('css', $extra_settings_selector);&#10    $this->assertNotNull($element);&#10    $element->click();&#10    $assert->waitForField('options[sub_handler]');&#10    $page->selectFieldOption('options[sub_handler]', 'views');&#10    $page->selectFieldOption('options[reference_views][view][view_and_display]', 'test_entity_reference:entity_reference');&#10    $page->find('xpath', "//*[contains(text(), 'Apply')]")&#10      ->press();&#10    $assert->assertWaitOnAjaxRequest();&#10&#10    // The Views Reference filter has a title Filter to a single result, so&#10    // ensure only that result is available as an option.&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    $this->assertCount(1, $page->findAll('css', 'select[name="field_test_target_id[]"] option'));&#10&#10    // Change to an autocomplete filter.&#10    // Opening the settings form and change the handler to use an Entity&#10    // Reference view.&#10    // @see views.view.test_entity_reference.yml&#10    $page->find('css', $extra_settings_selector)&#10      ->click();&#10    $assert->waitForElementVisible('named', [&#10      'radio',&#10      'options[widget]',&#10    ]);&#10    $page->selectFieldOption('options[widget]', 'autocomplete');&#10    $this->assertSame($page->findField('options[widget]')&#10      ->getValue(), 'autocomplete');&#10    $this->getSession()&#10      ->getPage()&#10      ->find('xpath', "//*[contains(text(), 'Apply')]")&#10      ->press();&#10&#10    // Check that it is now an autocomplete.&#10    $assert->waitForField('field_test_target_id');&#10    $page = $this->getSession()->getPage();&#10    $this->assertTrue($page->findField('field_test_target_id')&#10      ->isVisible());&#10    $this->assertTrue($page->find('css', 'input[name="field_test_target_id"]')&#10      ->hasAttribute('data-autocomplete-path'));&#10  }&#10&#10  /**&#10   * Tests end to end creation of a Config Entity Reference filter.&#10   */&#10  public function testAddConfigEntityReferenceFieldWithDefaultSelectionHandler(): void {&#10    $this->drupalGet('admin/structure/views/view/content');&#10    $assert = $this->assertSession();&#10    $page = $this->getSession()->getPage();&#10&#10    // Open the 'Add filter dialog'.&#10    $page->clickLink('views-add-filter');&#10&#10    // Wait for the popup to open and the search field to be available.&#10    $assert->waitForField('override[controls][group]');&#10&#10    // Test that the entity_reference option is visible.&#10    $this->assertTrue($page->findField('name[node__field_test_config.field_test_config_target_id]')->isVisible());&#10    $page->findField('name[node__field_test_config.field_test_config_target_id]')->click();&#10    $submitButton = $page->find('css', 'button.button.button--primary.form-submit.ui-button');&#10    $this->assertTrue($submitButton->isVisible());&#10    $submitButton->click();&#10&#10    // Wait for the selection handler to show up.&#10    $assert->waitForField('options[sub_handler]');&#10&#10    $page->selectFieldOption('options[sub_handler]', 'default:node_type');&#10&#10    // Choose the default handler using the select widget with article type&#10    // checked.&#10    $page->selectFieldOption('options[widget]', 'select');&#10    $this->assertSame('select', $page->findField('options[widget]')->getValue());&#10    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")->press();&#10&#10    // Test the exposed filter options show up correctly.&#10    $assert->waitForField('options[expose_button][checkbox][checkbox]');&#10    $page->findField('options[expose_button][checkbox][checkbox]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));&#10&#10    // Check the exposed filters multiple option.&#10    $assert->waitForField('options[expose][multiple]');&#10    $page->findField('options[expose][multiple]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    // Wait for the Views Preview to show up with the reference field.&#10    $assert->waitForField('field_test_config_target_id[]');&#10    $this->assertTrue($page->findField('field_test_config_target_id[]')->isVisible());&#10    $this->assertTrue($page->find('css', 'select[name="field_test_config_target_id[]"]')->hasAttribute('multiple'));&#10&#10    // Check references config options.&#10    $options = $page->findAll('css', 'select[name="field_test_config_target_id[]"] option');&#10    $this->assertCount(2, $options);&#10    $this->assertSame('article', $options[0]->getValue());&#10    $this->assertSame('page', $options[1]->getValue());&#10&#10    $base_url = Url::fromRoute('entity.view.collection')->toString();&#10    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_config_target_id';&#10    $extra_settings_selector = 'a[href="' . $url . '"]';&#10&#10    // Change to an autocomplete filter.&#10    $page->find('css', $extra_settings_selector)->click();&#10    $assert->waitForField('options[widget]');&#10    $page->selectFieldOption('options[widget]', 'autocomplete');&#10    $this->assertSame('autocomplete', $page->findField('options[widget]')->getValue());&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $this->assertSession()->assertWaitOnAjaxRequest();&#10&#10    // Check that it is now an autocomplete input.&#10    $assert->waitForField('field_test_config_target_id');&#10    $this->assertTrue($page->findField('field_test_config_target_id')->isVisible());&#10    $this->assertTrue($page->find('css', 'input[name="field_test_config_target_id"]')->hasAttribute('data-autocomplete-path'));&#10  }&#10&#10}&#10
\ No newline at end of file
diff --git a/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php b/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php
new file mode 100644
index 000000000000..cdf1b6d1a18d
--- /dev/null
+++ b/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php
@@ -0,0 +1 @@
+<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\Traits;&#10&#10use Drupal\Core\Field\FieldStorageDefinitionInterface;&#10use Drupal\field\Entity\FieldConfig;&#10use Drupal\field\Entity\FieldStorageConfig;&#10use Drupal\node\NodeTypeInterface;&#10use Drupal\Tests\node\Traits\ContentTypeCreationTrait;&#10use Drupal\Tests\node\Traits\NodeCreationTrait;&#10&#10/**&#10 * Sets up the entity types and relationships for entity reference tests.&#10 *&#10 * This trait is meant to be used only by test classes.&#10 */&#10trait FilterEntityReferenceTrait {&#10&#10  use ContentTypeCreationTrait {&#10    createContentType as drupalCreateContentType;&#10  }&#10  use NodeCreationTrait {&#10    getNodeByTitle as drupalGetNodeByTitle;&#10    createNode as drupalCreateNode;&#10  }&#10&#10  /**&#10   * The host content type to add the entity reference field to.&#10   *&#10   * @var \Drupal\node\NodeTypeInterface&#10   */&#10  protected NodeTypeInterface $hostBundle;&#10&#10  /**&#10   * The content type to be referenced by the host content type.&#10   *&#10   * @var \Drupal\node\NodeTypeInterface&#10   */&#10  protected NodeTypeInterface $targetBundle;&#10&#10  /**&#10   * Entities to be used as reference targets.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $targetEntities;&#10&#10  /**&#10   * Host entities which contain the reference fields to the target entities.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $hostEntities;&#10&#10  /**&#10   * Sets up the entity types and relationships.&#10   */&#10  protected function setUpEntityTypes(): void {&#10    // Create an entity type, and a referenceable type. Since these are coded&#10    // into the test view, they are not randomly named.&#10    $this->hostBundle = $this->drupalCreateContentType(['type' => 'page']);&#10    $this->targetBundle = $this->drupalCreateContentType(['type' => 'article']);&#10&#10    $field_storage = FieldStorageConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test',&#10      'type' => 'entity_reference',&#10      'settings' => [&#10        'target_type' => 'node',&#10      ],&#10      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,&#10    ]);&#10    $field_storage->save();&#10&#10    $field = FieldConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test',&#10      'bundle' => $this->hostBundle->id(),&#10      'settings' => [&#10        'handler' => 'default',&#10        'handler_settings' => [&#10          'target_bundles' => [&#10            $this->targetBundle->id() => $this->targetBundle->label(),&#10          ],&#10        ],&#10      ],&#10    ]);&#10    $field->save();&#10&#10    // Create 10 nodes for use as target entities.&#10    for ($i = 0; $i < 10; $i++) {&#10      $node = $this->drupalCreateNode([&#10        'type' => $this->targetBundle->id(),&#10        'title' => ucfirst($this->targetBundle->id()) . ' ' . $i,&#10      ]);&#10      $this->targetEntities[$node->id()] = $node;&#10    }&#10&#10    // Create 1 host entity to reference target entities from.&#10    $node = $this->drupalCreateNode([&#10      'type' => $this->hostBundle->id(),&#10      'title' => ucfirst($this->hostBundle->id()) . ' 0',&#10    ]);&#10    $this->hostEntities = [&#10      $node->id() => $node,&#10    ];&#10&#10    $field_storage = FieldStorageConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test_config',&#10      'type' => 'entity_reference',&#10      'settings' => [&#10        'target_type' => 'node_type',&#10      ],&#10      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,&#10    ]);&#10    $field_storage->save();&#10&#10    $field = FieldConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test_config',&#10      'bundle' => $this->hostBundle->id(),&#10      'settings' => [&#10        'handler' => 'default',&#10        'handler_settings' => [&#10          'sort' => ['field' => '_none'],&#10        ],&#10      ],&#10    ]);&#10    $field->save();&#10  }&#10&#10}&#10
\ No newline at end of file
-- 
GitLab


From ee9d2c593bc5bec10f48ee925f364cdd22df86ff Mon Sep 17 00:00:00 2001
From: Scott Euser <scotteuser@gmail.com>
Date: Fri, 2 Aug 2024 08:33:47 +0100
Subject: [PATCH 2/3] Rebuild entity reference file - phpstorm error

---
 .../Plugin/views/filter/EntityReference.php   | 705 +++++++++++++++++-
 1 file changed, 704 insertions(+), 1 deletion(-)

diff --git a/core/modules/views/src/Plugin/views/filter/EntityReference.php b/core/modules/views/src/Plugin/views/filter/EntityReference.php
index 01e66f0bb70c..83e9f95ce163 100644
--- a/core/modules/views/src/Plugin/views/filter/EntityReference.php
+++ b/core/modules/views/src/Plugin/views/filter/EntityReference.php
@@ -1 +1,704 @@
-<?php&#10&#10namespace Drupal\views\Plugin\views\filter;&#10&#10use Drupal\Component\Plugin\DependentPluginInterface;&#10use Drupal\Component\Utility\NestedArray;&#10use Drupal\Core\Entity\Element\EntityAutocomplete;&#10use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;&#10use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;&#10use Drupal\Core\Entity\EntityTypeInterface;&#10use Drupal\Core\Entity\EntityTypeManagerInterface;&#10use Drupal\Core\Form\FormStateInterface;&#10use Drupal\Core\Form\SubformState;&#10use Drupal\Core\Messenger\MessengerInterface;&#10use Drupal\Core\Render\Element;&#10use Drupal\views\FieldAPIHandlerTrait;&#10use Drupal\views\Plugin\EntityReferenceSelection\ViewsSelection;&#10use Drupal\views\Plugin\views\display\DisplayPluginBase;&#10use Drupal\views\ViewExecutable;&#10use Symfony\Component\DependencyInjection\ContainerInterface;&#10&#10/**&#10 * Filters a view by entity references.&#10 *&#10 * @ingroup views_filter_handlers&#10 *&#10 * @ViewsFilter("entity_reference")&#10 */&#10class EntityReference extends ManyToOne {&#10&#10  use FieldAPIHandlerTrait;&#10&#10  /**&#10   * Type for the autocomplete filter format.&#10   */&#10  const WIDGET_AUTOCOMPLETE = 'autocomplete';&#10&#10  /**&#10   * Type for the select list filter format.&#10   */&#10  const WIDGET_SELECT = 'select';&#10&#10  /**&#10   * Max number of entities in the select widget.&#10   */&#10  const WIDGET_SELECT_LIMIT = 100;&#10&#10  /**&#10   * The subform prefix.&#10   */&#10  const SUBFORM_PREFIX = 'reference_';&#10&#10  /**&#10   * The all value.&#10   */&#10  const ALL_VALUE = 'All';&#10&#10  /**&#10   * The selection handlers available for the target entity ID of the filter.&#10   *&#10   * @var array|null&#10   */&#10  protected ?array $handlerOptions = NULL;&#10&#10  /**&#10   * Validated exposed input that will be set as the input value.&#10   *&#10   * If the select list widget is chosen.&#10   *&#10   * @var array&#10   */&#10  protected array $validatedExposedInput;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function init(ViewExecutable $view, DisplayPluginBase $display, ?array &$options = NULL): void {&#10    parent::init($view, $display, $options);&#10    if (empty($this->definition['field_name'])) {&#10      $this->definition['field_name'] = $options['field'];&#10    }&#10&#10    $this->definition['options callback'] = [$this, 'getValueOptionsCallback'];&#10    $this->definition['options arguments'] = [$this->getSelectionHandler($this->options['sub_handler'])];&#10  }&#10&#10  /**&#10   * Constructs an EntityReference object.&#10   */&#10  public function __construct(&#10    array $configuration,&#10    $plugin_id,&#10    $plugin_definition,&#10    protected SelectionPluginManagerInterface $selectionPluginManager,&#10    protected EntityTypeManagerInterface $entityTypeManager,&#10    MessengerInterface $messenger,&#10  ) {&#10    parent::__construct($configuration, $plugin_id, $plugin_definition);&#10    $this->setMessenger($messenger);&#10&#10    // @todo Unify 'entity field'/'field_name' instead of converting back and&#10    // forth. https://www.drupal.org/node/2410779&#10    if (isset($this->definition['entity field'])) {&#10      $this->definition['field_name'] = $this->definition['entity field'];&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): EntityReference {&#10    return new static(&#10      $configuration,&#10      $plugin_id,&#10      $plugin_definition,&#10      $container->get('plugin.manager.entity_reference_selection'),&#10      $container->get('entity_type.manager'),&#10      $container->get('messenger'),&#10    );&#10  }&#10&#10  /**&#10   * Gets the entity reference selection handler.&#10   *&#10   * @param string|null $sub_handler&#10   *   The sub handler to get an instance of or NULL for the current selection.&#10   *&#10   * @return \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface&#10   *   The selection handler plugin instance.&#10   */&#10  protected function getSelectionHandler(?string $sub_handler = NULL): SelectionInterface {&#10    // Default values for the handler.&#10    $handler_settings = $this->options['sub_handler_settings'] ?? [];&#10    $handler_settings['handler'] = $sub_handler;&#10    $handler_settings['target_type'] = $this->getReferencedEntityType()->id();&#10    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface */&#10    return $this->selectionPluginManager->getInstance($handler_settings);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function defineOptions(): array {&#10    $options = parent::defineOptions();&#10    $options['sub_handler'] = [&#10      'default' => 'default:' . $this->getReferencedEntityType()->id(),&#10    ];&#10    $options['sub_handler_settings'] = ['default' => []];&#10    $options['widget'] = ['default' => static::WIDGET_AUTOCOMPLETE];&#10    return $options;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function hasExtraOptions(): bool {&#10    return TRUE;&#10  }&#10&#10  /**&#10   * Get all selection plugins for this entity type.&#10   *&#10   * @return string[]&#10   *   The selection handlers available for the target entity ID of the filter.&#10   */&#10  protected function getSubHandlerOptions(): array {&#10    if ($this->handlerOptions) {&#10      return $this->handlerOptions;&#10    }&#10    $entity_type = $this->getReferencedEntityType();&#10    $selection_plugins = $this->selectionPluginManager->getSelectionGroups($entity_type->id());&#10    $this->handlerOptions = [];&#10    foreach (array_keys($selection_plugins) as $selection_group_id) {&#10      // We only display base plugins (e.g. 'default', 'views', ...).&#10      if (array_key_exists($selection_group_id, $selection_plugins[$selection_group_id])) {&#10        $this->handlerOptions[$selection_group_id] = (string) $selection_plugins[$selection_group_id][$selection_group_id]['label'];&#10      }&#10      elseif (array_key_exists($selection_group_id . ':' . $entity_type->id(), $selection_plugins[$selection_group_id])) {&#10        $selection_group_plugin = $selection_group_id . ':' . $entity_type->id();&#10        $this->handlerOptions[$selection_group_plugin] = (string) $selection_plugins[$selection_group_id][$selection_group_plugin]['base_plugin_label'];&#10      }&#10    }&#10    return $this->handlerOptions;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function buildExtraOptionsForm(&$form, FormStateInterface $form_state): void {&#10    $form['sub_handler'] = [&#10      '#type' => 'select',&#10      '#title' => $this->t('Reference method'),&#10      '#options' => $this->getSubHandlerOptions(),&#10      '#default_value' => $this->options['sub_handler'],&#10      '#required' => TRUE,&#10    ];&#10&#10    // We store the settings from any sub handler in sub_handler_settings, but&#10    // in this form, we have multiple sub handlers conditionally displayed.&#10    // Copy the active sub_handler_settings into the handler specific settings&#10    // to set the defaults to match the saved options on build.&#10    if (!empty($this->options['sub_handler']) && !empty($this->options['sub_handler_settings'])) {&#10      $this->options[static::SUBFORM_PREFIX . $this->options['sub_handler']] = $this->options['sub_handler_settings'];&#10    }&#10&#10    foreach ($this->getSubHandlerOptions() as $sub_handler => $sub_handler_label) {&#10      $subform_key = static::SUBFORM_PREFIX . $sub_handler;&#10      $subform = [&#10        '#type' => 'fieldset',&#10        '#title' => $this->t('Reference type "@type"', [&#10          '@type' => $sub_handler_label,&#10        ]),&#10        '#tree' => TRUE,&#10        '#parents' => [&#10          'options',&#10          $subform_key,&#10        ],&#10        // Make the sub handler settings conditional on the selected selection&#10        // handler.&#10        '#states' => [&#10          'visible' => [&#10            'select[name="options[sub_handler]"]' => ['value' => $sub_handler],&#10          ],&#10        ],&#10      ];&#10&#10      // Build the sub form and sub for state.&#10      $selection_handler = $this->getSelectionHandler($sub_handler);&#10      if (!empty($this->options[$subform_key])) {&#10        $selection_config = $selection_handler->getConfiguration();&#10        $selection_config = NestedArray::mergeDeepArray([&#10          $selection_config,&#10          $this->options[$subform_key],&#10        ], TRUE);&#10        $selection_handler->setConfiguration($selection_config);&#10      }&#10      $subform_state = SubformState::createForSubform($subform, $form, $form_state);&#10      $sub_handler_settings = $selection_handler->buildConfigurationForm($subform, $subform_state);&#10&#10      if ($selection_handler instanceof ViewsSelection) {&#10        if (isset($sub_handler_settings['view']['no_view_help'])) {&#10          // If there are no views with entity reference displays,&#10          // ViewsSelection still validates the view.&#10          // This will prevent form config extra form submission,&#10          // so we remove it here.&#10          unset($sub_handler_settings['view']['#element_validate']);&#10        }&#10      }&#10      else {&#10        // Remove unnecessary and inappropriate handler settings from the&#10        // filter config form.&#10        $sub_handler_settings['target_bundles_update']['#access'] = FALSE;&#10        $sub_handler_settings['auto_create']['#access'] = FALSE;&#10        $sub_handler_settings['auto_create_bundle']['#access'] = FALSE;&#10      }&#10&#10      $subform = NestedArray::mergeDeepArray([&#10        $subform,&#10        $sub_handler_settings,&#10      ], TRUE);&#10&#10      $form[$subform_key] = $subform;&#10      $this->cleanUpSubformChildren($form[$subform_key]);&#10    }&#10&#10    $form['widget'] = [&#10      '#type' => 'radios',&#10      '#title' => $this->t('Selection type'),&#10      '#default_value' => $this->options['widget'],&#10      '#options' => [&#10        static::WIDGET_SELECT => $this->t('Select list'),&#10        static::WIDGET_AUTOCOMPLETE => $this->t('Autocomplete'),&#10      ],&#10      '#description' => $this->t('For performance and UX reasons, the maximum count of selectable entities for the "Select list" selection type is limited to @count. If more is expected, select "Autocomplete" instead.', [&#10        '@count' => static::WIDGET_SELECT_LIMIT,&#10      ]),&#10    ];&#10  }&#10&#10  /**&#10   * Clean up subform children for properties that could cause problems.&#10   *&#10   * Views modal forms do not work with required or ajax elements.&#10   *&#10   * @param array $element&#10   *   The form element.&#10   */&#10  protected function cleanUpSubformChildren(array &$element): void {&#10    // Remove the required property to prevent focus errors.&#10    if (isset($element['#required']) && $element['#required']) {&#10      $element['#required'] = FALSE;&#10      $element['#element_validate'][] = [static::class, 'validateRequired'];&#10    }&#10&#10    // Remove the ajax property as it does not work.&#10    if (!empty($element['#ajax'])) {&#10      unset($element['#ajax']);&#10    }&#10&#10    // Recursively apply to nested fields within the handler sub form.&#10    foreach (Element::children($element) as $delta) {&#10      $this->cleanUpSubformChildren($element[$delta]);&#10    }&#10  }&#10&#10  /**&#10   * Validates that a required field for a sub handler has a value.&#10   *&#10   * @param array $element&#10   *   The cardinality form render array.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The form state.&#10   */&#10  public static function validateRequired(array &$element, FormStateInterface $form_state): void {&#10    if (!empty($element['value'])) {&#10      return;&#10    }&#10&#10    // Config extra handler does not output validation messages and&#10    // closes the modal with no feedback to the user.&#10    // @todo https://www.drupal.org/project/drupal/issues/3163740.&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validateExtraOptionsForm($form, FormStateInterface $form_state): void {&#10    $options = $form_state->getValue('options');&#10    $sub_handler = $options['sub_handler'];&#10    $subform = $form[static::SUBFORM_PREFIX . $sub_handler];&#10    $subform_state = SubformState::createForSubform($subform, $form, $form_state);&#10&#10    // Copy handler_settings from options to settings to be compatible with&#10    // selection plugins.&#10    $subform_options = $form_state->getValue([&#10      'options',&#10      static::SUBFORM_PREFIX . $sub_handler,&#10    ]);&#10    $subform_state->setValue([&#10      'settings',&#10    ], $subform_options);&#10    $this->getSelectionHandler($sub_handler)&#10      ->validateConfigurationForm($subform, $subform_state);&#10&#10    // Store the sub handler options in sub_handler_settings.&#10    $form_state->setValue(['options', 'sub_handler_settings'], $subform_options);&#10&#10    // Remove options that are not from the selected sub_handler.&#10    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {&#10      if (isset($options[static::SUBFORM_PREFIX . $sub_handler_option])) {&#10        $form_state->unsetValue(['options', static::SUBFORM_PREFIX . $sub_handler_option]);&#10      }&#10    }&#10&#10    parent::validateExtraOptionsForm($form, $form_state);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function submitExtraOptionsForm($form, FormStateInterface $form_state): void {&#10    $sub_handler = $form_state->getValue('options')['sub_handler'];&#10&#10    // Ensure that only the select sub handler option is saved.&#10    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {&#10      if ($sub_handler_option == $sub_handler) {&#10        $this->options['sub_handler_settings'] = $this->options[static::SUBFORM_PREFIX . $sub_handler_option];&#10      }&#10      if (isset($this->options[static::SUBFORM_PREFIX . $sub_handler_option])) {&#10        unset($this->options[static::SUBFORM_PREFIX . $sub_handler_option]);&#10      }&#10    }&#10  }&#10&#10  /**&#10   * Fixes the issue with switching between the widgets in the view editor.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function alternateWidgetsDefaultNormalize(array &$form, FormStateInterface $form_state): void {&#10    $field_id = '_' . $this->getFieldDefinition()->getName() . '-widget';&#10    $form[$field_id] = [&#10      '#type' => 'hidden',&#10      '#value' => $this->options['widget'],&#10    ];&#10&#10    $previous_widget = $form_state->getUserInput()[$field_id] ?? NULL;&#10    if ($previous_widget && $previous_widget !== $this->options['widget']) {&#10      $form['value']['#value_callback'] = function ($element) {&#10        return $element['#default_value'] ?? '';&#10      };&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function valueForm(&$form, FormStateInterface $form_state) {&#10    if (!isset($this->options['sub_handler'])) {&#10      return;&#10    }&#10    switch ($this->options['widget']) {&#10      case static::WIDGET_SELECT:&#10        $this->valueFormAddSelect($form, $form_state);&#10        break;&#10&#10      case static::WIDGET_AUTOCOMPLETE:&#10        $this->valueFormAddAutocomplete($form, $form_state);&#10        break;&#10    }&#10&#10    if (!empty($this->view->live_preview)) {&#10      $this->alternateWidgetsDefaultNormalize($form, $form_state);&#10    }&#10&#10    // Show or hide the value field depending on the operator field.&#10    $is_exposed = $this->options['exposed'];&#10&#10    $visible = [];&#10    if ($is_exposed) {&#10      $operator_field = ($this->options['expose']['use_operator'] && $this->options['expose']['operator_id']) ? $this->options['expose']['operator_id'] : NULL;&#10    }&#10    else {&#10      $operator_field = 'options[operator]';&#10      $visible[] = [&#10        ':input[name="options[expose_button][checkbox][checkbox]"]' => ['checked' => TRUE],&#10        ':input[name="options[expose][use_operator]"]' => ['checked' => TRUE],&#10        ':input[name="options[expose][operator_id]"]' => ['empty' => FALSE],&#10      ];&#10    }&#10    if ($operator_field) {&#10      foreach ($this->operatorValues(1) as $operator) {&#10        $visible[] = [&#10          ':input[name="' . $operator_field . '"]' => ['value' => $operator],&#10        ];&#10      }&#10      $form['value']['#states'] = ['visible' => $visible];&#10    }&#10&#10    if (!$is_exposed) {&#10      // Retain the helper option.&#10      $this->helper->buildOptionsForm($form, $form_state);&#10&#10      // Show help text if not exposed to end users.&#10      $form['value']['#description'] = $this->t('Leave blank for all. Otherwise, the first selected item will be the default instead of "Any".');&#10    }&#10  }&#10&#10  /**&#10   * Adds an autocomplete element to the form.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function valueFormAddAutocomplete(array &$form, FormStateInterface $form_state): void {&#10    $referenced_type = $this->getReferencedEntityType();&#10    $form['value'] = [&#10      '#title' => $this->t('Select %entity_types', ['%entity_types' => $referenced_type->getPluralLabel()]),&#10      '#type' => 'entity_autocomplete',&#10      '#default_value' => EntityAutocomplete::getEntityLabels($this->getDefaultSelectedEntities()),&#10      '#tags' => TRUE,&#10      '#process_default_value' => FALSE,&#10      '#target_type' => $referenced_type->id(),&#10      '#selection_handler' => $this->options['sub_handler'],&#10      '#selection_settings' => $this->options['sub_handler_settings'],&#10      // Validation is done by validateExposed().&#10      '#validate_reference' => FALSE,&#10    ];&#10  }&#10&#10  /**&#10   * Adds a select element to the form.&#10   *&#10   * @param array $form&#10   *   Associative array containing the structure of the form, passed by&#10   *   reference.&#10   * @param \Drupal\Core\Form\FormStateInterface $form_state&#10   *   The current state of the form.&#10   */&#10  protected function valueFormAddSelect(array &$form, FormStateInterface $form_state): void {&#10    $is_exposed = $form_state->get('exposed');&#10&#10    $options = $this->getValueOptions();&#10    $default_value = (array) $this->value;&#10&#10    if ($is_exposed) {&#10      $identifier = $this->options['expose']['identifier'];&#10&#10      if (!empty($this->options['expose']['reduce'])) {&#10        $options = $this->reduceValueOptions($options);&#10&#10        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {&#10          $default_value = [];&#10        }&#10      }&#10&#10      if (empty($this->options['expose']['multiple'])) {&#10        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {&#10          $default_value = static::ALL_VALUE;&#10        }&#10        elseif (empty($default_value)) {&#10          $keys = array_keys($options);&#10          $default_value = array_shift($keys);&#10        }&#10        else {&#10          // Set the default value to be the first element of the array.&#10          $default_value = reset($default_value);&#10        }&#10      }&#10    }&#10&#10    $referenced_type = $this->getReferencedEntityType();&#10    $form['value'] = [&#10      '#type' => 'select',&#10      '#title' => $this->t('Select @entity_types', ['@entity_types' => $referenced_type->getPluralLabel()]),&#10      '#multiple' => TRUE,&#10      '#options' => $options,&#10      // Set a minimum size to facilitate easier selection of entities.&#10      '#size' => min(8, count($options)),&#10      '#default_value' => $default_value,&#10    ];&#10&#10    $user_input = $form_state->getUserInput();&#10    if ($is_exposed && isset($identifier) && !isset($user_input[$identifier])) {&#10      $user_input[$identifier] = $default_value;&#10      $form_state->setUserInput($user_input);&#10    }&#10  }&#10&#10  /**&#10   * Gets all entities selected by default.&#10   *&#10   * @return \Drupal\Core\Entity\EntityInterface[]&#10   *   All entities selected by default, or an empty array, if none.&#10   */&#10  protected function getDefaultSelectedEntities(): array {&#10    $referenced_type_id = $this->getReferencedEntityType()->id();&#10    $entity_storage = $this->entityTypeManager->getStorage($referenced_type_id);&#10&#10    return !empty($this->value) && !isset($this->value[static::ALL_VALUE]) ? $entity_storage->loadMultiple($this->value) : [];&#10  }&#10&#10  /**&#10   * Returns the value options for a select widget.&#10   *&#10   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $selection_handler&#10   *   The selection handler.&#10   *&#10   * @return string[]&#10   *   The options.&#10   *&#10   * @see \Drupal\views\Plugin\views\filter\InOperator::getValueOptions()&#10   */&#10  protected function getValueOptionsCallback(SelectionInterface $selection_handler): array {&#10    $entity_data = [];&#10    if ($this->options['widget'] === static::WIDGET_SELECT) {&#10      $entity_data = $selection_handler->getReferenceableEntities(NULL, 'CONTAINS', static::WIDGET_SELECT_LIMIT);&#10    }&#10&#10    $options = [];&#10    foreach ($entity_data as $bundle) {&#10      foreach ($bundle as $id => $entity_label) {&#10        $options[$id] = $entity_label;&#10      }&#10    }&#10&#10    return $options;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validate(): array {&#10    // InOperator validation logic is not appropriate for entity reference&#10    // autocomplete or select, so prevent parent class validation from&#10    // occurring.&#10    return [];&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function acceptExposedInput($input): bool {&#10    if (empty($this->options['exposed'])) {&#10      return TRUE;&#10    }&#10&#10    // We need to know the operator, which is normally set in&#10    // \Drupal\views\Plugin\views\filter\FilterPluginBase::acceptExposedInput(),&#10    // before we actually call the parent version of ourselves.&#10    if (!empty($this->options['expose']['use_operator']) && !empty($this->options['expose']['operator_id']) && isset($input[$this->options['expose']['operator_id']])) {&#10      $this->operator = $input[$this->options['expose']['operator_id']];&#10    }&#10&#10    // If view is an attachment and is inheriting exposed filters, then assume&#10    // exposed input has already been validated.&#10    if (!empty($this->view->is_attachment) && $this->view->display_handler->usesExposed()) {&#10      $this->validatedExposedInput = (array) $this->view->exposed_raw_input[$this->options['expose']['identifier']];&#10    }&#10&#10    // If we're checking for EMPTY or NOT, we don't need any input, and we can&#10    // say that our input conditions are met by just having the right operator.&#10    if ($this->operator == 'empty' || $this->operator == 'not empty') {&#10      return TRUE;&#10    }&#10&#10    // If it's non-required and there's no value don't bother filtering.&#10    if (!$this->options['expose']['required'] && empty($this->validatedExposedInput)) {&#10      return FALSE;&#10    }&#10&#10    $accept_exposed_input = parent::acceptExposedInput($input);&#10    if ($accept_exposed_input) {&#10      // If we have previously validated input, override.&#10      if (isset($this->validatedExposedInput)) {&#10        $this->value = $this->validatedExposedInput;&#10      }&#10    }&#10&#10    return $accept_exposed_input;&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function validateExposed(&$form, FormStateInterface $form_state): void {&#10    if (empty($this->options['exposed'])) {&#10      return;&#10    }&#10&#10    $identifier = $this->options['expose']['identifier'];&#10&#10    // Set the validated exposed input from the select list when not the all&#10    // value option.&#10    if ($this->options['widget'] == static::WIDGET_SELECT) {&#10      if ($form_state->getValue($identifier) != static::ALL_VALUE) {&#10        $this->validatedExposedInput = (array) $form_state->getValue($identifier);&#10      }&#10      return;&#10    }&#10&#10    if (empty($identifier)) {&#10      return;&#10    }&#10&#10    $values = $form_state->getValue($identifier);&#10    if (!is_array($values)) {&#10      return;&#10    }&#10&#10    foreach ($values as $value) {&#10      $this->validatedExposedInput[] = $value['target_id'];&#10    }&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function valueSubmit($form, FormStateInterface $form_state): void {&#10    // Prevent the parent class InOperator from altering the array.&#10    // @see \Drupal\views\Plugin\views\filter\InOperator::valueSubmit().&#10  }&#10&#10  /**&#10   * Gets the target entity type referenced by this field.&#10   *&#10   * @return \Drupal\Core\Entity\EntityTypeInterface&#10   *   The entity type definition.&#10   */&#10  protected function getReferencedEntityType(): EntityTypeInterface {&#10    $field_def = $this->getFieldDefinition();&#10    $entity_type_id = $field_def->getItemDefinition()&#10      ->getSetting('target_type');&#10    return $this->entityTypeManager->getDefinition($entity_type_id);&#10  }&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function calculateDependencies(): array {&#10    $dependencies = parent::calculateDependencies();&#10&#10    $sub_handler = $this->options['sub_handler'];&#10    $selection_handler = $this->getSelectionHandler($sub_handler);&#10    if ($selection_handler instanceof DependentPluginInterface) {&#10      $dependencies += $selection_handler->calculateDependencies();&#10    }&#10&#10    foreach ($this->getDefaultSelectedEntities() as $entity) {&#10      $dependencies[$entity->getConfigDependencyKey()][] = $entity->getConfigDependencyName();&#10    }&#10&#10    return $dependencies;&#10  }&#10&#10}&#10
\ No newline at end of file
+<?php
+
+namespace Drupal\views\Plugin\views\filter;
+
+use Drupal\Component\Plugin\DependentPluginInterface;
+use Drupal\Component\Utility\NestedArray;
+use Drupal\Core\Entity\Element\EntityAutocomplete;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Form\SubformState;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\Render\Element;
+use Drupal\views\FieldAPIHandlerTrait;
+use Drupal\views\Plugin\EntityReferenceSelection\ViewsSelection;
+use Drupal\views\Plugin\views\display\DisplayPluginBase;
+use Drupal\views\ViewExecutable;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Filters a view by entity references.
+ *
+ * @ingroup views_filter_handlers
+ *
+ * @ViewsFilter("entity_reference")
+ */
+class EntityReference extends ManyToOne {
+
+  use FieldAPIHandlerTrait;
+
+  /**
+   * Type for the autocomplete filter format.
+   */
+  const WIDGET_AUTOCOMPLETE = 'autocomplete';
+
+  /**
+   * Type for the select list filter format.
+   */
+  const WIDGET_SELECT = 'select';
+
+  /**
+   * Max number of entities in the select widget.
+   */
+  const WIDGET_SELECT_LIMIT = 100;
+
+  /**
+   * The subform prefix.
+   */
+  const SUBFORM_PREFIX = 'reference_';
+
+  /**
+   * The all value.
+   */
+  const ALL_VALUE = 'All';
+
+  /**
+   * The selection handlers available for the target entity ID of the filter.
+   *
+   * @var array|null
+   */
+  protected ?array $handlerOptions = NULL;
+
+  /**
+   * Validated exposed input that will be set as the input value.
+   *
+   * If the select list widget is chosen.
+   *
+   * @var array
+   */
+  protected array $validatedExposedInput;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function init(ViewExecutable $view, DisplayPluginBase $display, ?array &$options = NULL): void {
+    parent::init($view, $display, $options);
+    if (empty($this->definition['field_name'])) {
+      $this->definition['field_name'] = $options['field'];
+    }
+
+    $this->definition['options callback'] = [$this, 'getValueOptionsCallback'];
+    $this->definition['options arguments'] = [$this->getSelectionHandler($this->options['sub_handler'])];
+  }
+
+  /**
+   * Constructs an EntityReference object.
+   */
+  public function __construct(
+    array $configuration,
+    $plugin_id,
+    $plugin_definition,
+    protected SelectionPluginManagerInterface $selectionPluginManager,
+    protected EntityTypeManagerInterface $entityTypeManager,
+    MessengerInterface $messenger,
+  ) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->setMessenger($messenger);
+
+    // @todo Unify 'entity field'/'field_name' instead of converting back and
+    // forth. https://www.drupal.org/node/2410779
+    if (isset($this->definition['entity field'])) {
+      $this->definition['field_name'] = $this->definition['entity field'];
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): EntityReference {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('plugin.manager.entity_reference_selection'),
+      $container->get('entity_type.manager'),
+      $container->get('messenger'),
+    );
+  }
+
+  /**
+   * Gets the entity reference selection handler.
+   *
+   * @param string|null $sub_handler
+   *   The sub handler to get an instance of or NULL for the current selection.
+   *
+   * @return \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface
+   *   The selection handler plugin instance.
+   */
+  protected function getSelectionHandler(?string $sub_handler = NULL): SelectionInterface {
+    // Default values for the handler.
+    $handler_settings = $this->options['sub_handler_settings'] ?? [];
+    $handler_settings['handler'] = $sub_handler;
+    $handler_settings['target_type'] = $this->getReferencedEntityType()->id();
+    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface */
+    return $this->selectionPluginManager->getInstance($handler_settings);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function defineOptions(): array {
+    $options = parent::defineOptions();
+    $options['sub_handler'] = [
+      'default' => 'default:' . $this->getReferencedEntityType()->id(),
+    ];
+    $options['sub_handler_settings'] = ['default' => []];
+    $options['widget'] = ['default' => static::WIDGET_AUTOCOMPLETE];
+    return $options;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function hasExtraOptions(): bool {
+    return TRUE;
+  }
+
+  /**
+   * Get all selection plugins for this entity type.
+   *
+   * @return string[]
+   *   The selection handlers available for the target entity ID of the filter.
+   */
+  protected function getSubHandlerOptions(): array {
+    if ($this->handlerOptions) {
+      return $this->handlerOptions;
+    }
+    $entity_type = $this->getReferencedEntityType();
+    $selection_plugins = $this->selectionPluginManager->getSelectionGroups($entity_type->id());
+    $this->handlerOptions = [];
+    foreach (array_keys($selection_plugins) as $selection_group_id) {
+      // We only display base plugins (e.g. 'default', 'views', ...).
+      if (array_key_exists($selection_group_id, $selection_plugins[$selection_group_id])) {
+        $this->handlerOptions[$selection_group_id] = (string) $selection_plugins[$selection_group_id][$selection_group_id]['label'];
+      }
+      elseif (array_key_exists($selection_group_id . ':' . $entity_type->id(), $selection_plugins[$selection_group_id])) {
+        $selection_group_plugin = $selection_group_id . ':' . $entity_type->id();
+        $this->handlerOptions[$selection_group_plugin] = (string) $selection_plugins[$selection_group_id][$selection_group_plugin]['base_plugin_label'];
+      }
+    }
+    return $this->handlerOptions;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildExtraOptionsForm(&$form, FormStateInterface $form_state): void {
+    $form['sub_handler'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Reference method'),
+      '#options' => $this->getSubHandlerOptions(),
+      '#default_value' => $this->options['sub_handler'],
+      '#required' => TRUE,
+    ];
+
+    // We store the settings from any sub handler in sub_handler_settings, but
+    // in this form, we have multiple sub handlers conditionally displayed.
+    // Copy the active sub_handler_settings into the handler specific settings
+    // to set the defaults to match the saved options on build.
+    if (!empty($this->options['sub_handler']) && !empty($this->options['sub_handler_settings'])) {
+      $this->options[static::SUBFORM_PREFIX . $this->options['sub_handler']] = $this->options['sub_handler_settings'];
+    }
+
+    foreach ($this->getSubHandlerOptions() as $sub_handler => $sub_handler_label) {
+      $subform_key = static::SUBFORM_PREFIX . $sub_handler;
+      $subform = [
+        '#type' => 'fieldset',
+        '#title' => $this->t('Reference type "@type"', [
+          '@type' => $sub_handler_label,
+        ]),
+        '#tree' => TRUE,
+        '#parents' => [
+          'options',
+          $subform_key,
+        ],
+        // Make the sub handler settings conditional on the selected selection
+        // handler.
+        '#states' => [
+          'visible' => [
+            'select[name="options[sub_handler]"]' => ['value' => $sub_handler],
+          ],
+        ],
+      ];
+
+      // Build the sub form and sub for state.
+      $selection_handler = $this->getSelectionHandler($sub_handler);
+      if (!empty($this->options[$subform_key])) {
+        $selection_config = $selection_handler->getConfiguration();
+        $selection_config = NestedArray::mergeDeepArray([
+          $selection_config,
+          $this->options[$subform_key],
+        ], TRUE);
+        $selection_handler->setConfiguration($selection_config);
+      }
+      $subform_state = SubformState::createForSubform($subform, $form, $form_state);
+      $sub_handler_settings = $selection_handler->buildConfigurationForm($subform, $subform_state);
+
+      if ($selection_handler instanceof ViewsSelection) {
+        if (isset($sub_handler_settings['view']['no_view_help'])) {
+          // If there are no views with entity reference displays,
+          // ViewsSelection still validates the view.
+          // This will prevent form config extra form submission,
+          // so we remove it here.
+          unset($sub_handler_settings['view']['#element_validate']);
+        }
+      }
+      else {
+        // Remove unnecessary and inappropriate handler settings from the
+        // filter config form.
+        $sub_handler_settings['target_bundles_update']['#access'] = FALSE;
+        $sub_handler_settings['auto_create']['#access'] = FALSE;
+        $sub_handler_settings['auto_create_bundle']['#access'] = FALSE;
+      }
+
+      $subform = NestedArray::mergeDeepArray([
+        $subform,
+        $sub_handler_settings,
+      ], TRUE);
+
+      $form[$subform_key] = $subform;
+      $this->cleanUpSubformChildren($form[$subform_key]);
+    }
+
+    $form['widget'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Selection type'),
+      '#default_value' => $this->options['widget'],
+      '#options' => [
+        static::WIDGET_SELECT => $this->t('Select list'),
+        static::WIDGET_AUTOCOMPLETE => $this->t('Autocomplete'),
+      ],
+      '#description' => $this->t('For performance and UX reasons, the maximum count of selectable entities for the "Select list" selection type is limited to @count. If more is expected, select "Autocomplete" instead.', [
+        '@count' => static::WIDGET_SELECT_LIMIT,
+      ]),
+    ];
+  }
+
+  /**
+   * Clean up subform children for properties that could cause problems.
+   *
+   * Views modal forms do not work with required or ajax elements.
+   *
+   * @param array $element
+   *   The form element.
+   */
+  protected function cleanUpSubformChildren(array &$element): void {
+    // Remove the required property to prevent focus errors.
+    if (isset($element['#required']) && $element['#required']) {
+      $element['#required'] = FALSE;
+      $element['#element_validate'][] = [static::class, 'validateRequired'];
+    }
+
+    // Remove the ajax property as it does not work.
+    if (!empty($element['#ajax'])) {
+      unset($element['#ajax']);
+    }
+
+    // Recursively apply to nested fields within the handler sub form.
+    foreach (Element::children($element) as $delta) {
+      $this->cleanUpSubformChildren($element[$delta]);
+    }
+  }
+
+  /**
+   * Validates that a required field for a sub handler has a value.
+   *
+   * @param array $element
+   *   The cardinality form render array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state.
+   */
+  public static function validateRequired(array &$element, FormStateInterface $form_state): void {
+    if (!empty($element['value'])) {
+      return;
+    }
+
+    // Config extra handler does not output validation messages and
+    // closes the modal with no feedback to the user.
+    // @todo https://www.drupal.org/project/drupal/issues/3163740.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateExtraOptionsForm($form, FormStateInterface $form_state): void {
+    $options = $form_state->getValue('options');
+    $sub_handler = $options['sub_handler'];
+    $subform = $form[static::SUBFORM_PREFIX . $sub_handler];
+    $subform_state = SubformState::createForSubform($subform, $form, $form_state);
+
+    // Copy handler_settings from options to settings to be compatible with
+    // selection plugins.
+    $subform_options = $form_state->getValue([
+      'options',
+      static::SUBFORM_PREFIX . $sub_handler,
+    ]);
+    $subform_state->setValue([
+      'settings',
+    ], $subform_options);
+    $this->getSelectionHandler($sub_handler)
+      ->validateConfigurationForm($subform, $subform_state);
+
+    // Store the sub handler options in sub_handler_settings.
+    $form_state->setValue(['options', 'sub_handler_settings'], $subform_options);
+
+    // Remove options that are not from the selected sub_handler.
+    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {
+      if (isset($options[static::SUBFORM_PREFIX . $sub_handler_option])) {
+        $form_state->unsetValue(['options', static::SUBFORM_PREFIX . $sub_handler_option]);
+      }
+    }
+
+    parent::validateExtraOptionsForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitExtraOptionsForm($form, FormStateInterface $form_state): void {
+    $sub_handler = $form_state->getValue('options')['sub_handler'];
+
+    // Ensure that only the select sub handler option is saved.
+    foreach (array_keys($this->getSubHandlerOptions()) as $sub_handler_option) {
+      if ($sub_handler_option == $sub_handler) {
+        $this->options['sub_handler_settings'] = $this->options[static::SUBFORM_PREFIX . $sub_handler_option];
+      }
+      if (isset($this->options[static::SUBFORM_PREFIX . $sub_handler_option])) {
+        unset($this->options[static::SUBFORM_PREFIX . $sub_handler_option]);
+      }
+    }
+  }
+
+  /**
+   * Fixes the issue with switching between the widgets in the view editor.
+   *
+   * @param array $form
+   *   Associative array containing the structure of the form, passed by
+   *   reference.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  protected function alternateWidgetsDefaultNormalize(array &$form, FormStateInterface $form_state): void {
+    $field_id = '_' . $this->getFieldDefinition()->getName() . '-widget';
+    $form[$field_id] = [
+      '#type' => 'hidden',
+      '#value' => $this->options['widget'],
+    ];
+
+    $previous_widget = $form_state->getUserInput()[$field_id] ?? NULL;
+    if ($previous_widget && $previous_widget !== $this->options['widget']) {
+      $form['value']['#value_callback'] = function ($element) {
+        return $element['#default_value'] ?? '';
+      };
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function valueForm(&$form, FormStateInterface $form_state) {
+    if (!isset($this->options['sub_handler'])) {
+      return;
+    }
+    switch ($this->options['widget']) {
+      case static::WIDGET_SELECT:
+        $this->valueFormAddSelect($form, $form_state);
+        break;
+
+      case static::WIDGET_AUTOCOMPLETE:
+        $this->valueFormAddAutocomplete($form, $form_state);
+        break;
+    }
+
+    if (!empty($this->view->live_preview)) {
+      $this->alternateWidgetsDefaultNormalize($form, $form_state);
+    }
+
+    // Show or hide the value field depending on the operator field.
+    $is_exposed = $this->options['exposed'];
+
+    $visible = [];
+    if ($is_exposed) {
+      $operator_field = ($this->options['expose']['use_operator'] && $this->options['expose']['operator_id']) ? $this->options['expose']['operator_id'] : NULL;
+    }
+    else {
+      $operator_field = 'options[operator]';
+      $visible[] = [
+        ':input[name="options[expose_button][checkbox][checkbox]"]' => ['checked' => TRUE],
+        ':input[name="options[expose][use_operator]"]' => ['checked' => TRUE],
+        ':input[name="options[expose][operator_id]"]' => ['empty' => FALSE],
+      ];
+    }
+    if ($operator_field) {
+      foreach ($this->operatorValues(1) as $operator) {
+        $visible[] = [
+          ':input[name="' . $operator_field . '"]' => ['value' => $operator],
+        ];
+      }
+      $form['value']['#states'] = ['visible' => $visible];
+    }
+
+    if (!$is_exposed) {
+      // Retain the helper option.
+      $this->helper->buildOptionsForm($form, $form_state);
+
+      // Show help text if not exposed to end users.
+      $form['value']['#description'] = $this->t('Leave blank for all. Otherwise, the first selected item will be the default instead of "Any".');
+    }
+  }
+
+  /**
+   * Adds an autocomplete element to the form.
+   *
+   * @param array $form
+   *   Associative array containing the structure of the form, passed by
+   *   reference.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  protected function valueFormAddAutocomplete(array &$form, FormStateInterface $form_state): void {
+    $referenced_type = $this->getReferencedEntityType();
+    $form['value'] = [
+      '#title' => $this->t('Select %entity_types', ['%entity_types' => $referenced_type->getPluralLabel()]),
+      '#type' => 'entity_autocomplete',
+      '#default_value' => EntityAutocomplete::getEntityLabels($this->getDefaultSelectedEntities()),
+      '#tags' => TRUE,
+      '#process_default_value' => FALSE,
+      '#target_type' => $referenced_type->id(),
+      '#selection_handler' => $this->options['sub_handler'],
+      '#selection_settings' => $this->options['sub_handler_settings'],
+      // Validation is done by validateExposed().
+      '#validate_reference' => FALSE,
+    ];
+  }
+
+  /**
+   * Adds a select element to the form.
+   *
+   * @param array $form
+   *   Associative array containing the structure of the form, passed by
+   *   reference.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  protected function valueFormAddSelect(array &$form, FormStateInterface $form_state): void {
+    $is_exposed = $form_state->get('exposed');
+
+    $options = $this->getValueOptions();
+    $default_value = (array) $this->value;
+
+    if ($is_exposed) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (!empty($this->options['expose']['reduce'])) {
+        $options = $this->reduceValueOptions($options);
+
+        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {
+          $default_value = [];
+        }
+      }
+
+      if (empty($this->options['expose']['multiple'])) {
+        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {
+          $default_value = static::ALL_VALUE;
+        }
+        elseif (empty($default_value)) {
+          $keys = array_keys($options);
+          $default_value = array_shift($keys);
+        }
+        else {
+          // Set the default value to be the first element of the array.
+          $default_value = reset($default_value);
+        }
+      }
+    }
+
+    $referenced_type = $this->getReferencedEntityType();
+    $form['value'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Select @entity_types', ['@entity_types' => $referenced_type->getPluralLabel()]),
+      '#multiple' => TRUE,
+      '#options' => $options,
+      // Set a minimum size to facilitate easier selection of entities.
+      '#size' => min(8, count($options)),
+      '#default_value' => $default_value,
+    ];
+
+    $user_input = $form_state->getUserInput();
+    if ($is_exposed && isset($identifier) && !isset($user_input[$identifier])) {
+      $user_input[$identifier] = $default_value;
+      $form_state->setUserInput($user_input);
+    }
+  }
+
+  /**
+   * Gets all entities selected by default.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface[]
+   *   All entities selected by default, or an empty array, if none.
+   */
+  protected function getDefaultSelectedEntities(): array {
+    $referenced_type_id = $this->getReferencedEntityType()->id();
+    $entity_storage = $this->entityTypeManager->getStorage($referenced_type_id);
+
+    return !empty($this->value) && !isset($this->value[static::ALL_VALUE]) ? $entity_storage->loadMultiple($this->value) : [];
+  }
+
+  /**
+   * Returns the value options for a select widget.
+   *
+   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $selection_handler
+   *   The selection handler.
+   *
+   * @return string[]
+   *   The options.
+   *
+   * @see \Drupal\views\Plugin\views\filter\InOperator::getValueOptions()
+   */
+  protected function getValueOptionsCallback(SelectionInterface $selection_handler): array {
+    $entity_data = [];
+    if ($this->options['widget'] === static::WIDGET_SELECT) {
+      $entity_data = $selection_handler->getReferenceableEntities(NULL, 'CONTAINS', static::WIDGET_SELECT_LIMIT);
+    }
+
+    $options = [];
+    foreach ($entity_data as $bundle) {
+      foreach ($bundle as $id => $entity_label) {
+        $options[$id] = $entity_label;
+      }
+    }
+
+    return $options;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validate(): array {
+    // InOperator validation logic is not appropriate for entity reference
+    // autocomplete or select, so prevent parent class validation from
+    // occurring.
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function acceptExposedInput($input): bool {
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // We need to know the operator, which is normally set in
+    // \Drupal\views\Plugin\views\filter\FilterPluginBase::acceptExposedInput(),
+    // before we actually call the parent version of ourselves.
+    if (!empty($this->options['expose']['use_operator']) && !empty($this->options['expose']['operator_id']) && isset($input[$this->options['expose']['operator_id']])) {
+      $this->operator = $input[$this->options['expose']['operator_id']];
+    }
+
+    // If view is an attachment and is inheriting exposed filters, then assume
+    // exposed input has already been validated.
+    if (!empty($this->view->is_attachment) && $this->view->display_handler->usesExposed()) {
+      $this->validatedExposedInput = (array) $this->view->exposed_raw_input[$this->options['expose']['identifier']];
+    }
+
+    // If we're checking for EMPTY or NOT, we don't need any input, and we can
+    // say that our input conditions are met by just having the right operator.
+    if ($this->operator == 'empty' || $this->operator == 'not empty') {
+      return TRUE;
+    }
+
+    // If it's non-required and there's no value don't bother filtering.
+    if (!$this->options['expose']['required'] && empty($this->validatedExposedInput)) {
+      return FALSE;
+    }
+
+    $accept_exposed_input = parent::acceptExposedInput($input);
+    if ($accept_exposed_input) {
+      // If we have previously validated input, override.
+      if (isset($this->validatedExposedInput)) {
+        $this->value = $this->validatedExposedInput;
+      }
+    }
+
+    return $accept_exposed_input;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateExposed(&$form, FormStateInterface $form_state): void {
+    if (empty($this->options['exposed'])) {
+      return;
+    }
+
+    $identifier = $this->options['expose']['identifier'];
+
+    // Set the validated exposed input from the select list when not the all
+    // value option.
+    if ($this->options['widget'] == static::WIDGET_SELECT) {
+      if ($form_state->getValue($identifier) != static::ALL_VALUE) {
+        $this->validatedExposedInput = (array) $form_state->getValue($identifier);
+      }
+      return;
+    }
+
+    if (empty($identifier)) {
+      return;
+    }
+
+    $values = $form_state->getValue($identifier);
+    if (!is_array($values)) {
+      return;
+    }
+
+    foreach ($values as $value) {
+      $this->validatedExposedInput[] = $value['target_id'];
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function valueSubmit($form, FormStateInterface $form_state): void {
+    // Prevent the parent class InOperator from altering the array.
+    // @see \Drupal\views\Plugin\views\filter\InOperator::valueSubmit().
+  }
+
+  /**
+   * Gets the target entity type referenced by this field.
+   *
+   * @return \Drupal\Core\Entity\EntityTypeInterface
+   *   The entity type definition.
+   */
+  protected function getReferencedEntityType(): EntityTypeInterface {
+    $field_def = $this->getFieldDefinition();
+    $entity_type_id = $field_def->getItemDefinition()
+      ->getSetting('target_type');
+    return $this->entityTypeManager->getDefinition($entity_type_id);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function calculateDependencies(): array {
+    $dependencies = parent::calculateDependencies();
+
+    $sub_handler = $this->options['sub_handler'];
+    $selection_handler = $this->getSelectionHandler($sub_handler);
+    if ($selection_handler instanceof DependentPluginInterface) {
+      $dependencies += $selection_handler->calculateDependencies();
+    }
+
+    foreach ($this->getDefaultSelectedEntities() as $entity) {
+      $dependencies[$entity->getConfigDependencyKey()][] = $entity->getConfigDependencyName();
+    }
+
+    return $dependencies;
+  }
+
+}
+
-- 
GitLab


From 818004c1e5e52ede5b8c062f2ad080a63cb0ba5d Mon Sep 17 00:00:00 2001
From: Scott Euser <scotteuser@gmail.com>
Date: Fri, 2 Aug 2024 08:37:57 +0100
Subject: [PATCH 3/3] Rebuild entity reference file - phpstorm error

---
 ...iews.view.test_filter_entity_reference.yml | 269 ++++++++++++++++-
 .../views.view.test_entity_reference.yml      | 270 +++++++++++++++++-
 .../views_test_entity_reference.info.yml      |   9 +-
 .../views_test_entity_reference.module        |  29 +-
 .../Handler/FilterEntityReferenceTest.php     | 257 ++++++++++++++++-
 .../FilterEntityReferenceWebTest.php          | 139 ++++++++-
 .../FilterEntityReferenceTest.php             | 253 +++++++++++++++-
 .../src/Traits/FilterEntityReferenceTrait.php | 136 ++++++++-
 8 files changed, 1354 insertions(+), 8 deletions(-)

diff --git a/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
index 29a2cc928c08..5a15e68ed0c8 100644
--- a/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
+++ b/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_filter_entity_reference.yml
@@ -1 +1,268 @@
-langcode: en&#10status: true&#10dependencies:&#10  config:&#10    - node.type.page&#10  module:&#10    - node&#10    - user&#10id: test_filter_entity_reference&#10label: test_filter_entity_reference&#10module: views&#10description: ''&#10tag: ''&#10base_table: node_field_data&#10base_field: nid&#10display:&#10  default:&#10    display_plugin: default&#10    id: default&#10    display_title: Master&#10    position: 0&#10    display_options:&#10      access:&#10        type: perm&#10        options:&#10          perm: 'access content'&#10      cache:&#10        type: none&#10        options: {  }&#10      query:&#10        type: views_query&#10        options:&#10          disable_sql_rewrite: false&#10          distinct: false&#10          replica: false&#10          query_comment: ''&#10          query_tags: {  }&#10      exposed_form:&#10        type: basic&#10        options:&#10          submit_button: Apply&#10          reset_button: false&#10          reset_button_label: Reset&#10          exposed_sorts_label: 'Sort by'&#10          expose_sort_order: true&#10          sort_asc_label: Asc&#10          sort_desc_label: Desc&#10      pager:&#10        type: mini&#10        options:&#10          items_per_page: 10&#10          offset: 0&#10          id: 0&#10          total_pages: null&#10          expose:&#10            items_per_page: false&#10            items_per_page_label: 'Items per page'&#10            items_per_page_options: '5, 10, 25, 50'&#10            items_per_page_options_all: false&#10            items_per_page_options_all_label: '- All -'&#10            offset: false&#10            offset_label: Offset&#10          tags:&#10            previous: â€¹â€¹&#10            next: â€ºâ€º&#10      style:&#10        type: default&#10        options:&#10          grouping: {  }&#10          row_class: ''&#10          default_row_class: true&#10          uses_fields: false&#10      row:&#10        type: fields&#10        options:&#10          inline: {  }&#10          separator: ''&#10          hide_empty: false&#10          default_field_elements: true&#10      fields:&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          entity_type: node&#10          entity_field: title&#10          label: ''&#10          alter:&#10            alter_text: false&#10            make_link: false&#10            absolute: false&#10            trim: false&#10            word_boundary: false&#10            ellipsis: false&#10            strip_tags: false&#10            html: false&#10          hide_empty: false&#10          empty_zero: false&#10          settings:&#10            link_to_entity: true&#10          plugin_id: field&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          exclude: false&#10          element_type: ''&#10          element_class: ''&#10          element_label_type: ''&#10          element_label_class: ''&#10          element_label_colon: true&#10          element_wrapper_type: ''&#10          element_wrapper_class: ''&#10          element_default_classes: true&#10          empty: ''&#10          hide_alter_empty: true&#10          click_sort_column: value&#10          type: string&#10          group_column: value&#10          group_columns: {  }&#10          group_rows: true&#10          delta_limit: 0&#10          delta_offset: 0&#10          delta_reversed: false&#10          delta_first_last: false&#10          multi_type: separator&#10          separator: ', '&#10          field_api_classes: false&#10      filters:&#10        status:&#10          value: '1'&#10          table: node_field_data&#10          field: status&#10          plugin_id: boolean&#10          entity_type: node&#10          entity_field: status&#10          id: status&#10          expose:&#10            operator: ''&#10          group: 1&#10        type:&#10          id: type&#10          table: node_field_data&#10          field: type&#10          value:&#10            page: page&#10          entity_type: node&#10          entity_field: type&#10          plugin_id: bundle&#10        field_test_target_id:&#10          id: field_test_target_id&#10          table: node__field_test&#10          field: field_test_target_id&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          operator: or&#10          value: {  }&#10          group: 1&#10          exposed: true&#10          expose:&#10            operator_id: field_test_target_id_op&#10            label: 'Test (field_test)'&#10            description: ''&#10            use_operator: false&#10            operator: field_test_target_id_op&#10            identifier: field_test_target_id&#10            required: false&#10            remember: false&#10            multiple: true&#10            remember_roles:&#10              authenticated: authenticated&#10              anonymous: '0'&#10              administrator: '0'&#10            reduce: false&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: {  }&#10            group_items: {  }&#10          reduce_duplicates: false&#10          sub_handler: 'default:node'&#10          sub_handler_settings:&#10            target_bundles:&#10              article: article&#10            sort:&#10              field: title&#10              direction: ASC&#10            auto_create: false&#10            auto_create_bundle: ''&#10          widget: select&#10          plugin_id: entity_reference&#10        field_test_config_target_id:&#10          id: field_test_config_target_id&#10          table: node__field_test_config&#10          field: field_test_config_target_id&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          plugin_id: entity_reference&#10          operator: or&#10          value: { }&#10          group: 1&#10          exposed: true&#10          expose:&#10            operator_id: field_test_config_target_id_op&#10            label: 'Test config (field_test_config)'&#10            description: ''&#10            use_operator: false&#10            operator: field_test_config_target_id_op&#10            operator_limit_selection: false&#10            operator_list: { }&#10            identifier: field_test_config_target_id&#10            required: false&#10            remember: false&#10            multiple: false&#10            remember_roles:&#10              authenticated: authenticated&#10              anonymous: '0'&#10              content_editor: '0'&#10              administrator: '0'&#10            reduce: false&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: { }&#10            group_items: { }&#10          reduce_duplicates: false&#10          sub_handler: 'default:node_type'&#10          widget: select&#10          sub_handler_settings:&#10            target_bundles: null&#10            auto_create: false&#10      sorts:&#10        created:&#10          id: created&#10          table: node_field_data&#10          field: created&#10          order: DESC&#10          entity_type: node&#10          entity_field: created&#10          plugin_id: date&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          exposed: false&#10          expose:&#10            label: ''&#10          granularity: second&#10      header: {  }&#10      footer: {  }&#10      empty: {  }&#10      relationships: {  }&#10      arguments: {  }&#10      display_extenders: {  }&#10
\ No newline at end of file
+langcode: en
+status: true
+dependencies:
+  config:
+    - node.type.page
+  module:
+    - node
+    - user
+id: test_filter_entity_reference
+label: test_filter_entity_reference
+module: views
+description: ''
+tag: ''
+base_table: node_field_data
+base_field: nid
+display:
+  default:
+    display_plugin: default
+    id: default
+    display_title: Master
+    position: 0
+    display_options:
+      access:
+        type: perm
+        options:
+          perm: 'access content'
+      cache:
+        type: none
+        options: {  }
+      query:
+        type: views_query
+        options:
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_comment: ''
+          query_tags: {  }
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      pager:
+        type: mini
+        options:
+          items_per_page: 10
+          offset: 0
+          id: 0
+          total_pages: null
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+          tags:
+            previous: â€¹â€¹
+            next: â€ºâ€º
+      style:
+        type: default
+        options:
+          grouping: {  }
+          row_class: ''
+          default_row_class: true
+          uses_fields: false
+      row:
+        type: fields
+        options:
+          inline: {  }
+          separator: ''
+          hide_empty: false
+          default_field_elements: true
+      fields:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          entity_type: node
+          entity_field: title
+          label: ''
+          alter:
+            alter_text: false
+            make_link: false
+            absolute: false
+            trim: false
+            word_boundary: false
+            ellipsis: false
+            strip_tags: false
+            html: false
+          hide_empty: false
+          empty_zero: false
+          settings:
+            link_to_entity: true
+          plugin_id: field
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exclude: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: true
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+      filters:
+        status:
+          value: '1'
+          table: node_field_data
+          field: status
+          plugin_id: boolean
+          entity_type: node
+          entity_field: status
+          id: status
+          expose:
+            operator: ''
+          group: 1
+        type:
+          id: type
+          table: node_field_data
+          field: type
+          value:
+            page: page
+          entity_type: node
+          entity_field: type
+          plugin_id: bundle
+        field_test_target_id:
+          id: field_test_target_id
+          table: node__field_test
+          field: field_test_target_id
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: or
+          value: {  }
+          group: 1
+          exposed: true
+          expose:
+            operator_id: field_test_target_id_op
+            label: 'Test (field_test)'
+            description: ''
+            use_operator: false
+            operator: field_test_target_id_op
+            identifier: field_test_target_id
+            required: false
+            remember: false
+            multiple: true
+            remember_roles:
+              authenticated: authenticated
+              anonymous: '0'
+              administrator: '0'
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: {  }
+            group_items: {  }
+          reduce_duplicates: false
+          sub_handler: 'default:node'
+          sub_handler_settings:
+            target_bundles:
+              article: article
+            sort:
+              field: title
+              direction: ASC
+            auto_create: false
+            auto_create_bundle: ''
+          widget: select
+          plugin_id: entity_reference
+        field_test_config_target_id:
+          id: field_test_config_target_id
+          table: node__field_test_config
+          field: field_test_config_target_id
+          relationship: none
+          group_type: group
+          admin_label: ''
+          plugin_id: entity_reference
+          operator: or
+          value: { }
+          group: 1
+          exposed: true
+          expose:
+            operator_id: field_test_config_target_id_op
+            label: 'Test config (field_test_config)'
+            description: ''
+            use_operator: false
+            operator: field_test_config_target_id_op
+            operator_limit_selection: false
+            operator_list: { }
+            identifier: field_test_config_target_id
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+              anonymous: '0'
+              content_editor: '0'
+              administrator: '0'
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: { }
+            group_items: { }
+          reduce_duplicates: false
+          sub_handler: 'default:node_type'
+          widget: select
+          sub_handler_settings:
+            target_bundles: null
+            auto_create: false
+      sorts:
+        created:
+          id: created
+          table: node_field_data
+          field: created
+          order: DESC
+          entity_type: node
+          entity_field: created
+          plugin_id: date
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exposed: false
+          expose:
+            label: ''
+          granularity: second
+      header: {  }
+      footer: {  }
+      empty: {  }
+      relationships: {  }
+      arguments: {  }
+      display_extenders: {  }
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml b/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
index c9ca489f23c2..4b37d55d492d 100644
--- a/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
+++ b/core/modules/views/tests/modules/views_test_entity_reference/config/install/views.view.test_entity_reference.yml
@@ -1 +1,269 @@
-langcode: en&#10status: true&#10dependencies:&#10  module:&#10    - node&#10    - user&#10id: test_entity_reference&#10label: 'Test Entity Reference'&#10module: views&#10description: ''&#10tag: ''&#10base_table: node_field_data&#10base_field: nid&#10display:&#10  default:&#10    id: default&#10    display_title: Default&#10    display_plugin: default&#10    position: 0&#10    display_options:&#10      fields:&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: title&#10          plugin_id: field&#10          label: ''&#10          exclude: false&#10          alter:&#10            alter_text: false&#10            text: ''&#10            make_link: false&#10            path: ''&#10            absolute: false&#10            external: false&#10            replace_spaces: false&#10            path_case: none&#10            trim_whitespace: false&#10            alt: ''&#10            rel: ''&#10            link_class: ''&#10            prefix: ''&#10            suffix: ''&#10            target: ''&#10            nl2br: false&#10            max_length: 0&#10            word_boundary: false&#10            ellipsis: false&#10            more_link: false&#10            more_link_text: ''&#10            more_link_path: ''&#10            strip_tags: false&#10            trim: false&#10            preserve_tags: ''&#10            html: false&#10          element_type: ''&#10          element_class: ''&#10          element_label_type: ''&#10          element_label_class: ''&#10          element_label_colon: false&#10          element_wrapper_type: ''&#10          element_wrapper_class: ''&#10          element_default_classes: true&#10          empty: ''&#10          hide_empty: false&#10          empty_zero: false&#10          hide_alter_empty: true&#10          click_sort_column: value&#10          type: string&#10          settings:&#10            link_to_entity: true&#10          group_column: value&#10          group_columns: {  }&#10          group_rows: true&#10          delta_limit: 0&#10          delta_offset: 0&#10          delta_reversed: false&#10          delta_first_last: false&#10          multi_type: separator&#10          separator: ', '&#10          field_api_classes: false&#10      pager:&#10        type: mini&#10        options:&#10          offset: 0&#10          items_per_page: 10&#10          total_pages: null&#10          id: 0&#10          tags:&#10            next: â€ºâ€º&#10            previous: â€¹â€¹&#10          expose:&#10            items_per_page: false&#10            items_per_page_label: 'Items per page'&#10            items_per_page_options: '5, 10, 25, 50'&#10            items_per_page_options_all: false&#10            items_per_page_options_all_label: '- All -'&#10            offset: false&#10            offset_label: Offset&#10      exposed_form:&#10        type: basic&#10        options:&#10          submit_button: Apply&#10          reset_button: false&#10          reset_button_label: Reset&#10          exposed_sorts_label: 'Sort by'&#10          expose_sort_order: true&#10          sort_asc_label: Asc&#10          sort_desc_label: Desc&#10      access:&#10        type: perm&#10        options:&#10          perm: 'access content'&#10      cache:&#10        type: tag&#10        options: {  }&#10      empty: {  }&#10      sorts:&#10        created:&#10          id: created&#10          table: node_field_data&#10          field: created&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: created&#10          plugin_id: date&#10          order: DESC&#10          expose:&#10            label: ''&#10            field_identifier: ''&#10          exposed: false&#10          granularity: second&#10      arguments: {  }&#10      filters:&#10        status:&#10          id: status&#10          table: node_field_data&#10          field: status&#10          entity_type: node&#10          entity_field: status&#10          plugin_id: boolean&#10          value: '1'&#10          group: 1&#10          expose:&#10            operator: ''&#10            operator_limit_selection: false&#10            operator_list: {  }&#10        type:&#10          id: type&#10          table: node_field_data&#10          field: type&#10          entity_type: node&#10          entity_field: type&#10          plugin_id: bundle&#10          value:&#10            article: article&#10          expose:&#10            operator_limit_selection: false&#10            operator_list: {  }&#10        title:&#10          id: title&#10          table: node_field_data&#10          field: title&#10          relationship: none&#10          group_type: group&#10          admin_label: ''&#10          entity_type: node&#10          entity_field: title&#10          plugin_id: string&#10          operator: '='&#10          value: 'Article 0'&#10          group: 1&#10          exposed: false&#10          expose:&#10            operator_id: ''&#10            label: ''&#10            description: ''&#10            use_operator: false&#10            operator: ''&#10            operator_limit_selection: false&#10            operator_list: {  }&#10            identifier: ''&#10            required: false&#10            remember: false&#10            multiple: false&#10            remember_roles:&#10              authenticated: authenticated&#10            placeholder: ''&#10          is_grouped: false&#10          group_info:&#10            label: ''&#10            description: ''&#10            identifier: ''&#10            optional: true&#10            widget: select&#10            multiple: false&#10            remember: false&#10            default_group: All&#10            default_group_multiple: {  }&#10            group_items: {  }&#10      style:&#10        type: default&#10        options:&#10          grouping: {  }&#10          row_class: ''&#10          default_row_class: true&#10          uses_fields: false&#10      row:&#10        type: fields&#10        options:&#10          default_field_elements: true&#10          inline: {  }&#10          separator: ''&#10          hide_empty: false&#10      query:&#10        type: views_query&#10        options:&#10          query_comment: ''&#10          disable_sql_rewrite: false&#10          distinct: false&#10          replica: false&#10          query_tags: {  }&#10      relationships: {  }&#10      header: {  }&#10      footer: {  }&#10      display_extenders: {  }&#10    cache_metadata:&#10      max-age: -1&#10      contexts:&#10        - 'languages:language_content'&#10        - 'languages:language_interface'&#10        - url.query_args&#10        - 'user.node_grants:view'&#10        - user.permissions&#10      tags: {  }&#10  entity_reference:&#10    id: entity_reference&#10    display_title: 'Entity Reference'&#10    display_plugin: entity_reference&#10    position: 1&#10    display_options:&#10      style:&#10        type: entity_reference&#10        options:&#10          search_fields:&#10            title: title&#10      row:&#10        type: entity_reference&#10        options:&#10          default_field_elements: true&#10          inline: {  }&#10          separator: '-'&#10          hide_empty: false&#10      display_extenders: {  }&#10    cache_metadata:&#10      max-age: -1&#10      contexts:&#10        - 'languages:language_content'&#10        - 'languages:language_interface'&#10        - 'user.node_grants:view'&#10        - user.permissions&#10      tags: {  }&#10
\ No newline at end of file
+langcode: en
+status: true
+dependencies:
+  module:
+    - node
+    - user
+id: test_entity_reference
+label: 'Test Entity Reference'
+module: views
+description: ''
+tag: ''
+base_table: node_field_data
+base_field: nid
+display:
+  default:
+    id: default
+    display_title: Default
+    display_plugin: default
+    position: 0
+    display_options:
+      fields:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          relationship: none
+          group_type: group
+          admin_label: ''
+          entity_type: node
+          entity_field: title
+          plugin_id: field
+          label: ''
+          exclude: false
+          alter:
+            alter_text: false
+            text: ''
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: false
+            ellipsis: false
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          settings:
+            link_to_entity: true
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+      pager:
+        type: mini
+        options:
+          offset: 0
+          items_per_page: 10
+          total_pages: null
+          id: 0
+          tags:
+            next: â€ºâ€º
+            previous: â€¹â€¹
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      access:
+        type: perm
+        options:
+          perm: 'access content'
+      cache:
+        type: tag
+        options: {  }
+      empty: {  }
+      sorts:
+        created:
+          id: created
+          table: node_field_data
+          field: created
+          relationship: none
+          group_type: group
+          admin_label: ''
+          entity_type: node
+          entity_field: created
+          plugin_id: date
+          order: DESC
+          expose:
+            label: ''
+            field_identifier: ''
+          exposed: false
+          granularity: second
+      arguments: {  }
+      filters:
+        status:
+          id: status
+          table: node_field_data
+          field: status
+          entity_type: node
+          entity_field: status
+          plugin_id: boolean
+          value: '1'
+          group: 1
+          expose:
+            operator: ''
+            operator_limit_selection: false
+            operator_list: {  }
+        type:
+          id: type
+          table: node_field_data
+          field: type
+          entity_type: node
+          entity_field: type
+          plugin_id: bundle
+          value:
+            article: article
+          expose:
+            operator_limit_selection: false
+            operator_list: {  }
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          relationship: none
+          group_type: group
+          admin_label: ''
+          entity_type: node
+          entity_field: title
+          plugin_id: string
+          operator: '='
+          value: 'Article 0'
+          group: 1
+          exposed: false
+          expose:
+            operator_id: ''
+            label: ''
+            description: ''
+            use_operator: false
+            operator: ''
+            operator_limit_selection: false
+            operator_list: {  }
+            identifier: ''
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+            placeholder: ''
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: {  }
+            group_items: {  }
+      style:
+        type: default
+        options:
+          grouping: {  }
+          row_class: ''
+          default_row_class: true
+          uses_fields: false
+      row:
+        type: fields
+        options:
+          default_field_elements: true
+          inline: {  }
+          separator: ''
+          hide_empty: false
+      query:
+        type: views_query
+        options:
+          query_comment: ''
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_tags: {  }
+      relationships: {  }
+      header: {  }
+      footer: {  }
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
+  entity_reference:
+    id: entity_reference
+    display_title: 'Entity Reference'
+    display_plugin: entity_reference
+    position: 1
+    display_options:
+      style:
+        type: entity_reference
+        options:
+          search_fields:
+            title: title
+      row:
+        type: entity_reference
+        options:
+          default_field_elements: true
+          inline: {  }
+          separator: '-'
+          hide_empty: false
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
index f7549b05c2ce..3bc975ea7478 100644
--- a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
+++ b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.info.yml
@@ -1 +1,8 @@
-name: 'Views Test Entity Reference'&#10type: module&#10description: 'Provides an entity reference view for use in a selection handler.'&#10package: Testing&#10version: VERSION&#10dependencies:&#10  - drupal:views&#10  - drupal:field&#10
\ No newline at end of file
+name: 'Views Test Entity Reference'
+type: module
+description: 'Provides an entity reference view for use in a selection handler.'
+package: Testing
+version: VERSION
+dependencies:
+  - drupal:views
+  - drupal:field
diff --git a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
index f44e9385dd4e..248a96757537 100644
--- a/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
+++ b/core/modules/views/tests/modules/views_test_entity_reference/views_test_entity_reference.module
@@ -1 +1,28 @@
-<?php&#10&#10/**&#10 * @file&#10 * Views data altering to test use of the entity reference plugin.&#10 */&#10&#10/**&#10 * Implements hook_views_data_alter().&#10 */&#10function views_test_entity_reference_views_data_alter(&$data) {&#10  $manager = \Drupal::entityTypeManager();&#10  $field_config_storage = $manager->getStorage('field_config');&#10  /** @var \Drupal\field\FieldConfigInterface[] $field_configs */&#10  $field_configs = $field_config_storage->loadByProperties([&#10    'field_type' => 'entity_reference',&#10  ]);&#10  foreach ($field_configs as $field_config) {&#10    $table_name = $field_config->getTargetEntityTypeId() . '__' . $field_config->getName();&#10    $column_name = $field_config->getName() . '_target_id';&#10    if (&#10      isset($data[$table_name][$column_name]['filter']['id'])&#10      && in_array($data[$table_name][$column_name]['filter']['id'], ['numeric', 'string'])&#10    ) {&#10      $data[$table_name][$column_name]['filter']['id'] = 'entity_reference';&#10    }&#10  }&#10}&#10
\ No newline at end of file
+<?php
+
+/**
+ * @file
+ * Views data altering to test use of the entity reference plugin.
+ */
+
+/**
+ * Implements hook_views_data_alter().
+ */
+function views_test_entity_reference_views_data_alter(&$data) {
+  $manager = \Drupal::entityTypeManager();
+  $field_config_storage = $manager->getStorage('field_config');
+  /** @var \Drupal\field\FieldConfigInterface[] $field_configs */
+  $field_configs = $field_config_storage->loadByProperties([
+    'field_type' => 'entity_reference',
+  ]);
+  foreach ($field_configs as $field_config) {
+    $table_name = $field_config->getTargetEntityTypeId() . '__' . $field_config->getName();
+    $column_name = $field_config->getName() . '_target_id';
+    if (
+      isset($data[$table_name][$column_name]['filter']['id'])
+      && in_array($data[$table_name][$column_name]['filter']['id'], ['numeric', 'string'])
+    ) {
+      $data[$table_name][$column_name]['filter']['id'] = 'entity_reference';
+    }
+  }
+}
diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
index 45b9ea5585fb..1fbf7cf3a9b4 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterEntityReferenceTest.php
@@ -1 +1,256 @@
-<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views\Kernel\Handler;&#10&#10use Drupal\Core\Field\FieldStorageDefinitionInterface;&#10use Drupal\Tests\field\Traits\EntityReferenceFieldCreationTrait;&#10use Drupal\Tests\node\Traits\ContentTypeCreationTrait;&#10use Drupal\Tests\node\Traits\NodeCreationTrait;&#10use Drupal\Tests\user\Traits\UserCreationTrait;&#10use Drupal\Tests\views\Kernel\ViewsKernelTestBase;&#10use Drupal\user\UserInterface;&#10use Drupal\views\Plugin\views\filter\EntityReference;&#10use Drupal\views\Tests\ViewTestData;&#10use Drupal\views\Views;&#10&#10/**&#10 * Tests the core Drupal\views\Plugin\views\filter\EntityReference handler.&#10 *&#10 * @group views&#10 */&#10class FilterEntityReferenceTest extends ViewsKernelTestBase {&#10&#10  use ContentTypeCreationTrait;&#10  use EntityReferenceFieldCreationTrait;&#10  use NodeCreationTrait;&#10  use UserCreationTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static $testViews = ['test_filter_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'system',&#10    'node',&#10    'user',&#10    'field',&#10    'text',&#10    'filter',&#10    'views',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * Test host nodes containing the entity reference.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $hostNodes;&#10&#10  /**&#10   * Test target nodes referenced by the entity reference.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $targetNodes;&#10&#10  /**&#10   * First test user as node author.&#10   *&#10   * @var \Drupal\user\UserInterface&#10   */&#10  protected UserInterface $user1;&#10&#10  /**&#10   * Second test user as node author.&#10   *&#10   * @var \Drupal\user\UserInterface&#10   */&#10  protected UserInterface $user2;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function setUp($import_test_views = TRUE): void {&#10    parent::setUp(FALSE);&#10    $this->installEntitySchema('node');&#10    $this->installEntitySchema('user');&#10    $this->installConfig(['node', 'user', 'filter']);&#10&#10    ViewTestData::createTestViews(static::class, ['views_test_config']);&#10    // Create two node types.&#10    $this->createContentType(['type' => 'page']);&#10    $this->createContentType(['type' => 'article']);&#10&#10    // Add an entity reference field to the page type referencing the article&#10    // type.&#10    $selection_handler_settings = [&#10      'target_bundles' => [&#10        'article' => 'article',&#10      ],&#10    ];&#10    $this->createEntityReferenceField('node', 'page', 'field_test', 'Test reference', 'node', $selection_handler = 'default', $selection_handler_settings, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);&#10&#10    // Create user 1.&#10    $this->user1 = $this->createUser();&#10    $this->user2 = $this->createUser();&#10&#10    // Create target nodes to be referenced.&#10    foreach (range(0, 5) as $count) {&#10      $this->targetNodes[$count] = $this->createNode([&#10        'type' => 'article',&#10        'title' => 'Article ' . $count,&#10        'status' => 1,&#10        'uid' => $this->user1,&#10      ]);&#10    }&#10&#10    // Create a page referencing Article 0 and Article 1.&#10    $this->hostNodes[0] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 0',&#10      'status' => 1,&#10      'created' => time(),&#10      'field_test' => [&#10        $this->targetNodes[0]->id(),&#10        $this->targetNodes[1]->id(),&#10      ],&#10      'uid' => $this->user2,&#10    ]);&#10&#10    // Create a page referencing Article 1, Article 2, and Article 3.&#10    $this->hostNodes[1] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 1',&#10      'status' => 1,&#10      'created' => time() - 100,&#10      'field_test' => [&#10        $this->targetNodes[1]->id(),&#10        $this->targetNodes[2]->id(),&#10        $this->targetNodes[3]->id(),&#10      ],&#10      'uid' => $this->user2,&#10    ]);&#10&#10    // Create a page referencing nothing.&#10    $this->hostNodes[2] = $this->createNode([&#10      'type' => 'page',&#10      'title' => 'Page 2',&#10      'status' => 1,&#10      'created' => time() - 200,&#10      'uid' => $this->user2,&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that results are successfully filtered by the select list widget.&#10   */&#10  public function testViewEntityReferenceAsSelectList(): void {&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $view->preExecute([]);&#10    $view->setExposedInput([&#10      'field_test_target_id' => [$this->targetNodes[0]->id()],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have only Page 0, with Article 0 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10&#10    // Change to both Article 0 and Article 3.&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $view->setExposedInput([&#10      'field_test_target_id' => [&#10        $this->targetNodes[0]->id(),&#10        $this->targetNodes[3]->id(),&#10      ],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10      ['title' => 'Page 1'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that results are successfully filtered by the autocomplete widget.&#10   */&#10  public function testViewEntityReferenceAsAutocomplete(): void {&#10    // Change the widget to autocomplete.&#10    $view = Views::getView('test_filter_entity_reference');&#10    $view->setDisplay();&#10    $filters = $view->displayHandlers->get('default')->getOption('filters');&#10    $filters['field_test_target_id']['widget'] = EntityReference::WIDGET_AUTOCOMPLETE;&#10    $view->displayHandlers->get('default')->overrideOption('filters', $filters);&#10    $view->setExposedInput([&#10      'field_test_target_id' => [&#10        ['target_id' => $this->targetNodes[0]->id()],&#10        ['target_id' => $this->targetNodes[3]->id()],&#10      ],&#10    ]);&#10    $this->executeView($view);&#10&#10    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.&#10    $expected = [&#10      ['title' => 'Page 0'],&#10      ['title' => 'Page 1'],&#10    ];&#10    $this->assertIdenticalResultset($view, $expected, [&#10      'title' => 'title',&#10    ]);&#10  }&#10&#10  /**&#10   * Tests that content dependencies are added to the view.&#10   */&#10  public function testViewContentDependencies(): void {&#10    $view = Views::getView('test_filter_entity_reference');&#10    $value = [&#10      $this->targetNodes[0]->id(),&#10      $this->targetNodes[3]->id(),&#10    ];&#10    $view->setHandlerOption(&#10      'default',&#10      'filter',&#10      'field_test_target_id',&#10      'value',&#10      $value&#10    );&#10&#10    // Dependencies are sorted.&#10    $content_dependencies = [&#10      $this->targetNodes[0]->getConfigDependencyName(),&#10      $this->targetNodes[3]->getConfigDependencyName(),&#10    ];&#10    sort($content_dependencies);&#10&#10    $this->assertEquals([&#10      'config' => [&#10        'node.type.page',&#10      ],&#10      'content' => $content_dependencies,&#10      'module' => [&#10        'node',&#10        'user',&#10      ],&#10    ], $view->getDependencies());&#10  }&#10&#10}&#10
\ No newline at end of file
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\views\Kernel\Handler;
+
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Tests\field\Traits\EntityReferenceFieldCreationTrait;
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\Tests\node\Traits\NodeCreationTrait;
+use Drupal\Tests\user\Traits\UserCreationTrait;
+use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
+use Drupal\user\UserInterface;
+use Drupal\views\Plugin\views\filter\EntityReference;
+use Drupal\views\Tests\ViewTestData;
+use Drupal\views\Views;
+
+/**
+ * Tests the core Drupal\views\Plugin\views\filter\EntityReference handler.
+ *
+ * @group views
+ */
+class FilterEntityReferenceTest extends ViewsKernelTestBase {
+
+  use ContentTypeCreationTrait;
+  use EntityReferenceFieldCreationTrait;
+  use NodeCreationTrait;
+  use UserCreationTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $testViews = ['test_filter_entity_reference'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'system',
+    'node',
+    'user',
+    'field',
+    'text',
+    'filter',
+    'views',
+    'views_test_entity_reference',
+  ];
+
+  /**
+   * Test host nodes containing the entity reference.
+   *
+   * @var \Drupal\node\NodeInterface[]
+   */
+  protected array $hostNodes;
+
+  /**
+   * Test target nodes referenced by the entity reference.
+   *
+   * @var \Drupal\node\NodeInterface[]
+   */
+  protected array $targetNodes;
+
+  /**
+   * First test user as node author.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected UserInterface $user1;
+
+  /**
+   * Second test user as node author.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected UserInterface $user2;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp($import_test_views = TRUE): void {
+    parent::setUp(FALSE);
+    $this->installEntitySchema('node');
+    $this->installEntitySchema('user');
+    $this->installConfig(['node', 'user', 'filter']);
+
+    ViewTestData::createTestViews(static::class, ['views_test_config']);
+    // Create two node types.
+    $this->createContentType(['type' => 'page']);
+    $this->createContentType(['type' => 'article']);
+
+    // Add an entity reference field to the page type referencing the article
+    // type.
+    $selection_handler_settings = [
+      'target_bundles' => [
+        'article' => 'article',
+      ],
+    ];
+    $this->createEntityReferenceField('node', 'page', 'field_test', 'Test reference', 'node', $selection_handler = 'default', $selection_handler_settings, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
+
+    // Create user 1.
+    $this->user1 = $this->createUser();
+    $this->user2 = $this->createUser();
+
+    // Create target nodes to be referenced.
+    foreach (range(0, 5) as $count) {
+      $this->targetNodes[$count] = $this->createNode([
+        'type' => 'article',
+        'title' => 'Article ' . $count,
+        'status' => 1,
+        'uid' => $this->user1,
+      ]);
+    }
+
+    // Create a page referencing Article 0 and Article 1.
+    $this->hostNodes[0] = $this->createNode([
+      'type' => 'page',
+      'title' => 'Page 0',
+      'status' => 1,
+      'created' => time(),
+      'field_test' => [
+        $this->targetNodes[0]->id(),
+        $this->targetNodes[1]->id(),
+      ],
+      'uid' => $this->user2,
+    ]);
+
+    // Create a page referencing Article 1, Article 2, and Article 3.
+    $this->hostNodes[1] = $this->createNode([
+      'type' => 'page',
+      'title' => 'Page 1',
+      'status' => 1,
+      'created' => time() - 100,
+      'field_test' => [
+        $this->targetNodes[1]->id(),
+        $this->targetNodes[2]->id(),
+        $this->targetNodes[3]->id(),
+      ],
+      'uid' => $this->user2,
+    ]);
+
+    // Create a page referencing nothing.
+    $this->hostNodes[2] = $this->createNode([
+      'type' => 'page',
+      'title' => 'Page 2',
+      'status' => 1,
+      'created' => time() - 200,
+      'uid' => $this->user2,
+    ]);
+  }
+
+  /**
+   * Tests that results are successfully filtered by the select list widget.
+   */
+  public function testViewEntityReferenceAsSelectList(): void {
+    $view = Views::getView('test_filter_entity_reference');
+    $view->setDisplay();
+    $view->preExecute([]);
+    $view->setExposedInput([
+      'field_test_target_id' => [$this->targetNodes[0]->id()],
+    ]);
+    $this->executeView($view);
+
+    // Expect to have only Page 0, with Article 0 referenced.
+    $expected = [
+      ['title' => 'Page 0'],
+    ];
+    $this->assertIdenticalResultset($view, $expected, [
+      'title' => 'title',
+    ]);
+
+    // Change to both Article 0 and Article 3.
+    $view = Views::getView('test_filter_entity_reference');
+    $view->setDisplay();
+    $view->setExposedInput([
+      'field_test_target_id' => [
+        $this->targetNodes[0]->id(),
+        $this->targetNodes[3]->id(),
+      ],
+    ]);
+    $this->executeView($view);
+
+    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.
+    $expected = [
+      ['title' => 'Page 0'],
+      ['title' => 'Page 1'],
+    ];
+    $this->assertIdenticalResultset($view, $expected, [
+      'title' => 'title',
+    ]);
+  }
+
+  /**
+   * Tests that results are successfully filtered by the autocomplete widget.
+   */
+  public function testViewEntityReferenceAsAutocomplete(): void {
+    // Change the widget to autocomplete.
+    $view = Views::getView('test_filter_entity_reference');
+    $view->setDisplay();
+    $filters = $view->displayHandlers->get('default')->getOption('filters');
+    $filters['field_test_target_id']['widget'] = EntityReference::WIDGET_AUTOCOMPLETE;
+    $view->displayHandlers->get('default')->overrideOption('filters', $filters);
+    $view->setExposedInput([
+      'field_test_target_id' => [
+        ['target_id' => $this->targetNodes[0]->id()],
+        ['target_id' => $this->targetNodes[3]->id()],
+      ],
+    ]);
+    $this->executeView($view);
+
+    // Expect to have Page 0 and 1, with Article 0 and 3 referenced.
+    $expected = [
+      ['title' => 'Page 0'],
+      ['title' => 'Page 1'],
+    ];
+    $this->assertIdenticalResultset($view, $expected, [
+      'title' => 'title',
+    ]);
+  }
+
+  /**
+   * Tests that content dependencies are added to the view.
+   */
+  public function testViewContentDependencies(): void {
+    $view = Views::getView('test_filter_entity_reference');
+    $value = [
+      $this->targetNodes[0]->id(),
+      $this->targetNodes[3]->id(),
+    ];
+    $view->setHandlerOption(
+      'default',
+      'filter',
+      'field_test_target_id',
+      'value',
+      $value
+    );
+
+    // Dependencies are sorted.
+    $content_dependencies = [
+      $this->targetNodes[0]->getConfigDependencyName(),
+      $this->targetNodes[3]->getConfigDependencyName(),
+    ];
+    sort($content_dependencies);
+
+    $this->assertEquals([
+      'config' => [
+        'node.type.page',
+      ],
+      'content' => $content_dependencies,
+      'module' => [
+        'node',
+        'user',
+      ],
+    ], $view->getDependencies());
+  }
+
+}
diff --git a/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php b/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
index 43e744d8e007..74cadc64d628 100644
--- a/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
+++ b/core/modules/views_ui/tests/src/Functional/FilterEntityReferenceWebTest.php
@@ -1 +1,138 @@
-<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\Functional;&#10&#10use Drupal\Component\Render\FormattableMarkup;&#10use Drupal\Core\Entity\EntityInterface;&#10use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;&#10&#10/**&#10 * Tests the entity reference filter UI.&#10 *&#10 * @group views_ui&#10 * @see \Drupal\views\Plugin\views\filter\EntityReference&#10 */&#10class FilterEntityReferenceWebTest extends UITestBase {&#10&#10  use FilterEntityReferenceTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected $defaultTheme = 'stark';&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public static $testViews = ['test_filter_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'node',&#10    'views_ui',&#10    'block',&#10    'taxonomy',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected function setUp($import_test_views = TRUE, $modules = []): void {&#10    parent::setUp($import_test_views);&#10    $this->setUpEntityTypes();&#10  }&#10&#10  /**&#10   * Tests the filter UI.&#10   */&#10  public function testFilterUi(): void {&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10&#10    $options = $this->getUiOptions();&#10    // Should be sorted by title ASC.&#10    uasort($this->targetEntities, function (EntityInterface $a, EntityInterface $b) {&#10      return strnatcasecmp($a->getTitle(), $b->getTitle());&#10    });&#10    $i = 0;&#10    foreach ($this->targetEntities as $id => $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10&#10    // Change the sort field and direction.&#10    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $edit = [&#10      'options[reference_default:node][sort][field]' => 'nid',&#10      'options[reference_default:node][sort][direction]' => 'DESC',&#10    ];&#10    $this->submitForm($edit, 'Apply');&#10&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10    // Items should now be in reverse id order.&#10    krsort($this->targetEntities);&#10    $options = $this->getUiOptions();&#10    $i = 0;&#10    foreach ($this->targetEntities as $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10&#10    // Change bundle types.&#10    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $edit = [&#10      "options[reference_default:node][target_bundles][{$this->hostBundle->id()}]" => TRUE,&#10      "options[reference_default:node][target_bundles][{$this->targetBundle->id()}]" => TRUE,&#10    ];&#10    $this->submitForm($edit, 'Apply');&#10&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');&#10    $options = $this->getUiOptions();&#10    $i = 0;&#10    foreach ($this->hostEntities + $this->targetEntities as $entity) {&#10      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);&#10      $this->assertEquals($options[$i]['label'], $entity->label(), $message);&#10      $i++;&#10    }&#10  }&#10&#10  /**&#10   * Tests the filter UI for config reference.&#10   */&#10  public function testFilterConfigUi(): void {&#10    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_config_target_id');&#10&#10    $options = $this->getUiOptions();&#10    // We should expect the content types defined as options.&#10    $this->assertEquals(['article', 'page'], array_column($options, 'label'));&#10  }&#10&#10  /**&#10   * Helper method to parse options from the UI.&#10   *&#10   * @return array&#10   *   Array of keyed arrays containing the id and label of each option.&#10   */&#10  protected function getUiOptions(): array {&#10    /** @var \Behat\Mink\Element\TraversableElement[] $result */&#10    $result = $this->xpath('//select[@name="options[value][]"]/option');&#10    $this->assertNotEmpty($result, 'Options found');&#10&#10    $options = [];&#10    foreach ($result as $option) {&#10      $options[] = [&#10        'id' => (int) $option->getValue(),&#10        'label' => $option->getText(),&#10      ];&#10    }&#10&#10    return $options;&#10  }&#10&#10}&#10
\ No newline at end of file
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\views_ui\Functional;
+
+use Drupal\Component\Render\FormattableMarkup;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;
+
+/**
+ * Tests the entity reference filter UI.
+ *
+ * @group views_ui
+ * @see \Drupal\views\Plugin\views\filter\EntityReference
+ */
+class FilterEntityReferenceWebTest extends UITestBase {
+
+  use FilterEntityReferenceTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $testViews = ['test_filter_entity_reference'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'node',
+    'views_ui',
+    'block',
+    'taxonomy',
+    'views_test_entity_reference',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp($import_test_views = TRUE, $modules = []): void {
+    parent::setUp($import_test_views);
+    $this->setUpEntityTypes();
+  }
+
+  /**
+   * Tests the filter UI.
+   */
+  public function testFilterUi(): void {
+    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');
+
+    $options = $this->getUiOptions();
+    // Should be sorted by title ASC.
+    uasort($this->targetEntities, function (EntityInterface $a, EntityInterface $b) {
+      return strnatcasecmp($a->getTitle(), $b->getTitle());
+    });
+    $i = 0;
+    foreach ($this->targetEntities as $id => $entity) {
+      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);
+      $this->assertEquals($options[$i]['label'], $entity->label(), $message);
+      $i++;
+    }
+
+    // Change the sort field and direction.
+    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');
+    $edit = [
+      'options[reference_default:node][sort][field]' => 'nid',
+      'options[reference_default:node][sort][direction]' => 'DESC',
+    ];
+    $this->submitForm($edit, 'Apply');
+
+    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');
+    // Items should now be in reverse id order.
+    krsort($this->targetEntities);
+    $options = $this->getUiOptions();
+    $i = 0;
+    foreach ($this->targetEntities as $entity) {
+      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);
+      $this->assertEquals($options[$i]['label'], $entity->label(), $message);
+      $i++;
+    }
+
+    // Change bundle types.
+    $this->drupalGet('admin/structure/views/nojs/handler-extra/test_filter_entity_reference/default/filter/field_test_target_id');
+    $edit = [
+      "options[reference_default:node][target_bundles][{$this->hostBundle->id()}]" => TRUE,
+      "options[reference_default:node][target_bundles][{$this->targetBundle->id()}]" => TRUE,
+    ];
+    $this->submitForm($edit, 'Apply');
+
+    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_target_id');
+    $options = $this->getUiOptions();
+    $i = 0;
+    foreach ($this->hostEntities + $this->targetEntities as $entity) {
+      $message = (string) new FormattableMarkup('Expected target entity label found for option :option', [':option' => $i]);
+      $this->assertEquals($options[$i]['label'], $entity->label(), $message);
+      $i++;
+    }
+  }
+
+  /**
+   * Tests the filter UI for config reference.
+   */
+  public function testFilterConfigUi(): void {
+    $this->drupalGet('admin/structure/views/nojs/handler/test_filter_entity_reference/default/filter/field_test_config_target_id');
+
+    $options = $this->getUiOptions();
+    // We should expect the content types defined as options.
+    $this->assertEquals(['article', 'page'], array_column($options, 'label'));
+  }
+
+  /**
+   * Helper method to parse options from the UI.
+   *
+   * @return array
+   *   Array of keyed arrays containing the id and label of each option.
+   */
+  protected function getUiOptions(): array {
+    /** @var \Behat\Mink\Element\TraversableElement[] $result */
+    $result = $this->xpath('//select[@name="options[value][]"]/option');
+    $this->assertNotEmpty($result, 'Options found');
+
+    $options = [];
+    foreach ($result as $option) {
+      $options[] = [
+        'id' => (int) $option->getValue(),
+        'label' => $option->getText(),
+      ];
+    }
+
+    return $options;
+  }
+
+}
diff --git a/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php b/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
index 055ce90e2187..b0621fccd0f1 100644
--- a/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
+++ b/core/modules/views_ui/tests/src/FunctionalJavascript/FilterEntityReferenceTest.php
@@ -1 +1,252 @@
-<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\FunctionalJavascript;&#10&#10use Drupal\Core\Url;&#10use Drupal\FunctionalJavascriptTests\WebDriverTestBase;&#10use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;&#10&#10/**&#10 * Tests views creation wizard.&#10 *&#10 * @group views_ui&#10 * @see \Drupal\views\Plugin\views\filter\EntityReference&#10 */&#10class FilterEntityReferenceTest extends WebDriverTestBase {&#10&#10  use FilterEntityReferenceTrait;&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected static $modules = [&#10    'node',&#10    'views',&#10    'views_ui',&#10    'views_test_entity_reference',&#10  ];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  protected $defaultTheme = 'stark';&#10&#10  /**&#10   * Views used by this test.&#10   *&#10   * @var array&#10   */&#10  public static $testViews = ['test_entity_reference'];&#10&#10  /**&#10   * {@inheritdoc}&#10   */&#10  public function setUp(): void {&#10    parent::setUp();&#10&#10    $admin_user = $this->drupalCreateUser([&#10      'administer views',&#10    ]);&#10    $this->drupalLogin($admin_user);&#10&#10    $this->setUpEntityTypes();&#10  }&#10&#10  /**&#10   * Tests end to end creation of a Content Entity Reference filter.&#10   */&#10  public function testAddEntityReferenceFieldWithDefaultSelectionHandler(): void {&#10    $this->drupalGet('admin/structure/views/view/content');&#10    $assert = $this->assertSession();&#10    $page = $this->getSession()->getPage();&#10&#10    // Open the dialog.&#10    $page->clickLink('views-add-filter');&#10&#10    // Wait for the popup to open and the search field to be available.&#10    $assert->waitForField('override[controls][options_search]');&#10&#10    // Test that the both entity_reference and numeric options are visible.&#10    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')&#10      ->isVisible());&#10    $page->findField('name[node__field_test.field_test_target_id]')&#10      ->click();&#10    $this->assertTrue($page->find('css', 'button.button.button--primary.form-submit.ui-button')&#10      ->isVisible());&#10    $page->find('css', 'button.button.button--primary.form-submit.ui-button')&#10      ->click();&#10&#10    // Wait for the selection handler to show up.&#10    $assert->waitForField('options[sub_handler]');&#10    $page->selectFieldOption('options[sub_handler]', 'default:node');&#10&#10    // Check that that default handler target bundles are available.&#10    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][article]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][page]')&#10      ->isVisible());&#10    $this->assertTrue($page->findField('options[widget]')->isVisible());&#10&#10    // Ensure that disabled form elements from selection handler do not show up&#10    // @see \Drupal\views\Plugin\views\filter\EntityReference method&#10    // buildExtraOptionsForm.&#10    $this->assertFalse($page->hasField('options[reference_default:node][target_bundles_update]'));&#10    $this->assertFalse($page->hasField('options[reference_default:node][auto_create]'));&#10    $this->assertFalse($page->hasField('options[reference_default:node][auto_create_bundle]'));&#10&#10    // Choose the default handler using the select widget with article type&#10    // checked.&#10    $page->checkField('options[reference_default:node][target_bundles][article]');&#10    $page->selectFieldOption('options[widget]', 'select');&#10    $this->assertSame($page->findField('options[widget]')&#10      ->getValue(), 'select');&#10    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")&#10      ->press();&#10&#10    // Test the exposed filter options show up correctly.&#10    // Test the exposed filter options show up correctly.&#10    $assert->waitForField('options[expose_button][checkbox][checkbox]');&#10    $page->findField('options[expose_button][checkbox][checkbox]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));&#10&#10    // Check the exposed filters multiple option.&#10    $assert->waitForField('options[expose][multiple]');&#10    $page->findField('options[expose][multiple]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    // Wait for the Views Preview to show up with the new reference field.&#10    $assert->waitForField('field_test_config_target_id[]');&#10    $this->assertTrue($page->findField('field_test_target_id[]')&#10      ->isVisible());&#10    $this->assertTrue($page->find('css', 'select[name="field_test_target_id[]"]')&#10      ->hasAttribute('multiple'));&#10&#10    // Opening the settings form and change the handler to use an Entity&#10    // Reference view.&#10    // @see views.view.test_entity_reference.yml&#10    $base_url = Url::fromRoute('entity.view.collection')->toString();&#10    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_target_id';&#10    $extra_settings_selector = 'a[href="' . $url . '"]';&#10    $element = $this->assertSession()->waitForElementVisible('css', $extra_settings_selector);&#10    $this->assertNotNull($element);&#10    $element->click();&#10    $assert->waitForField('options[sub_handler]');&#10    $page->selectFieldOption('options[sub_handler]', 'views');&#10    $page->selectFieldOption('options[reference_views][view][view_and_display]', 'test_entity_reference:entity_reference');&#10    $page->find('xpath', "//*[contains(text(), 'Apply')]")&#10      ->press();&#10    $assert->assertWaitOnAjaxRequest();&#10&#10    // The Views Reference filter has a title Filter to a single result, so&#10    // ensure only that result is available as an option.&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    $this->assertCount(1, $page->findAll('css', 'select[name="field_test_target_id[]"] option'));&#10&#10    // Change to an autocomplete filter.&#10    // Opening the settings form and change the handler to use an Entity&#10    // Reference view.&#10    // @see views.view.test_entity_reference.yml&#10    $page->find('css', $extra_settings_selector)&#10      ->click();&#10    $assert->waitForElementVisible('named', [&#10      'radio',&#10      'options[widget]',&#10    ]);&#10    $page->selectFieldOption('options[widget]', 'autocomplete');&#10    $this->assertSame($page->findField('options[widget]')&#10      ->getValue(), 'autocomplete');&#10    $this->getSession()&#10      ->getPage()&#10      ->find('xpath', "//*[contains(text(), 'Apply')]")&#10      ->press();&#10&#10    // Check that it is now an autocomplete.&#10    $assert->waitForField('field_test_target_id');&#10    $page = $this->getSession()->getPage();&#10    $this->assertTrue($page->findField('field_test_target_id')&#10      ->isVisible());&#10    $this->assertTrue($page->find('css', 'input[name="field_test_target_id"]')&#10      ->hasAttribute('data-autocomplete-path'));&#10  }&#10&#10  /**&#10   * Tests end to end creation of a Config Entity Reference filter.&#10   */&#10  public function testAddConfigEntityReferenceFieldWithDefaultSelectionHandler(): void {&#10    $this->drupalGet('admin/structure/views/view/content');&#10    $assert = $this->assertSession();&#10    $page = $this->getSession()->getPage();&#10&#10    // Open the 'Add filter dialog'.&#10    $page->clickLink('views-add-filter');&#10&#10    // Wait for the popup to open and the search field to be available.&#10    $assert->waitForField('override[controls][group]');&#10&#10    // Test that the entity_reference option is visible.&#10    $this->assertTrue($page->findField('name[node__field_test_config.field_test_config_target_id]')->isVisible());&#10    $page->findField('name[node__field_test_config.field_test_config_target_id]')->click();&#10    $submitButton = $page->find('css', 'button.button.button--primary.form-submit.ui-button');&#10    $this->assertTrue($submitButton->isVisible());&#10    $submitButton->click();&#10&#10    // Wait for the selection handler to show up.&#10    $assert->waitForField('options[sub_handler]');&#10&#10    $page->selectFieldOption('options[sub_handler]', 'default:node_type');&#10&#10    // Choose the default handler using the select widget with article type&#10    // checked.&#10    $page->selectFieldOption('options[widget]', 'select');&#10    $this->assertSame('select', $page->findField('options[widget]')->getValue());&#10    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")->press();&#10&#10    // Test the exposed filter options show up correctly.&#10    $assert->waitForField('options[expose_button][checkbox][checkbox]');&#10    $page->findField('options[expose_button][checkbox][checkbox]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));&#10&#10    // Check the exposed filters multiple option.&#10    $assert->waitForField('options[expose][multiple]');&#10    $page->findField('options[expose][multiple]')->click();&#10    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $assert->waitForElementRemoved('css', '.ui-dialog');&#10&#10    // Wait for the Views Preview to show up with the reference field.&#10    $assert->waitForField('field_test_config_target_id[]');&#10    $this->assertTrue($page->findField('field_test_config_target_id[]')->isVisible());&#10    $this->assertTrue($page->find('css', 'select[name="field_test_config_target_id[]"]')->hasAttribute('multiple'));&#10&#10    // Check references config options.&#10    $options = $page->findAll('css', 'select[name="field_test_config_target_id[]"] option');&#10    $this->assertCount(2, $options);&#10    $this->assertSame('article', $options[0]->getValue());&#10    $this->assertSame('page', $options[1]->getValue());&#10&#10    $base_url = Url::fromRoute('entity.view.collection')->toString();&#10    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_config_target_id';&#10    $extra_settings_selector = 'a[href="' . $url . '"]';&#10&#10    // Change to an autocomplete filter.&#10    $page->find('css', $extra_settings_selector)->click();&#10    $assert->waitForField('options[widget]');&#10    $page->selectFieldOption('options[widget]', 'autocomplete');&#10    $this->assertSame('autocomplete', $page->findField('options[widget]')->getValue());&#10    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');&#10    $this->assertSession()->assertWaitOnAjaxRequest();&#10&#10    // Check that it is now an autocomplete input.&#10    $assert->waitForField('field_test_config_target_id');&#10    $this->assertTrue($page->findField('field_test_config_target_id')->isVisible());&#10    $this->assertTrue($page->find('css', 'input[name="field_test_config_target_id"]')->hasAttribute('data-autocomplete-path'));&#10  }&#10&#10}&#10
\ No newline at end of file
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\views_ui\FunctionalJavascript;
+
+use Drupal\Core\Url;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\views_ui\Traits\FilterEntityReferenceTrait;
+
+/**
+ * Tests views creation wizard.
+ *
+ * @group views_ui
+ * @see \Drupal\views\Plugin\views\filter\EntityReference
+ */
+class FilterEntityReferenceTest extends WebDriverTestBase {
+
+  use FilterEntityReferenceTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'node',
+    'views',
+    'views_ui',
+    'views_test_entity_reference',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * Views used by this test.
+   *
+   * @var array
+   */
+  public static $testViews = ['test_entity_reference'];
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(): void {
+    parent::setUp();
+
+    $admin_user = $this->drupalCreateUser([
+      'administer views',
+    ]);
+    $this->drupalLogin($admin_user);
+
+    $this->setUpEntityTypes();
+  }
+
+  /**
+   * Tests end to end creation of a Content Entity Reference filter.
+   */
+  public function testAddEntityReferenceFieldWithDefaultSelectionHandler(): void {
+    $this->drupalGet('admin/structure/views/view/content');
+    $assert = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    // Open the dialog.
+    $page->clickLink('views-add-filter');
+
+    // Wait for the popup to open and the search field to be available.
+    $assert->waitForField('override[controls][options_search]');
+
+    // Test that the both entity_reference and numeric options are visible.
+    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')
+      ->isVisible());
+    $this->assertTrue($page->findField('name[node__field_test.field_test_target_id]')
+      ->isVisible());
+    $page->findField('name[node__field_test.field_test_target_id]')
+      ->click();
+    $this->assertTrue($page->find('css', 'button.button.button--primary.form-submit.ui-button')
+      ->isVisible());
+    $page->find('css', 'button.button.button--primary.form-submit.ui-button')
+      ->click();
+
+    // Wait for the selection handler to show up.
+    $assert->waitForField('options[sub_handler]');
+    $page->selectFieldOption('options[sub_handler]', 'default:node');
+
+    // Check that that default handler target bundles are available.
+    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][article]')
+      ->isVisible());
+    $this->assertTrue($page->findField('options[reference_default:node][target_bundles][page]')
+      ->isVisible());
+    $this->assertTrue($page->findField('options[widget]')->isVisible());
+
+    // Ensure that disabled form elements from selection handler do not show up
+    // @see \Drupal\views\Plugin\views\filter\EntityReference method
+    // buildExtraOptionsForm.
+    $this->assertFalse($page->hasField('options[reference_default:node][target_bundles_update]'));
+    $this->assertFalse($page->hasField('options[reference_default:node][auto_create]'));
+    $this->assertFalse($page->hasField('options[reference_default:node][auto_create_bundle]'));
+
+    // Choose the default handler using the select widget with article type
+    // checked.
+    $page->checkField('options[reference_default:node][target_bundles][article]');
+    $page->selectFieldOption('options[widget]', 'select');
+    $this->assertSame($page->findField('options[widget]')
+      ->getValue(), 'select');
+    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")
+      ->press();
+
+    // Test the exposed filter options show up correctly.
+    // Test the exposed filter options show up correctly.
+    $assert->waitForField('options[expose_button][checkbox][checkbox]');
+    $page->findField('options[expose_button][checkbox][checkbox]')->click();
+    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));
+
+    // Check the exposed filters multiple option.
+    $assert->waitForField('options[expose][multiple]');
+    $page->findField('options[expose][multiple]')->click();
+    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));
+    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');
+    $assert->waitForElementRemoved('css', '.ui-dialog');
+
+    // Wait for the Views Preview to show up with the new reference field.
+    $assert->waitForField('field_test_config_target_id[]');
+    $this->assertTrue($page->findField('field_test_target_id[]')
+      ->isVisible());
+    $this->assertTrue($page->find('css', 'select[name="field_test_target_id[]"]')
+      ->hasAttribute('multiple'));
+
+    // Opening the settings form and change the handler to use an Entity
+    // Reference view.
+    // @see views.view.test_entity_reference.yml
+    $base_url = Url::fromRoute('entity.view.collection')->toString();
+    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_target_id';
+    $extra_settings_selector = 'a[href="' . $url . '"]';
+    $element = $this->assertSession()->waitForElementVisible('css', $extra_settings_selector);
+    $this->assertNotNull($element);
+    $element->click();
+    $assert->waitForField('options[sub_handler]');
+    $page->selectFieldOption('options[sub_handler]', 'views');
+    $page->selectFieldOption('options[reference_views][view][view_and_display]', 'test_entity_reference:entity_reference');
+    $page->find('xpath', "//*[contains(text(), 'Apply')]")
+      ->press();
+    $assert->assertWaitOnAjaxRequest();
+
+    // The Views Reference filter has a title Filter to a single result, so
+    // ensure only that result is available as an option.
+    $assert->waitForElementRemoved('css', '.ui-dialog');
+
+    $this->assertCount(1, $page->findAll('css', 'select[name="field_test_target_id[]"] option'));
+
+    // Change to an autocomplete filter.
+    // Opening the settings form and change the handler to use an Entity
+    // Reference view.
+    // @see views.view.test_entity_reference.yml
+    $page->find('css', $extra_settings_selector)
+      ->click();
+    $assert->waitForElementVisible('named', [
+      'radio',
+      'options[widget]',
+    ]);
+    $page->selectFieldOption('options[widget]', 'autocomplete');
+    $this->assertSame($page->findField('options[widget]')
+      ->getValue(), 'autocomplete');
+    $this->getSession()
+      ->getPage()
+      ->find('xpath', "//*[contains(text(), 'Apply')]")
+      ->press();
+
+    // Check that it is now an autocomplete.
+    $assert->waitForField('field_test_target_id');
+    $page = $this->getSession()->getPage();
+    $this->assertTrue($page->findField('field_test_target_id')
+      ->isVisible());
+    $this->assertTrue($page->find('css', 'input[name="field_test_target_id"]')
+      ->hasAttribute('data-autocomplete-path'));
+  }
+
+  /**
+   * Tests end to end creation of a Config Entity Reference filter.
+   */
+  public function testAddConfigEntityReferenceFieldWithDefaultSelectionHandler(): void {
+    $this->drupalGet('admin/structure/views/view/content');
+    $assert = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    // Open the 'Add filter dialog'.
+    $page->clickLink('views-add-filter');
+
+    // Wait for the popup to open and the search field to be available.
+    $assert->waitForField('override[controls][group]');
+
+    // Test that the entity_reference option is visible.
+    $this->assertTrue($page->findField('name[node__field_test_config.field_test_config_target_id]')->isVisible());
+    $page->findField('name[node__field_test_config.field_test_config_target_id]')->click();
+    $submitButton = $page->find('css', 'button.button.button--primary.form-submit.ui-button');
+    $this->assertTrue($submitButton->isVisible());
+    $submitButton->click();
+
+    // Wait for the selection handler to show up.
+    $assert->waitForField('options[sub_handler]');
+
+    $page->selectFieldOption('options[sub_handler]', 'default:node_type');
+
+    // Choose the default handler using the select widget with article type
+    // checked.
+    $page->selectFieldOption('options[widget]', 'select');
+    $this->assertSame('select', $page->findField('options[widget]')->getValue());
+    $page->find('xpath', "//*[contains(text(), 'Apply and continue')]")->press();
+
+    // Test the exposed filter options show up correctly.
+    $assert->waitForField('options[expose_button][checkbox][checkbox]');
+    $page->findField('options[expose_button][checkbox][checkbox]')->click();
+    $this->assertTrue($page->hasCheckedField('options[expose_button][checkbox][checkbox]'));
+
+    // Check the exposed filters multiple option.
+    $assert->waitForField('options[expose][multiple]');
+    $page->findField('options[expose][multiple]')->click();
+    $this->assertTrue($page->hasCheckedField('options[expose][multiple]'));
+    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');
+    $assert->waitForElementRemoved('css', '.ui-dialog');
+
+    // Wait for the Views Preview to show up with the reference field.
+    $assert->waitForField('field_test_config_target_id[]');
+    $this->assertTrue($page->findField('field_test_config_target_id[]')->isVisible());
+    $this->assertTrue($page->find('css', 'select[name="field_test_config_target_id[]"]')->hasAttribute('multiple'));
+
+    // Check references config options.
+    $options = $page->findAll('css', 'select[name="field_test_config_target_id[]"] option');
+    $this->assertCount(2, $options);
+    $this->assertSame('article', $options[0]->getValue());
+    $this->assertSame('page', $options[1]->getValue());
+
+    $base_url = Url::fromRoute('entity.view.collection')->toString();
+    $url = $base_url . '/nojs/handler-extra/content/page_1/filter/field_test_config_target_id';
+    $extra_settings_selector = 'a[href="' . $url . '"]';
+
+    // Change to an autocomplete filter.
+    $page->find('css', $extra_settings_selector)->click();
+    $assert->waitForField('options[widget]');
+    $page->selectFieldOption('options[widget]', 'autocomplete');
+    $this->assertSame('autocomplete', $page->findField('options[widget]')->getValue());
+    $page->find('css', '.ui-dialog .ui-dialog-buttonpane')->pressButton('Apply');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    // Check that it is now an autocomplete input.
+    $assert->waitForField('field_test_config_target_id');
+    $this->assertTrue($page->findField('field_test_config_target_id')->isVisible());
+    $this->assertTrue($page->find('css', 'input[name="field_test_config_target_id"]')->hasAttribute('data-autocomplete-path'));
+  }
+
+}
diff --git a/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php b/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php
index cdf1b6d1a18d..83e58fbaf49b 100644
--- a/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php
+++ b/core/modules/views_ui/tests/src/Traits/FilterEntityReferenceTrait.php
@@ -1 +1,135 @@
-<?php&#10&#10declare(strict_types=1);&#10&#10namespace Drupal\Tests\views_ui\Traits;&#10&#10use Drupal\Core\Field\FieldStorageDefinitionInterface;&#10use Drupal\field\Entity\FieldConfig;&#10use Drupal\field\Entity\FieldStorageConfig;&#10use Drupal\node\NodeTypeInterface;&#10use Drupal\Tests\node\Traits\ContentTypeCreationTrait;&#10use Drupal\Tests\node\Traits\NodeCreationTrait;&#10&#10/**&#10 * Sets up the entity types and relationships for entity reference tests.&#10 *&#10 * This trait is meant to be used only by test classes.&#10 */&#10trait FilterEntityReferenceTrait {&#10&#10  use ContentTypeCreationTrait {&#10    createContentType as drupalCreateContentType;&#10  }&#10  use NodeCreationTrait {&#10    getNodeByTitle as drupalGetNodeByTitle;&#10    createNode as drupalCreateNode;&#10  }&#10&#10  /**&#10   * The host content type to add the entity reference field to.&#10   *&#10   * @var \Drupal\node\NodeTypeInterface&#10   */&#10  protected NodeTypeInterface $hostBundle;&#10&#10  /**&#10   * The content type to be referenced by the host content type.&#10   *&#10   * @var \Drupal\node\NodeTypeInterface&#10   */&#10  protected NodeTypeInterface $targetBundle;&#10&#10  /**&#10   * Entities to be used as reference targets.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $targetEntities;&#10&#10  /**&#10   * Host entities which contain the reference fields to the target entities.&#10   *&#10   * @var \Drupal\node\NodeInterface[]&#10   */&#10  protected array $hostEntities;&#10&#10  /**&#10   * Sets up the entity types and relationships.&#10   */&#10  protected function setUpEntityTypes(): void {&#10    // Create an entity type, and a referenceable type. Since these are coded&#10    // into the test view, they are not randomly named.&#10    $this->hostBundle = $this->drupalCreateContentType(['type' => 'page']);&#10    $this->targetBundle = $this->drupalCreateContentType(['type' => 'article']);&#10&#10    $field_storage = FieldStorageConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test',&#10      'type' => 'entity_reference',&#10      'settings' => [&#10        'target_type' => 'node',&#10      ],&#10      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,&#10    ]);&#10    $field_storage->save();&#10&#10    $field = FieldConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test',&#10      'bundle' => $this->hostBundle->id(),&#10      'settings' => [&#10        'handler' => 'default',&#10        'handler_settings' => [&#10          'target_bundles' => [&#10            $this->targetBundle->id() => $this->targetBundle->label(),&#10          ],&#10        ],&#10      ],&#10    ]);&#10    $field->save();&#10&#10    // Create 10 nodes for use as target entities.&#10    for ($i = 0; $i < 10; $i++) {&#10      $node = $this->drupalCreateNode([&#10        'type' => $this->targetBundle->id(),&#10        'title' => ucfirst($this->targetBundle->id()) . ' ' . $i,&#10      ]);&#10      $this->targetEntities[$node->id()] = $node;&#10    }&#10&#10    // Create 1 host entity to reference target entities from.&#10    $node = $this->drupalCreateNode([&#10      'type' => $this->hostBundle->id(),&#10      'title' => ucfirst($this->hostBundle->id()) . ' 0',&#10    ]);&#10    $this->hostEntities = [&#10      $node->id() => $node,&#10    ];&#10&#10    $field_storage = FieldStorageConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test_config',&#10      'type' => 'entity_reference',&#10      'settings' => [&#10        'target_type' => 'node_type',&#10      ],&#10      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,&#10    ]);&#10    $field_storage->save();&#10&#10    $field = FieldConfig::create([&#10      'entity_type' => 'node',&#10      'field_name' => 'field_test_config',&#10      'bundle' => $this->hostBundle->id(),&#10      'settings' => [&#10        'handler' => 'default',&#10        'handler_settings' => [&#10          'sort' => ['field' => '_none'],&#10        ],&#10      ],&#10    ]);&#10    $field->save();&#10  }&#10&#10}&#10
\ No newline at end of file
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\views_ui\Traits;
+
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\node\NodeTypeInterface;
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\Tests\node\Traits\NodeCreationTrait;
+
+/**
+ * Sets up the entity types and relationships for entity reference tests.
+ *
+ * This trait is meant to be used only by test classes.
+ */
+trait FilterEntityReferenceTrait {
+
+  use ContentTypeCreationTrait {
+    createContentType as drupalCreateContentType;
+  }
+  use NodeCreationTrait {
+    getNodeByTitle as drupalGetNodeByTitle;
+    createNode as drupalCreateNode;
+  }
+
+  /**
+   * The host content type to add the entity reference field to.
+   *
+   * @var \Drupal\node\NodeTypeInterface
+   */
+  protected NodeTypeInterface $hostBundle;
+
+  /**
+   * The content type to be referenced by the host content type.
+   *
+   * @var \Drupal\node\NodeTypeInterface
+   */
+  protected NodeTypeInterface $targetBundle;
+
+  /**
+   * Entities to be used as reference targets.
+   *
+   * @var \Drupal\node\NodeInterface[]
+   */
+  protected array $targetEntities;
+
+  /**
+   * Host entities which contain the reference fields to the target entities.
+   *
+   * @var \Drupal\node\NodeInterface[]
+   */
+  protected array $hostEntities;
+
+  /**
+   * Sets up the entity types and relationships.
+   */
+  protected function setUpEntityTypes(): void {
+    // Create an entity type, and a referenceable type. Since these are coded
+    // into the test view, they are not randomly named.
+    $this->hostBundle = $this->drupalCreateContentType(['type' => 'page']);
+    $this->targetBundle = $this->drupalCreateContentType(['type' => 'article']);
+
+    $field_storage = FieldStorageConfig::create([
+      'entity_type' => 'node',
+      'field_name' => 'field_test',
+      'type' => 'entity_reference',
+      'settings' => [
+        'target_type' => 'node',
+      ],
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'entity_type' => 'node',
+      'field_name' => 'field_test',
+      'bundle' => $this->hostBundle->id(),
+      'settings' => [
+        'handler' => 'default',
+        'handler_settings' => [
+          'target_bundles' => [
+            $this->targetBundle->id() => $this->targetBundle->label(),
+          ],
+        ],
+      ],
+    ]);
+    $field->save();
+
+    // Create 10 nodes for use as target entities.
+    for ($i = 0; $i < 10; $i++) {
+      $node = $this->drupalCreateNode([
+        'type' => $this->targetBundle->id(),
+        'title' => ucfirst($this->targetBundle->id()) . ' ' . $i,
+      ]);
+      $this->targetEntities[$node->id()] = $node;
+    }
+
+    // Create 1 host entity to reference target entities from.
+    $node = $this->drupalCreateNode([
+      'type' => $this->hostBundle->id(),
+      'title' => ucfirst($this->hostBundle->id()) . ' 0',
+    ]);
+    $this->hostEntities = [
+      $node->id() => $node,
+    ];
+
+    $field_storage = FieldStorageConfig::create([
+      'entity_type' => 'node',
+      'field_name' => 'field_test_config',
+      'type' => 'entity_reference',
+      'settings' => [
+        'target_type' => 'node_type',
+      ],
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'entity_type' => 'node',
+      'field_name' => 'field_test_config',
+      'bundle' => $this->hostBundle->id(),
+      'settings' => [
+        'handler' => 'default',
+        'handler_settings' => [
+          'sort' => ['field' => '_none'],
+        ],
+      ],
+    ]);
+    $field->save();
+  }
+
+}
-- 
GitLab

